AC_INIT(eel)

dnl ==========================================================================
dnl
dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!
dnl
dnl ==========================================================================

GNOME_REQUIRED=1.2.8
GNOME_LIBS_REQUIRED=1.2.11
GTK_REQUIRED=1.2.9
GLIB_REQUIRED=1.2.9
GDK_PIXBUF_REQUIRED=0.10.0
LIBXML_REQUIRED=1.8.10
GNOME_VFS_REQUIRED=1.0
FREETYPE_REQUIRED=2.0.1
FREETYPE_LIBRARY_REQUIRED=6.1.0
LIBRSVG_REQUIRED=1.0.0
GCONF_REQUIRED=0.12
OAF_REQUIRED=0.6.5

AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(GNOME_VFS_REQUIRED)
AC_SUBST(FREETYPE_REQUIRED)
AC_SUBST(LIBRSVG_REQUIRED)

dnl ===========================================================================

if test -n "$GNOME2_PATH"; then
	PATH="$GNOME2_PATH/bin:$PATH"
	export PATH
fi

EEL_MAJOR_VERSION=1
EEL_LIBTOOL_MAJOR_VERSION=`expr $EEL_MAJOR_VERSION - 1`
EEL_MINOR_VERSION=0
EEL_MICRO_VERSION=2
EEL_VERSION=$EEL_MAJOR_VERSION.$EEL_MINOR_VERSION.$EEL_MICRO_VERSION
EEL_VERSION_INFO=`expr $EEL_LIBTOOL_MAJOR_VERSION + $EEL_MINOR_VERSION`:$EEL_MICRO_VERSION:$EEL_MINOR_VERSION

AC_SUBST(EEL_MAJOR_VERSION)
AC_SUBST(EEL_MINOR_VERSION)
AC_SUBST(EEL_MICRO_VERSION)
AC_SUBST(EEL_VERSION)
AC_SUBST(EEL_VERSION_INFO)

VERSION=$EEL_VERSION

AM_INIT_AUTOMAKE(eel, $VERSION)
AM_CONFIG_HEADER(config.h)
AC_DEFINE_UNQUOTED(GNOME_EXPLICIT_TRANSLATION_DOMAIN, "eel")

AM_MAINTAINER_MODE

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

AM_PROG_XML_I18N_TOOLS

AM_SANITY_CHECK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_ISC_POSIX

AC_PROG_AWK
AC_CHECK_PROGS(PERL, perl5 perl)

_found_perl=0
if test -n "$PERL" && $PERL -v | grep 'version 5.' > /dev/null ; then
  _found_perl=1
else
  # The version string for perl changed for 'version 5' to 'v5' in
  # perl 5.6 or therabouts
  if test -n "$PERL" && $PERL -v | grep 'v5.' > /dev/null ; then
    _found_perl=1
  fi

fi

REBUILD=\#
if test $_found_perl -eq 1; then
  if test -n "$AWK" ; then 
    REBUILD=
  fi
fi
AC_SUBST(REBUILD)

dnl ====================================
dnl = Begin profiling support
dnl ====================================
ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
[  --enable-profiler		Enable profiler],
ENABLE_PROFILER=1
AC_DEFINE(ENABLE_PROFILER))

if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES"
	LDFLAGS="/gnome/PROFILE/lib/libprofiler.so -lpthread"
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")
dnl ====================================
dnl = End profiling support
dnl ====================================

dnl ====================================
dnl = Method for changing environment
dnl ====================================
AC_CHECK_FUNCS( setenv unsetenv putenv )

dnl =======================
dnl = begin tests for FreeType2
dnl =======================
NAUTILUS_PATH_FREETYPE2($FREETYPE_LIBRARY_REQUIRED,,
AC_MSG_ERROR([
*** FreeType2 $FREETYPE_REQUIRED or better is required. You can obtain a
*** packaged version of FreeType2 over here:
*** http://developer.eazel.com/eazel-hacking/updates/freetype2
*** source versions are available from ftp://ftp.freetype.org]))

AC_SUBST(FREETYPE2_CFLAGS)
AC_SUBST(FREETYPE2_LIBS)
dnl =======================
dnl = End tests for FreeType2
dnl =======================

dnl Checks for libraries.
AM_PATH_GLIB($GLIB_REQUIRED,,
AC_MSG_ERROR([
*** GLIB $GLIB_REQUIRED or better is required. The latest version of GLIB
*** is always available from ftp://ftp.gtk.org/.]))

AC_SUBST(GLIB_REQUIRED)

AM_PATH_GTK($GTK_REQUIRED,,
AC_MSG_ERROR([
*** Gtk+ $GTK_REQUIRED or better is required. The latest version of GTK
*** is always available from ftp://ftp.gtk.org/.]))

AC_SUBST(GTK_REQUIRED)

AM_PATH_GNOME($GNOME_REQUIRED,,AC_MSG_ERROR([*** GNOME $GNOME_REQUIRED or better is required.]), gnomeui gtk gdk_pixbuf xml vfs librsvg)

AC_SUBST(GNOME_REQUIRED)

AC_PATH_PROG(GNOME_CONFIG,gnome-config,no)
if test x$GNOME_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find gnome-config. Please install the GNOME package)
fi

NAUTILUS_VERSION_INSIST(gnome-libs, $GNOME_CONFIG --version | awk '{print $2}', >=, GNOME_LIBS_REQUIRED)

dnl check for gnome_canvas_set_dither existence
_libs="$LIBS"
LIBS=$GNOMEUI_LIBS
AC_CHECK_FUNCS(gnome_canvas_set_dither)
LIBS="$_libs"

AC_SUBST(GNOMECANVASPIXBUF_LIBS)
AC_SUBST(GNOMECANVASPIXBUF_INCLUDEDIR)
AC_SUBST(VFS_CFLAGS)
AC_SUBST(VFS_LIBS)

dnl   Bug 7315: Rediscover CFLAGS for GTK, because gnome-config won't know
dnl   all the necessary flags if GTK has been upgraded more recently than
dnl   it has.

AC_PATH_PROG(GTK_CONFIG,gtk-config,false)
AC_MSG_CHECKING(for gtk-config cflags)
GTK_CFLAGS=`$GTK_CONFIG --cflags`
AC_MSG_RESULT($GTK_CFLAGS)
GNOMEUI_CFLAGS="$GNOMEUI_CFLAGS $GTK_CFLAGS"
AC_SUBST(GNOMEUI_CFLAGS)

AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml-config please install the gnome-xml package)
fi

XML_VERSION="`$XML_CONFIG --version`"
case "$XML_VERSION" in
	1.*)
		:
  	;;

	*)
		AC_ERROR(Eel needs gnome-xml version 1.x not $XML_VERSION)
	;;
esac
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)

AM_PATH_OAF($OAF_REQUIRED)
AC_SUBST(OAF_REQUIRED)

AM_PATH_GCONF($GCONF_REQUIRED,,,gconf-gtk)
AC_SUBST(GCONF_REQUIRED)

dnl ====================================
dnl = Begin tests for librsvg
dnl ====================================
AC_PATH_PROG(RSVG_CONFIG,librsvg-config,no)
if test x$RSVG_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find librsvg-config please install the librsvg package)
fi

RSVG_VERSION="`$RSVG_CONFIG --version`"
case "$RSVG_VERSION" in
	1.0.*)
		:
  	;;

	*)
		AC_ERROR(Eel needs librsvg version 1.0.x not $RSVG_VERSION)
	;;
esac
AC_SUBST(LIBRSVG_LIBS)
AC_SUBST(LIBRSVG_CFLAGS)

dnl ====================================
dnl = End tests for librsvg
dnl ====================================

dnl ====================================
dnl = begin gdk-pixbuf checks
dnl ====================================
AM_PATH_GDK_PIXBUF($GDK_PIXBUF_REQUIRED,,
AC_MSG_ERROR([*** gdk_pixbuf $GDK_PIXBUF_REQUIRED or better is required.]))

AC_SUBST(GDK_PIXBUF_REQUIRED)
dnl ====================================
dnl = end gdk-pixbuf checks
dnl ====================================


AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz
AC_SUBST(Z_LIBS)], AC_MSG_ERROR([*** zlib is required]))

dnl ====================================
dnl = Begin tests for libpng
dnl ====================================
  if test -z "$LIBPNG"; then
    AC_CHECK_LIB(png, png_read_info,
      AC_CHECK_HEADER(png.h,
        png_ok=yes,
        png_ok=no),
      AC_MSG_ERROR(*** (PNG library not found) ***), -lz -lm)
    if test "$png_ok" = yes; then
      AC_MSG_CHECKING([for png_structp in png.h])
      AC_TRY_COMPILE([#include <png.h>],
        [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
        png_ok=yes,
        png_ok=no)
      AC_MSG_RESULT($png_ok)
      if test "$png_ok" = yes; then
        PNG='png'; LIBPNG='-lpng -lz'
      else
        AC_MSG_WARN(*** PNG loader will not be built (PNG library is too old) ***)
      fi
    else
     AC_MSG_WARN(*** PNG loader will not be built (PNG header file not found) ***)
    fi
  fi

AC_SUBST(LIBPNG)
dnl =======================
dnl = End tests for libpng
dnl =======================

dnl =======================
dnl = Checks for possible font directories
dnl = These are only used if the font server
dnl = configuration is not detected.  This makes
dnl = system like solaris have good font choices
dnl = even if they dont user the font server.
dnl =======================
EEL_POSSIBLE_FONT_DIRECTORIES=""

possible_font_dirs="
/usr/X/lib/X11/fonts/TrueType
/usr/X/lib/X11/fonts/Type1
"

for d in $possible_font_dirs
do
	if test -f $d/fonts.dir
	then
		if test -z "$EEL_POSSIBLE_FONT_DIRECTORIES"
		then
			EEL_POSSIBLE_FONT_DIRECTORIES="$d"
		else
			EEL_POSSIBLE_FONT_DIRECTORIES="$EEL_POSSIBLE_FONT_DIRECTORIES,$d"
		fi
	fi
done

AC_DEFINE_UNQUOTED(EEL_POSSIBLE_FONT_DIRECTORIES, "$EEL_POSSIBLE_FONT_DIRECTORIES")
dnl =======================
dnl = End checks for possible font directories
dnl =======================

dnl Checks for i18n
ALL_LINGUAS="az ca cs da de el en_GB es fi fr ga gl hu it ja ko lt nl nn no pl pt_BR ru sk sl sv ta tr uk zh_TW"
AM_GNOME_GETTEXT
# AM_GNOME_GETTEXT above substs $DATADIRNAME
# this is the directory where the *.{mo,gmo} files are installed
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align -Wsign-compare \
	-Werror \
	$CFLAGS"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$option $CFLAGS"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi

dnl
dnl Define the build message (probably not used)
dnl CVSVERSION overrides
dnl

EEL_BUILD_MESSAGE=""
AC_ARG_WITH(build-message, [  --with-build-message=MESSAGE		Build (about box) message], EEL_BUILD_MESSAGE=$withval)

if test -n "$is_cvs_version"
then
	EEL_BUILD_MESSAGE="Development Build"
fi

EEL_SOURCE_DIRECTORY=`(cd $srcdir && pwd)`
AC_DEFINE_UNQUOTED(EEL_SOURCE_DIRECTORY, "$EEL_SOURCE_DIRECTORY")

dnl Flags for libraries that Eel depends on
EEL_DEPENDENCY_CFLAGS="${GCONF_CFLAGS} `$GNOME_CONFIG --cflags gnomeui gtk gdk_pixbuf xml vfs`"
EEL_DEPENDENCY_LIBS="${GCONF_LIBS} `$GNOME_CONFIG --libs gnomeui gtk gdk_pixbuf xml vfs librsvg` ${LIBPNG}"
AC_SUBST(EEL_DEPENDENCY_CFLAGS)
AC_SUBST(EEL_DEPENDENCY_LIBS)

dnl Flags for modules that depend on Eel
EEL_LIBDIR='-L${libdir}'
EEL_INCLUDEDIR="-I${includedir}/eel-1 ${EEL_DEPENDENCY_CFLAGS}"
EEL_LIBS="-leel ${EEL_DEPENDENCY_LIBS}"
AC_SUBST(EEL_LIBDIR)
AC_SUBST(EEL_INCLUDEDIR)
AC_SUBST(EEL_LIBS)

AC_OUTPUT([
eel.spec
Makefile
data/Makefile
data/fonts/Makefile
data/fonts/urw/Makefile
eel/Makefile
eel/eel-features.h
po/Makefile.in
intl/Makefile
test/Makefile
])

dnl <= Configuration summary =>

echo "Eel configuration summary:"
echo ""

dnl <= CFLAGS and LDFLAGS =>
echo "CFLAGS : $CFLAGS"
echo "LDFLAGS : $LDFLAGS"
echo ""

dnl <= Profile support? =>
case "X$ENABLE_PROFILER" in
  X1)
	echo "Enable profiler                   : YES"
	;;
  *)
	echo "Enable profiler                   : NO"
	;;
esac

dnl <= Eel =>
echo "EEL_LIBDIR     : $EEL_LIBDIR"
echo "EEL_INCLUDEDIR : $EEL_INCLUDEDIR"
echo "EEL_LIBS       : $EEL_LIBS"

dnl <= End of configuration summary =>
