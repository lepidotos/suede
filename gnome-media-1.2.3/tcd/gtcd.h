/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef gtcd_H
#define gtcd_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_GNOME_GTcd) && !defined(_GNOME_GTcd_defined)
#define ORBIT_DECL_GNOME_GTcd 1
#define _GNOME_GTcd_defined 1
#define GNOME_GTcd__free CORBA_Object__free
   typedef CORBA_Object GNOME_GTcd;
   extern CORBA_unsigned_long GNOME_GTcd__classid;
#if !defined(TC_IMPL_TC_GNOME_GTcd_0)
#define TC_IMPL_TC_GNOME_GTcd_0 'g'
#define TC_IMPL_TC_GNOME_GTcd_1 't'
#define TC_IMPL_TC_GNOME_GTcd_2 'c'
#define TC_IMPL_TC_GNOME_GTcd_3 'd'
   extern const struct CORBA_TypeCode_struct TC_GNOME_GTcd_struct;
#define TC_GNOME_GTcd ((CORBA_TypeCode)&TC_GNOME_GTcd_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*open_new_cd) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
   }
   POA_GNOME_GTcd__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_GTcd__epv *GNOME_GTcd_epv;
   }
   POA_GNOME_GTcd__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_GTcd__vepv *vepv;
   }
   POA_GNOME_GTcd;
   extern void POA_GNOME_GTcd__init(PortableServer_Servant servant,
				    CORBA_Environment * ev);
   extern void POA_GNOME_GTcd__fini(PortableServer_Servant servant,
				    CORBA_Environment * ev);

/** prototypes **/
   void GNOME_GTcd_open_new_cd(GNOME_GTcd _obj, CORBA_Environment * ev);

   void _ORBIT_skel_GNOME_GTcd_open_new_cd(POA_GNOME_GTcd * _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_open_new_cd)
					   (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
