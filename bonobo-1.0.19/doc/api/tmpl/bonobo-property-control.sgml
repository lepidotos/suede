<!-- ##### SECTION Title ##### -->
BonoboPropertyControl

<!-- ##### SECTION Short_Description ##### -->
an interface for exposing property editors as controls

<!-- ##### SECTION Long_Description ##### -->
<para>
This interface is designed to allow things that offer GUI
customization a nice way to provide both multi and single
page customization controls. Each page is exposed as a
#BonoboControl, and contain any arbitary widgets. Each
control in a multi-page configuration should expose a
string property named "bonobo:title" which contains a
translated label suitable for using in a tabbed dialog.
</para>

<para>
An interface is also provided for applying each page's
contents, and requesting help for that page. The interface
also provides a #BonoboEventSource to which a #BonoboListener
can be connected. Changes can be listened for which will
arrive on the event with name #BONOBO_PROPERTY_CONTROL_CHANGED.
</para>

<para>
A new single page BonoboPropertyControl interface can
be created thus:
  <example>
    <title>A simple property control interface</title>
    <programlisting>
static void
stop_start_cb (GtkToggleButton *button, GtkClock *clock)
{
	if (button->active)
		gtk_clock_start (clock);
	else
		gtk_clock_stop (clock);
}

static BonoboControl *
get_page_fn (BonoboPropertyControl *control,
             int                    page_number,
             void                  *closure)
{
	GtkClock  *clock = closure;
	GtkWidget *widget = gtk_checkbutton_new_with_label (
		"Clock is running");
	
	gtk_widget_show (widget);

	gtk_signal_connect (GTK_OBJECT (widget), "toggled",
			    GTK_SIGNAL_FUNC (stop_start_cb), clock);

	return bonobo_control_new (widget);
}

BonoboObject *
add_property_interface (BonoboObject *aggregate, GtkClock *clock)
{
	BonoboPropertyControl *pc;

	pc = bonobo_property_control_new (get_page_fn, 1, clock);

	bonobo_object_add_interface (aggregate_object, BONOBO_OBJET (pc));

	return aggregate_object;
}
    </programlisting>
  </example>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
  #BonoboProperty, #BonoboPropertyBag, #BonoboControl
</para>

<!-- ##### STRUCT BonoboPropertyControl ##### -->
<para>

</para>


<!-- ##### TYPEDEF BonoboPropertyControlClass ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION BonoboPropertyControlGetControlFn ##### -->
<para>

</para>

@control: 
@page_number: 
@closure: 
@Returns: 


<!-- ##### FUNCTION bonobo_property_control_new ##### -->
<para>

</para>

@get_fn: 
@num_pages: 
@closure: 
@Returns: 


<!-- ##### FUNCTION bonobo_property_control_new_full ##### -->
<para>

</para>

@get_fn: 
@num_pages: 
@event_source: 
@closure: 
@Returns: 


<!-- ##### FUNCTION bonobo_property_control_construct ##### -->
<para>

</para>

@property_control: 
@event_source: 
@get_fn: 
@num_pages: 
@closure: 
@Returns: 
<!-- # Unused Parameters # -->
@corba_control: 


<!-- ##### FUNCTION bonobo_property_control_changed ##### -->
<para>

</para>

@property_control: 
@opt_ev: 


<!-- ##### FUNCTION bonobo_property_control_get_event_source ##### -->
<para>

</para>

@property_control: 
@Returns: 


<!-- ##### MACRO BONOBO_PROPERTY_CONTROL_CHANGED ##### -->
<para>

</para>



<!-- ##### SIGNAL BonoboPropertyControl::action ##### -->
<para>

</para>

@bonobopropertycontrol: the object which received the signal.
@arg1: 
@arg2: 

