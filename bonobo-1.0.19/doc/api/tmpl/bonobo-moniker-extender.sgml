<!-- ##### SECTION Title ##### -->
BonoboMonikerExtender

<!-- ##### SECTION Short_Description ##### -->
A way to extend arbitary monikers

<!-- ##### SECTION Long_Description ##### -->
<para>
A moniker extender is used to extend the functionality of a moniker.
There are two standard moniker extenders that cannot be system wide,
since they use the oaf database to expand the scope of a moniker to
arbitrarily many interfaces. These are invoked explicitely by monikers
implementing the stream interface in the following way:
  <example>
     <title>Explicit Stream extender usage example</title>
     <programlisting>
Bonobo_Unknown
example_moniker_resolve (BonoboMoniker               *moniker,
			 const Bonobo_ResolveOptions *options,
			 const CORBA_char            *requested_interface,
			 CORBA_Environment           *ev)
{
	if (!strcmp (requested_interface, "IDL:Bonobo/Stream:1.0"))
		return handle_stream (moniker, options, ev);
	else
		return bonobo_moniker_use_extender (
			"OAFIID:Bonobo_MonikerExtender_stream",
			moniker, options, requested_interface, ev);
}
     </programlisting>
  </example>
  The moniker extender essentialy resolves 'moniker' against stream
and my some means ( not known when the moniker was written ) converts
this to a new exotic interface - via. the PersistStream interface.
</para>

<para>
All standard moniker extenders are registered by adding a fragment
like this:
  <example>
    <title>Oaf information for an extender</title>
    <programlisting>
&lt;oaf_attribute name="bonobo:moniker_extender" type="stringv"&gt;
	&lt;item value="file:"/&gt;
&lt;/oaf_attribute&gt;
    </programlisting>
  </example>
to the .oaf file. This registers the extender with the system, such
that when a moniker resolve fails an extender can be found for any
of the monikers with prefix specified in the "bonobo:moniker_extender"
stringv.
</para>

<para>
Implementing your own extender is extremely simple, much like
#BonoboMonikerSimple.
  <example>
    <title>Oaf information for an extender</title>
    <programlisting>
Bonobo_Unknown
example_extender_resolve (BonoboMonikerExtender *extender,
			  const Bonobo_Moniker   m,
			  const Bonobo_ResolveOptions *options,
			  const CORBA_char      *display_name,
			  const CORBA_char      *requested_interface,
			  CORBA_Environment     *ev)
{
	... resolve 'm' against an interface we know it supports ...
	... then use that interface to provide requested_interface ...
}
    </programlisting>
  </example>
It is registered again in much the same way in your factory:
  <example>
    <title>Creating a new simple moniker</title>
    <programlisting>
static BonoboObject *
bonobo_std_moniker_factory (BonoboGenericFactory *this,
			    const char           *object_id,
			    void                 *data)
{
	g_return_val_if_fail (object_id != NULL, NULL);

	if (!strcmp (object_id, "OAFIID:Bonobo_MonikerExtender_file"))
		return BONOBO_OBJECT (bonobo_moniker_extender_new (
			example_extender_resolve, NULL));
	else
		return NULL;
}
    </programlisting>
  </example>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT BonoboMonikerExtender ##### -->
<para>

</para>


<!-- ##### TYPEDEF BonoboMonikerExtenderClass ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION BonoboMonikerExtenderFn ##### -->
<para>

</para>

@extender: 
@parent: 
@options: 
@display_name: 
@requested_interface: 
@ev: 
@Returns: 


<!-- ##### FUNCTION bonobo_moniker_extender_new ##### -->
<para>

</para>

@resolve: 
@data: 
@Returns: 


<!-- ##### FUNCTION bonobo_moniker_find_extender ##### -->
<para>

</para>

@name: 
@interface: 
@ev: 
@Returns: 


<!-- ##### FUNCTION bonobo_moniker_use_extender ##### -->
<para>

</para>

@extender_oafiid: 
@moniker: 
@options: 
@requested_interface: 
@ev: 
@Returns: 


