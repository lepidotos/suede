<!-- ##### SECTION Title ##### -->
BonoboView

<!-- ##### SECTION Short_Description ##### -->
View object for exporting a view of a BonoboEmbeddable component

<!-- ##### SECTION Long_Description ##### -->
<para>
   #BonoboView objects are typically created on the view factory
   callback of a #BonoboEmbeddable object.  Bonobo components should be
   able to provide as many view objects as requested by the
   #BonoboEmbeddable object on demand.
</para>

<para>
   It is the programmer's responsibility to keep the contents of all the
   views displaying the same information (modulo per-view state, like
   the zoom factor). Since GtkWidgets do not support linear zooming,
   it is essential to understand that you cannot use GtkWidgets inside
   your view - you must write custom rendering code.
</para>

<para>
An embeddable view is not a Control - by this I mean that it does not
control its own sizing, rendering or layout. It is entirely a slave
to the parent with respect to this. A View should never render
scroll bars into itself ( unless, exceptionaly if it is activated,
and allows the user to pan around a larger area ). Essentialy a
non-activated view should only show things that it will print, and
should render WYSIWYG as much as possible. Embeddable's views
scale linearly to obey the zoom level they are given.
</para>

<para>
   If your component provides menus, then you use the
bonobo_view_get_remote_ui_container () to retrieve a Bonobo_UIContainer
handle to merge your menu / toolbar items into.
</para>

<para>
   #BonoboView objects get a chance to tell their containers their
   desired size by responding to the "size_query" signal.  They will
   get their size assigned later.  The size assignment happens on the
   GtkWidget using the normal Gtk+ size allocation procedure.
</para>

<para>
   Your component must support zooming to be a true embeddable. There
are two ways to support zoom.
  <itemizedlist>
    <listitem>
      <para>
        Zoom to fit - for simple items such as images this makes sense
      the item simply displays all of itself scaled to the available
      size allocated to the GtkWidget.
      </para>
    </listitem>
    <listitem>
      <para>
        Scaled - this obeys the zoom factor as set by the container,
      it also crops the display of the image to the GtkWindow. Connect
      to the "set_zoom_factor" signal.  This signal gives a floating
      point value that indicates the desired zoom factor set by your
      container.
      </para>
    </listitem>
  </itemizedlist>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
   #BonoboViewFrame,  #BonoboEmbeddable, #BonoboWidget, bonobo_widget_new()
</para>

<!-- ##### STRUCT BonoboView ##### -->
<para>

</para>


<!-- ##### TYPEDEF BonoboViewClass ##### -->
<para>

</para>


<!-- ##### MACRO BONOBO_VIEW_VERB_FUNC ##### -->
<para>

</para>

@fn: 


<!-- ##### USER_FUNCTION BonoboViewVerbFunc ##### -->
<para>

</para>

@view: 
@verb_name: 
@user_data: 


<!-- ##### FUNCTION bonobo_view_construct ##### -->
<para>

</para>

@view: 
@widget: 
@Returns: 
<!-- # Unused Parameters # -->
@corba_view: 


<!-- ##### FUNCTION bonobo_view_new ##### -->
<para>

</para>

@widget: 
@Returns: 


<!-- ##### FUNCTION bonobo_view_set_embeddable ##### -->
<para>

</para>

@view: 
@embeddable: 


<!-- ##### FUNCTION bonobo_view_get_embeddable ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION bonobo_view_set_view_frame ##### -->
<para>

</para>

@view: 
@view_frame: 


<!-- ##### FUNCTION bonobo_view_get_view_frame ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION bonobo_view_get_remote_ui_container ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION bonobo_view_get_ui_component ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION bonobo_view_activate_notify ##### -->
<para>

</para>

@view: 
@activated: 


<!-- ##### SIGNAL BonoboView::set-zoom-factor ##### -->
<para>
   This signal is emitted when the container requests the view to
   set its zoom factor to @arg1.  The view should respond by setting
   its zoom factor to the specified value.
</para>

@bonoboview: the object which received the signal.
@arg1: 

