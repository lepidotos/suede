<!-- ##### SECTION Title ##### -->
bonobo-property-bag-xml

<!-- ##### SECTION Short_Description ##### -->
BonoboArg XML persistance logic

<!-- ##### SECTION Long_Description ##### -->
<para>
This API is really super simple. It is designed in conjuction
with the #BonoboUINode API to allow you to serialize a #BonoboArg
( in fact a CORBA_any ) to an XML format, and obviously the
converse.
</para>

<para>
Here is a code sample to produce an XML string from a
CORBA_any or BonoboArg:
   <example>
     <title>Converting Any to XML</title>
     <programlisting>
char *
convert_arg_to_xml (BonoboArg *bonobo_arg)
{
	CORBA_Environment ev;
	BonoboUINode     *node;
	char             *value;

	CORBA_exception_init (&amp;ev);

	node = bonobo_property_bag_xml_encode_any (NULL, bonobo_arg, &amp;ev);
	if (!node)
		return NULL;

	value = bonobo_property_bag_xml_decode_any (node, &amp;ev);
	bonobo_ui_node_free (node);

	CORBA_exception_free (&amp;ev);

	return value;
}
     </programlisting>
   </example>
</para>

<para>
Here is the converse sample to produce a BonoboArg from an XML string:
   <example>
     <title>Converting XML to an Any</title>
     <programlisting>
BonoboArg *
convert_xml_to_arg (const char *xml)
{
	CORBA_Environment ev;
	BonoboUINode     *node;
	BonoboArg        *value;

	CORBA_exception_init (&amp;ev);

	node = bonobo_ui_node_from_string (xml);
	if (!node)
		return NULL;

	value = bonobo_property_bag_xml_decode_any (node, &amp;ev);

	bonobo_ui_node_free (node);
	CORBA_exception_free (&amp;ev);

	return value;
}
     </programlisting>
   </example>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### FUNCTION bonobo_property_bag_xml_encode_any ##### -->
<para>

</para>

@opt_parent: 
@any: 
@ev: 
@Returns: 


<!-- ##### FUNCTION bonobo_property_bag_xml_decode_any ##### -->
<para>

</para>

@node: 
@ev: 
@Returns: 


