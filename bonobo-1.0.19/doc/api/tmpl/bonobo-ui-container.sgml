<!-- ##### SECTION Title ##### -->
BonoboUIContainer

<!-- ##### SECTION Short_Description ##### -->
The container interface as implemented for BonoboWindow

<!-- ##### SECTION Long_Description ##### -->
<para>
A BonoboUIContainer is a very thin object, it implements the CORBA
interface for doing UI merging, but none of the logic. In order
to achieve the effect it is associated with a BonoboUIEngine object.
Traditionaly the UI container was associated with a #BonoboWindow
however, this is now strongly deprecated, since the BonoboUIContainer
can be used with any #BonoboUIEngine, not just that used by BonoboWindow.
</para>

<para>
Here is how your code should interact with the BonoboUIContainer
  <example>
    <title>How to setup a BonoboUIContainer</title>
    <programlisting>
{
	BonoboWindow      *window;
	BonoboUIEngine    *engine;
	BonoboUIContainer *container;

	window = BONOBO_WINDOW (
		bonobo_window_new ("Window", "My Test Application"));
	container = bonobo_ui_container_new ();

	engine = bonobo_window_get_ui_engine (window);
	bonobo_ui_container_set_engine (container, engine);

	return window;
}
    </programlisting>
  </example>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#BonoboUIComponent, #BonoboUIEngine, #BonoboWindow, #BonoboUISync, #bonobo-ui-util
</para>

<!-- ##### TYPEDEF BonoboUIContainer ##### -->
<para>

</para>


<!-- ##### TYPEDEF BonoboUIContainerClass ##### -->
<para>

</para>


<!-- ##### FUNCTION bonobo_ui_container_construct ##### -->
<para>

</para>

@container: 
@corba_container: 
@Returns: 


<!-- ##### FUNCTION bonobo_ui_container_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION bonobo_ui_container_get_engine ##### -->
<para>

</para>

@container: 
@Returns: 


<!-- ##### FUNCTION bonobo_ui_container_set_engine ##### -->
<para>

</para>

@container: 
@engine: 


<!-- ##### FUNCTION bonobo_ui_container_set_win ##### -->
<para>

</para>

@container: 
@win: 


<!-- ##### FUNCTION bonobo_ui_container_get_win ##### -->
<para>

</para>

@container: 
@Returns: 


