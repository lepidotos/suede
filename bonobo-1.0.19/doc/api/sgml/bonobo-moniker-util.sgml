<refentry id="bonobo-bonobo-moniker-util">
<refmeta>
<refentrytitle>bonobo-moniker-util</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-moniker-util</refname><refpurpose>Object activation and construction through monikers.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        (<link linkend="BonoboMonikerAsyncFn">*BonoboMonikerAsyncFn</link>)         (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> <link linkend="bonobo-get-object">bonobo_get_object</link>            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> <link linkend="bonobo-moniker-client-new-from-name">bonobo_moniker_client_new_from_name</link>
                                            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-char">CORBA_char</link>* <link linkend="bonobo-moniker-client-get-name">bonobo_moniker_client_get_name</link>  (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> <link linkend="bonobo-moniker-client-resolve-default">bonobo_moniker_client_resolve_default</link>
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="BonoboObjectClient">BonoboObjectClient</link>* <link linkend="bonobo-moniker-client-resolve-client-default">bonobo_moniker_client_resolve_client_default</link>
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> <link linkend="bonobo-moniker-util-new-from-name-full">bonobo_moniker_util_new_from_name_full</link>
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> parent,
                                             const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-char">CORBA_char</link>* <link linkend="bonobo-moniker-util-get-parent-name">bonobo_moniker_util_get_parent_name</link>
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> <link linkend="bonobo-moniker-util-qi-return">bonobo_moniker_util_qi_return</link>
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
int         <link linkend="bonobo-moniker-util-seek-std-separator">bonobo_moniker_util_seek_std_separator</link>
                                            (const <link linkend="CORBA-char">CORBA_char</link> *str,
                                             int min_idx);
void        <link linkend="bonobo-get-object-async">bonobo_get_object_async</link>         (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-moniker-client-new-from-name-async">bonobo_moniker_client_new_from_name_async</link>
                                            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
char*       <link linkend="bonobo-moniker-util-escape">bonobo_moniker_util_escape</link>      (const char *string,
                                             int offset);
char*       <link linkend="bonobo-moniker-util-unescape">bonobo_moniker_util_unescape</link>    (const char *string,
                                             int num_chars);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-moniker-client-equal">bonobo_moniker_client_equal</link>     (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-moniker-resolve-async">bonobo_moniker_resolve_async</link>    (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-moniker-resolve-async-default">bonobo_moniker_resolve_async_default</link>
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The moniker utility functions provide two sets of functions:
  <itemizedlist>
    <listitem>
      <para>
      Helper functions for constructing and resolving monikers,
      and a simple get_object method that constructs and resolves
      against an interface in a single pass. Also, asynchronous
      versions of these methods are provided using the <link linkend="BonoboAsync">BonoboAsync</link>
      code. 
      </para>
    </listitem>
    <listitem>
      <para>
      Helper functions for the implementation of new custom
      monikers are also provided here, along with a lot of the
      grunt code neccessary for moniker implementation, particularly
      constructing the chained list of sub-monikers that comprises
      a complex moniker.
      </para>
    </listitem>
  </itemizedlist>
</para>
<para>
The most useful function to get a feel for what monikers can do
is the <function>bonobo_get_object</function> method. This is
used to create a moniker and resolve it against a given interface
like this:
  <example>
     <title>GetObject example</title>
     <programlisting>
GtkWidget *
moniker_resolve_demo (void)
{
	Bonobo_Control control;
	CORBA_Environment ev;

	CORBA_exception_init (&amp;ev);

	control = bonobo_get_object ("file:/demo/a.jpeg",
                                     "Bonobo/Control", NULL);

	if (control == CORBA_OBJECT_NIL)
		g_error ("Failed to get object file:/demo/a.jpeg");

	return bonobo_widget_new_control (control);
}
     </programlisting>
  </example>
  This also makes a control out of the widget.
</para>

<para>
  It is worth noting that when resolving monikers a contracted
version of the interface name may be used, ommitting the 'IDL:'
prefix and / or the ':0' suffix.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn ()</title>
<programlisting>void        (*BonoboMonikerAsyncFn)         (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-get-object">bonobo_get_object ()</title>
<programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link> bonobo_get_object            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This encapsulates both the parse stage and resolve process of using
a moniker, providing a simple VisualBasic like mechanism for using the
object name space.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the display name of a moniker
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the requested interface or CORBA_OBJECT_NIL
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-new-from-name">bonobo_moniker_client_new_from_name ()</title>
<programlisting><link linkend="Bonobo-Moniker">Bonobo_Moniker</link> bonobo_moniker_client_new_from_name
                                            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine tries to parse a Moniker in string form
</para>
<para>
eg. file:/tmp/a.tar.gz<link linkend="gzip">gzip</link>:<link linkend="tar">tar</link>:
</para>
<para>
into a CORBA_Object representation of this that can
later be resolved against an interface.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the display name of a moniker
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new Moniker handle
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-get-name">bonobo_moniker_client_get_name ()</title>
<programlisting><link linkend="CORBA-char">CORBA_char</link>* bonobo_moniker_client_get_name  (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> a moniker handle
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the display name of the moniker.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-resolve-default">bonobo_moniker_client_resolve_default ()</title>
<programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link> bonobo_moniker_client_resolve_default
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This resolves the moniker object against the given interface,
with a default set of resolve options.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> a moniker
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the interfaces resolved to or CORBA_OBJECT_NIL
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-resolve-client-default">bonobo_moniker_client_resolve_client_default ()</title>
<programlisting><link linkend="BonoboObjectClient">BonoboObjectClient</link>* bonobo_moniker_client_resolve_client_default
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
See: bonobo_moniker_client_resolve_default; however this version returns
a BonoboObjectClient wrapped reference.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> the moniker
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a BonoboObjectClient style reference.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-new-from-name-full">bonobo_moniker_util_new_from_name_full ()</title>
<programlisting><link linkend="Bonobo-Moniker">Bonobo_Moniker</link> bonobo_moniker_util_new_from_name_full
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> parent,
                                             const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine is used to continue building up the chain
that forms a multi-part moniker. The parent is referenced
as the parent and passed onto the next stage of parsing
the 'name'. We eventually return a moniker handle which
represents the end of a linked list of monikers each
pointing to their parent:
</para>
<para>
file:/tmp/a.tar.gz &lt;-- gzip: &lt;-- tar: &lt;-- [ this is returned ]</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> A parent moniker to chain to or CORBA_OBJECT_NIL
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the display name
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> corba environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The end node of a list of monikers representing <parameter>name</parameter>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-get-parent-name">bonobo_moniker_util_get_parent_name ()</title>
<programlisting><link linkend="CORBA-char">CORBA_char</link>* bonobo_moniker_util_get_parent_name
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This gets the display name of the parent moniker ( recursively
all of the parents of this moniker ).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> the moniker
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the display name; use CORBA_free to release it.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-qi-return">bonobo_moniker_util_qi_return ()</title>
<programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link> bonobo_moniker_util_qi_return
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
A helper function to share code from the end of a resolve
implementation; this ensures that the returned object is of
the correct interface by doing a queryInterface on the object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry> the unknown to query
</entry></row>
<row><entry align="right"><parameter>requested_interface</parameter>&nbsp;:</entry>
<entry> the desired interface
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an handle to the requested interface
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-seek-std-separator">bonobo_moniker_util_seek_std_separator ()</title>
<programlisting>int         bonobo_moniker_util_seek_std_separator
                                            (const <link linkend="CORBA-char">CORBA_char</link> *str,
                                             int min_idx);</programlisting>
<para>
This looks for a standard separator in a moniker's
display name string. Most monikers will want to use
standard separators.
</para>
<para>
See also bonobo_moniker_util_escape</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> the string to scan
</entry></row>
<row><entry align="right"><parameter>min_idx</parameter>&nbsp;:</entry>
<entry> the minimum offset at which a separator can be found.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the position of the standard separator, or a
pointer to the end of the string.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-get-object-async">bonobo_get_object_async ()</title>
<programlisting>void        bonobo_get_object_async         (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_get_object</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><parameter>timeout_msec</parameter>&nbsp;:</entry>
<entry> the timeout in milliseconds 
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry> the async callback that gets the response 
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> user context data to pass to that callback 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-new-from-name-async">bonobo_moniker_client_new_from_name_async ()</title>
<programlisting>void        bonobo_moniker_client_new_from_name_async
                                            (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An asynchronous version of new_from_name</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><parameter>timeout_msec</parameter>&nbsp;:</entry>
<entry> the timeout in milliseconds 
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry> the async callback that gets the response
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> user context data to pass to that callback
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-escape">bonobo_moniker_util_escape ()</title>
<programlisting>char*       bonobo_moniker_util_escape      (const char *string,
                                             int offset);</programlisting>
<para>
Escapes possible separator characters inside a moniker
these include '!' and '#', the '\' escaping character is
used.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> an unescaped string
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> an offset of characters to ignore
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an escaped sub-string.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-util-unescape">bonobo_moniker_util_unescape ()</title>
<programlisting>char*       bonobo_moniker_util_unescape    (const char *string,
                                             int num_chars);</programlisting>
<para>
This routine strips <parameter>num_chars</parameter>: from the start of
<parameter>string</parameter>, discards the rest, and proceeds to un-escape
characters escaped with '\'.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> a string
</entry></row>
<row><entry align="right"><parameter>num_chars</parameter>&nbsp;:</entry>
<entry> the number of chars to process.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the unescaped sub string.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-client-equal">bonobo_moniker_client_equal ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_moniker_client_equal     (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const <link linkend="CORBA-char">CORBA_char</link> *name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Compare a full <parameter>moniker</parameter> with the given <parameter>name</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> The moniker
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a display name eg. file:/demo/a.jpeg
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry> optional CORBA_Environment or NULL.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> TRUE if they are the same
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-resolve-async">bonobo_moniker_resolve_async ()</title>
<programlisting>void        bonobo_moniker_resolve_async    (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_moniker_client_resolve</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> the moniker to resolve
</entry></row>
<row><entry align="right"><parameter>options</parameter>&nbsp;:</entry>
<entry> resolve options
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><parameter>timeout_msec</parameter>&nbsp;:</entry>
<entry> the timeout in milliseconds 
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry> the async callback that gets the response 
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> user context data to pass to that callback 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-moniker-resolve-async-default">bonobo_moniker_resolve_async_default ()</title>
<programlisting>void        bonobo_moniker_resolve_async_default
                                            (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                             const char *interface_name,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_moniker_client_resolve_default</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>moniker</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>interface_name</parameter>&nbsp;:</entry>
<entry> the name of the interface we want returned as the result 
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a corba exception environment 
</entry></row>
<row><entry align="right"><parameter>timeout_msec</parameter>&nbsp;:</entry>
<entry> the timeout in milliseconds 
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry> the async callback that gets the response 
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> user context data to pass to that callback 
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
