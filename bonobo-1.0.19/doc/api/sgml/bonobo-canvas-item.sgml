<refentry id="bonobo-bonobo-canvas-item">
<refmeta>
<refentrytitle>BonoboCanvasItem</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboCanvasItem</refname><refpurpose>A GNOME Canvas Item that can be used to embed remote Bonobo GNOME
Canvas Items.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="BonoboCanvasItem">BonoboCanvasItem</link>;
typedef     <link linkend="BonoboCanvasItemClass">BonoboCanvasItemClass</link>;
void        <link linkend="bonobo-canvas-item-set-bounds">bonobo_canvas_item_set_bounds</link>   (<link linkend="BonoboCanvasItem">BonoboCanvasItem</link> *item,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1,
                                             <link linkend="double">double</link> x2,
                                             <link linkend="double">double</link> y2);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
   The Bonobo Canvas Item is a Canvas item that will allow you to
   embed an arbitrary Canvas Item that lives in in a remote
   Embeddable.  On the remote end, the <link linkend="BonoboCanvasComponent">BonoboCanvasComponent</link> class is
   used to wrap an arbitrary <link linkend="GnomeCanvasItem">GnomeCanvasItem</link> and export it. 
</para>

<para>
   This allows arbitrarily shaped components to be inserted into an
   application.  Both Xlib and AA canvas items are supported.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboCanvasItem">BonoboCanvasItem</title>
<programlisting>typedef struct {
	GnomeCanvasItem         canvas_item;
	BonoboEmbeddable        *embeddable;
	BonoboCanvasItemPrivate *priv;
} BonoboCanvasItem;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboCanvasItemClass">BonoboCanvasItemClass</title>
<programlisting>typedef struct {
	GnomeCanvasItemClass parent_class;
} BonoboCanvasItemClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-canvas-item-set-bounds">bonobo_canvas_item_set_bounds ()</title>
<programlisting>void        bonobo_canvas_item_set_bounds   (<link linkend="BonoboCanvasItem">BonoboCanvasItem</link> *item,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1,
                                             <link linkend="double">double</link> x2,
                                             <link linkend="double">double</link> y2);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>item</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>x2</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>y2</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
   <link linkend="BonoboCanvasComponent">BonoboCanvasComponent</link>, <link linkend="BonoboEmbeddable">BonoboEmbeddable</link>, <link linkend="BonoboObjectClient">BonoboObjectClient</link>.
</para>
</refsect1>

</refentry>
