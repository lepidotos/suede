<refentry id="bonobo-bonobo-storage">
<refmeta>
<refentrytitle>bonobo-storage</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-storage</refname><refpurpose>Abstract implementation of the Bonobo::Storage interface</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="BonoboStorage">BonoboStorage</link>;
typedef     <link linkend="BonoboStorageClass">BonoboStorageClass</link>;
<link linkend="BonoboStorage">BonoboStorage</link>* <link linkend="bonobo-storage-open">bonobo_storage_open</link>          (const char *driver,
                                             const char *path,
                                             <link linkend="gint">gint</link> flags,
                                             <link linkend="gint">gint</link> mode);
<link linkend="BonoboStorage">BonoboStorage</link>* <link linkend="bonobo-storage-open-full">bonobo_storage_open_full</link>     (const char *driver,
                                             const char *path,
                                             <link linkend="gint">gint</link> flags,
                                             <link linkend="gint">gint</link> mode,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-storage-copy-to">bonobo_storage_copy_to</link>          (<link linkend="Bonobo-Storage">Bonobo_Storage</link> src,
                                             <link linkend="Bonobo-Storage">Bonobo_Storage</link> dest,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-storage-write-class-id">bonobo_storage_write_class_id</link>   (<link linkend="BonoboStorage">BonoboStorage</link> *storage,
                                             char *class_id);
void        <link linkend="bonobo-stream-write-class-id">bonobo_stream_write_class_id</link>    (<link linkend="BonoboStream">BonoboStream</link> *stream,
                                             char *class_id);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The BonoboStorage C interface is extremely simple, this is since
the CORBA client interface is where the action occurs. It is
anticipated that relatively few people need to implement the
Bonobo/Storage IDL interface.
</para>

<para>
The common entry point for BonoboStorage is that of opening a
storage using the bonobo_storage_open function, perhaps by a
container to use to persist a compound document:
  <example>
     <title>An example storage use case</title>
     <programlisting>
void
container_save (SampleApp         *app,
                const char        *filename,
                CORBA_Environment *ev)
{
	BonoboStorage *storage;
	Bonobo_Storage corba_storage;
	GList *components;
	int i;

	storage = bonobo_storage_open (STORAGE_TYPE, filename,
				       Bonobo_Storage_READ |
				       Bonobo_Storage_WRITE |
				       Bonobo_Storage_CREATE,
				       0664);
	g_return_if_fail (storage);

	corba_storage = BONOBO_OBJREF (storage);

	... 
	Serialize components to streams created in the storage
	...

	Bonobo_Storage_commit (corba_storage, ev);

	CORBA_exception_free (ev);

	bonobo_object_unref (BONOBO_OBJECT (storage));
}
     </programlisting>
  </example>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboStorage">BonoboStorage</title>
<programlisting>typedef struct {
        BonoboXObject object;

	BonoboStoragePrivate *priv;
} BonoboStorage;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboStorageClass">BonoboStorageClass</title>
<programlisting>typedef struct {
	BonoboXObjectClass parent_class;

	POA_Bonobo_Storage__epv epv;

	/* virtual methods */
	Bonobo_StorageInfo *(*get_info) (BonoboStorage *storage,
					 const CORBA_char *path,
					 const Bonobo_StorageInfoFields mask,
					 CORBA_Environment *ev);
	void          (*set_info)       (BonoboStorage *storage,
					 const CORBA_char *path,
					 const Bonobo_StorageInfo * info,
					 const Bonobo_StorageInfoFields mask,
					 CORBA_Environment *ev);
	BonoboStream  *(*open_stream)   (BonoboStorage *storage,
					 const CORBA_char *path,
					 Bonobo_Storage_OpenMode, 
					 CORBA_Environment *ev);
	BonoboStorage *(*open_storage)  (BonoboStorage *storage,
					 const CORBA_char *path,
					 Bonobo_Storage_OpenMode, 
					 CORBA_Environment *ev);
	void         (*copy_to)         (BonoboStorage *storage, 
					 Bonobo_Storage target,
					 CORBA_Environment *ev);
	void         (*rename)          (BonoboStorage *storage,
					 const CORBA_char *path_name,
					 const CORBA_char *new_path_name,
					 CORBA_Environment *ev);
	void         (*commit)          (BonoboStorage *storage,
					 CORBA_Environment *ev);
	void         (*revert)          (BonoboStorage *storage,
					 CORBA_Environment *ev);
	Bonobo_Storage_DirectoryList *
	             (*list_contents)   (BonoboStorage *storage,
					 const CORBA_char *path,
					 Bonobo_StorageInfoFields mask,
					 CORBA_Environment *ev);
	void         (*erase)           (BonoboStorage *storage,
                                         const CORBA_char *path,
                                         CORBA_Environment *ev);
} BonoboStorageClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-storage-open">bonobo_storage_open ()</title>
<programlisting><link linkend="BonoboStorage">BonoboStorage</link>* bonobo_storage_open          (const char *driver,
                                             const char *path,
                                             <link linkend="gint">gint</link> flags,
                                             <link linkend="gint">gint</link> mode);</programlisting>
<para>
Opens or creates the file named at <parameter>path</parameter> with the stream driver
<parameter>driver</parameter>.
</para>
<para>
<parameter>driver</parameter> is one of: "efs", "vfs" or "fs" for now, please use
the macros for this though, see bonobo-stream.h eg.
BONOBO_IO_DRIVER_FS</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>driver</parameter>&nbsp;:</entry>
<entry> driver to use for opening.
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> path where the base file resides
</entry></row>
<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
<entry> Bonobo Storage OpenMode
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry> Unix open(2) mode
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a created BonoboStorage object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-storage-open-full">bonobo_storage_open_full ()</title>
<programlisting><link linkend="BonoboStorage">BonoboStorage</link>* bonobo_storage_open_full     (const char *driver,
                                             const char *path,
                                             <link linkend="gint">gint</link> flags,
                                             <link linkend="gint">gint</link> mode,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>driver</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>flags</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-storage-copy-to">bonobo_storage_copy_to ()</title>
<programlisting>void        bonobo_storage_copy_to          (<link linkend="Bonobo-Storage">Bonobo_Storage</link> src,
                                             <link linkend="Bonobo-Storage">Bonobo_Storage</link> dest,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Implements a pure CORBA method for copying one storage into
another, this is used by several BonoboStorage implemetations
where a fast case localy copy cannot work.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry> the source storage
</entry></row>
<row><entry align="right"><parameter>dest</parameter>&nbsp;:</entry>
<entry> the destination storage
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-storage-write-class-id">bonobo_storage_write_class_id ()</title>
<programlisting>void        bonobo_storage_write_class_id   (<link linkend="BonoboStorage">BonoboStorage</link> *storage,
                                             char *class_id);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>storage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>class_id</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-write-class-id">bonobo_stream_write_class_id ()</title>
<programlisting>void        bonobo_stream_write_class_id    (<link linkend="BonoboStream">BonoboStream</link> *stream,
                                             char *class_id);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>class_id</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="BonoboPersist">BonoboPersist</link> <link linkend="BonoboPersistStream">BonoboPersistStream</link>
</para>
</refsect1>

</refentry>
