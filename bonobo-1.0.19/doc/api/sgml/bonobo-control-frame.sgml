<refentry id="bonobo-bonobo-control-frame">
<refmeta>
<refentrytitle>BonoboControlFrame</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboControlFrame</refname><refpurpose>An implementation of the container's frame containing a Control</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="BonoboControlFrame">BonoboControlFrame</link>;
typedef     <link linkend="BonoboControlFrameClass">BonoboControlFrameClass</link>;
<link linkend="BonoboControlFrame">BonoboControlFrame</link>* <link linkend="bonobo-control-frame-new">bonobo_control_frame_new</link>
                                            (<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="bonobo-control-frame-get-widget">bonobo_control_frame_get_widget</link> (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);
void        <link linkend="bonobo-control-frame-set-ui-container">bonobo_control_frame_set_ui_container</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> uic);
void        <link linkend="bonobo-control-frame-control-activate">bonobo_control_frame_control_activate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
void        <link linkend="bonobo-control-frame-control-deactivate">bonobo_control_frame_control_deactivate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
void        <link linkend="bonobo-control-frame-set-autoactivate">bonobo_control_frame_set_autoactivate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="gboolean">gboolean</link> autoactivate);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-control-frame-get-autoactivate">bonobo_control_frame_get_autoactivate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link> <link linkend="bonobo-control-frame-get-control-property-bag">bonobo_control_frame_get_control_property_bag</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-control-frame-set-propbag">bonobo_control_frame_set_propbag</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="BonoboPropertyBag">BonoboPropertyBag</link> *propbag);
<link linkend="BonoboPropertyBag">BonoboPropertyBag</link>* <link linkend="bonobo-control-frame-get-propbag">bonobo_control_frame_get_propbag</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
void        <link linkend="bonobo-control-frame-control-set-state">bonobo_control_frame_control_set_state</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="GtkStateType">GtkStateType</link> state);
void        <link linkend="bonobo-control-frame-set-autostate">bonobo_control_frame_set_autostate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="gboolean">gboolean</link> autostate);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-control-frame-get-autostate">bonobo_control_frame_get_autostate</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
void        <link linkend="bonobo-control-frame-bind-to-control">bonobo_control_frame_bind_to_control</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-Control">Bonobo_Control</link> control);
<link linkend="Bonobo-Control">Bonobo_Control</link> <link linkend="bonobo-control-frame-get-control">bonobo_control_frame_get_control</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> <link linkend="bonobo-control-frame-get-ui-container">bonobo_control_frame_get_ui_container</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="BonoboControlFrame">BonoboControlFrame</link>* <link linkend="bonobo-control-frame-construct">bonobo_control_frame_construct</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);
void        <link linkend="bonobo-control-frame-size-request">bonobo_control_frame_size_request</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             int *desired_width,
                                             int *desired_height);
void        <link linkend="bonobo-control-frame-sync-realize">bonobo_control_frame_sync_realize</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);
void        <link linkend="bonobo-control-frame-sync-unrealize">bonobo_control_frame_sync_unrealize</link>
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The BonoboControlFrame object is used to embed a Control. Most
people will want to use <link linkend="BonoboWidget">BonoboWidget</link> instead of the control frame
since it provides lots of nice auxiliary features to make embedding
easy.
</para>

<para>
The control frame is coupled to an embedded control and is used
to allow the Control to communicate with its environment, particuarly
getting the <link linkend="BonoboUIContainer">BonoboUIContainer</link> for merging its menu / toolbar
UI elements.
</para>

<para>
  <example>
    <title>A nice use of a BonoboControlFrame</title>
    <programlisting>
BonoboWidget *
bonobo_widget_construct_control_from_objref (BonoboWidget      *bw,
					     Bonobo_Control     control,
					     Bonobo_UIContainer uic)
{
	GtkWidget    *control_frame_widget;

	/*
	 * Create a local ControlFrame for it.
	 */
	bw->priv->control_frame = bonobo_control_frame_new (uic);

	bonobo_control_frame_bind_to_control (bw->priv->control_frame, control);

	...

	bonobo_control_frame_set_autoactivate (bw->priv->control_frame, TRUE);

	/*
	 * Grab the actual widget which visually contains the remote
	 * Control.  This is a GtkSocket, in reality.
	 */
	control_frame_widget = bonobo_control_frame_get_widget (bw->priv->control_frame);

	/*
	 * Now stick it into this BonoboWidget.
	 */
	gtk_container_add (GTK_CONTAINER (bw),
			   control_frame_widget);

	/*
	 * Always remember to show the widget before reporting bugs.
	 */
	gtk_widget_show (control_frame_widget);

	if (uic != CORBA_OBJECT_NIL)
		bw->priv->uic = bonobo_object_dup_ref (uic, NULL);

	return bw;
}
    </programlisting>
  </example>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboControlFrame">BonoboControlFrame</title>
<programlisting>typedef struct {
	BonoboXObject base;
	BonoboControlFramePrivate *priv;
} BonoboControlFrame;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboControlFrameClass">BonoboControlFrameClass</title>
<programlisting>typedef struct {
	BonoboXObjectClass parent_class;

	POA_Bonobo_ControlFrame__epv epv;

	/* Signals. */
	void (*activated)           (BonoboControlFrame *control_frame, gboolean state);
	void (*activate_uri)        (BonoboControlFrame *control_frame, const char *uri, gboolean relative);

} BonoboControlFrameClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-new">bonobo_control_frame_new ()</title>
<programlisting><link linkend="BonoboControlFrame">BonoboControlFrame</link>* bonobo_control_frame_new
                                            (<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ui_container</parameter>&nbsp;:</entry>
<entry> The <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> for the container application.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> BonoboControlFrame object that implements the
Bonobo::ControlFrame CORBA service. 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-widget">bonobo_control_frame_get_widget ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  bonobo_control_frame_get_widget (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);</programlisting>
<para>
Use this function when you want to embed a BonoboControl into your
container's widget hierarchy.  Once you have bound the
BonoboControlFrame to a remote BonoboControl, place the widget
returned by <link linkend="bonobo-control-frame-get-widget">bonobo_control_frame_get_widget</link>() into your widget
hierarchy and the control will appear in your application.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>frame</parameter>&nbsp;:</entry>
<entry> The BonoboControlFrame whose widget is being requested.a
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> A GtkWidget which has the remote BonoboControl physically
inside it.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-set-ui-container">bonobo_control_frame_set_ui_container ()</title>
<programlisting>void        bonobo_control_frame_set_ui_container
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> uic);</programlisting>
<para>
Associates a new <literal>Bonobo_UIContainer</literal> object with this ControlFrame. This
is only allowed while the Control is deactivated.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object.
</entry></row>
<row><entry align="right"><parameter>uic</parameter>&nbsp;:</entry>
<entry> A Bonobo_UIContainer object reference.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-control-activate">bonobo_control_frame_control_activate ()</title>
<programlisting>void        bonobo_control_frame_control_activate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
Activates the BonoboControl embedded in <parameter>control_frame</parameter> by calling the
<link linkend="activate">activate</link>() <link linkend="Bonobo-Control">Bonobo_Control</link> interface method on it.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> The BonoboControlFrame object whose control should be
activated.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-control-deactivate">bonobo_control_frame_control_deactivate ()</title>
<programlisting>void        bonobo_control_frame_control_deactivate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
Deactivates the BonoboControl embedded in <parameter>control_frame</parameter> by calling
the <link linkend="activate">activate</link>() CORBA method on it with the parameter <literal>FALSE</literal>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> The BonoboControlFrame object whose control should be
deactivated.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-set-autoactivate">bonobo_control_frame_set_autoactivate ()</title>
<programlisting>void        bonobo_control_frame_set_autoactivate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="gboolean">gboolean</link> autoactivate);</programlisting>
<para>
Modifies the autoactivate behavior of <parameter>control_frame</parameter>.  If
<parameter>control_frame</parameter> is set to autoactivate, then it will automatically
send an "activate" message to the Control to which it is bound when
it gets a focus-in event, and a "deactivate" message when it gets a
focus-out event.  Autoactivation is off by default.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object.
</entry></row>
<row><entry align="right"><parameter>autoactivate</parameter>&nbsp;:</entry>
<entry> A flag which indicates whether or not the
ControlFrame should automatically perform activation on the Control
to which it is bound.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-autoactivate">bonobo_control_frame_get_autoactivate ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_control_frame_get_autoactivate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A <link linkend="BonoboControlFrame">BonoboControlFrame</link> object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> A boolean which indicates whether or not <parameter>control_frame</parameter> is
set to automatically activate its Control.  See
<link linkend="bonobo-control-frame-set-autoactivate">bonobo_control_frame_set_autoactivate</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-control-property-bag">bonobo_control_frame_get_control_property_bag ()</title>
<programlisting><link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link> bonobo_control_frame_get_control_property_bag
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This retrives a Bonobo_PropertyBag reference from its
associated Bonobo Control</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> the control frame
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> CORBA exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> CORBA property bag reference or CORBA_OBJECT_NIL
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-set-propbag">bonobo_control_frame_set_propbag ()</title>
<programlisting>void        bonobo_control_frame_set_propbag
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="BonoboPropertyBag">BonoboPropertyBag</link> *propbag);</programlisting>
<para>
Makes <parameter>control_frame</parameter> use <parameter>propbag</parameter> for its ambient properties.  When
<parameter>control_frame</parameter>'s Control requests the ambient properties, it will
get them from <parameter>propbag</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object.
</entry></row>
<row><entry align="right"><parameter>propbag</parameter>&nbsp;:</entry>
<entry> A BonoboPropertyBag which will hold <parameter>control_frame</parameter>'s
ambient properties.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-propbag">bonobo_control_frame_get_propbag ()</title>
<programlisting><link linkend="BonoboPropertyBag">BonoboPropertyBag</link>* bonobo_control_frame_get_propbag
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object whose PropertyBag has
been set.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The BonoboPropertyBag object which has been associated with
<parameter>control_frame</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-control-set-state">bonobo_control_frame_control_set_state ()</title>
<programlisting>void        bonobo_control_frame_control_set_state
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="GtkStateType">GtkStateType</link> state);</programlisting>
<para>
Proxies <parameter>state</parameter> to the control bound to <parameter>control_frame</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A <link linkend="BonoboControlFrame">BonoboControlFrame</link> object which is bound to a
remote <link linkend="BonoboControl">BonoboControl</link>.
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> A <link linkend="GtkStateType">GtkStateType</link> value, specifying the widget state to apply
to the remote control.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-set-autostate">bonobo_control_frame_set_autostate ()</title>
<programlisting>void        bonobo_control_frame_set_autostate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="gboolean">gboolean</link> autostate);</programlisting>
<para>
Changes whether or not <parameter>control_frame</parameter> automatically proxies
state changes to its associated control.  The default mode
is for the control frame to autopropagate.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A <link linkend="BonoboControlFrame">BonoboControlFrame</link> object.
</entry></row>
<row><entry align="right"><parameter>autostate</parameter>&nbsp;:</entry>
<entry> Whether or not GtkWidget state changes should be
automatically propagated down to the Control.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-autostate">bonobo_control_frame_get_autostate ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_control_frame_get_autostate
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A <link linkend="BonoboControlFrame">BonoboControlFrame</link> object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Whether or not this control frame will automatically
proxy GtkState changes to its associated Control.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-bind-to-control">bonobo_control_frame_bind_to_control ()</title>
<programlisting>void        bonobo_control_frame_bind_to_control
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-Control">Bonobo_Control</link> control);</programlisting>
<para>
Associates <parameter>control</parameter> with this <parameter>control_frame</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object.
</entry></row>
<row><entry align="right"><parameter>control</parameter>&nbsp;:</entry>
<entry> The CORBA object for the BonoboControl embedded
in this BonoboControlFrame.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-control">bonobo_control_frame_get_control ()</title>
<programlisting><link linkend="Bonobo-Control">Bonobo_Control</link> bonobo_control_frame_get_control
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame which is bound to a remote
BonoboControl.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The Bonobo_Control CORBA interface for the remote Control
which is bound to <parameter>frame</parameter>.  See also
<link linkend="bonobo-control-frame-bind-to-control">bonobo_control_frame_bind_to_control</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-get-ui-container">bonobo_control_frame_get_ui_container ()</title>
<programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> bonobo_control_frame_get_ui_container
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> A BonoboControlFrame object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The Bonobo_UIContainer object reference associated with this
ControlFrame.  This ui_container is specified when the ControlFrame is
created.  See <link linkend="bonobo-control-frame-new">bonobo_control_frame_new</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-construct">bonobo_control_frame_construct ()</title>
<programlisting><link linkend="BonoboControlFrame">BonoboControlFrame</link>* bonobo_control_frame_construct
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);</programlisting>
<para>
Initializes <parameter>control_frame</parameter> with the parameters.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry> The <link linkend="BonoboControlFrame">BonoboControlFrame</link> object to be initialized.
</entry></row>
<row><entry align="right"><parameter>ui_container</parameter>&nbsp;:</entry>
<entry> A CORBA object for the UIContainer for the container application.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the initialized BonoboControlFrame object <parameter>control_frame</parameter> that implements the
Bonobo::ControlFrame CORBA service.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-size-request">bonobo_control_frame_size_request ()</title>
<programlisting>void        bonobo_control_frame_size_request
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                             int *desired_width,
                                             int *desired_height);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>control_frame</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>desired_width</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>desired_height</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-sync-realize">bonobo_control_frame_sync_realize ()</title>
<programlisting>void        bonobo_control_frame_sync_realize
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>frame</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-control-frame-sync-unrealize">bonobo_control_frame_sync_unrealize ()</title>
<programlisting>void        bonobo_control_frame_sync_unrealize
                                            (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>frame</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
  <link linkend="BonoboWidget">BonoboWidget</link>, <link linkend="bonobo-widget-new">bonobo_widget_new</link>()
</para>
</refsect1>

</refentry>
