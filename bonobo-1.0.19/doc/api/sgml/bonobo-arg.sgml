<refentry id="bonobo-bonobo-arg">
<refmeta>
<refentrytitle>bonobo-arg</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-arg</refname><refpurpose>simplified CORBA_Any wrappers</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="BonoboArg">BonoboArg</link>;
typedef     <link linkend="BonoboArgType">BonoboArgType</link>;
#define     <link linkend="BONOBO-ARG-NULL-CAPS">BONOBO_ARG_NULL</link>
#define     <link linkend="BONOBO-ARG-BOOLEAN-CAPS">BONOBO_ARG_BOOLEAN</link>
#define     <link linkend="BONOBO-ARG-INT-CAPS">BONOBO_ARG_INT</link>
#define     <link linkend="BONOBO-ARG-LONG-CAPS">BONOBO_ARG_LONG</link>
#define     <link linkend="BONOBO-ARG-STRING-CAPS">BONOBO_ARG_STRING</link>
#define     <link linkend="BONOBO-ARG-FLOAT-CAPS">BONOBO_ARG_FLOAT</link>
#define     <link linkend="BONOBO-ARG-DOUBLE-CAPS">BONOBO_ARG_DOUBLE</link>
#define     <link linkend="BONOBO-ARG-GET-GENERAL-CAPS">BONOBO_ARG_GET_GENERAL</link>          (a,c,t,e)
#define     <link linkend="BONOBO-ARG-GET-BOOLEAN-CAPS">BONOBO_ARG_GET_BOOLEAN</link>          (a)
#define     <link linkend="BONOBO-ARG-GET-INT-CAPS">BONOBO_ARG_GET_INT</link>              (a)
#define     <link linkend="BONOBO-ARG-GET-LONG-CAPS">BONOBO_ARG_GET_LONG</link>             (a)
#define     <link linkend="BONOBO-ARG-GET-STRING-CAPS">BONOBO_ARG_GET_STRING</link>           (a)
#define     <link linkend="BONOBO-ARG-GET-FLOAT-CAPS">BONOBO_ARG_GET_FLOAT</link>            (a)
#define     <link linkend="BONOBO-ARG-GET-DOUBLE-CAPS">BONOBO_ARG_GET_DOUBLE</link>           (a)
#define     <link linkend="BONOBO-ARG-SET-GENERAL-CAPS">BONOBO_ARG_SET_GENERAL</link>          (a,v,c,t,e)
#define     <link linkend="BONOBO-ARG-SET-BOOLEAN-CAPS">BONOBO_ARG_SET_BOOLEAN</link>          (a,v)
#define     <link linkend="BONOBO-ARG-SET-INT-CAPS">BONOBO_ARG_SET_INT</link>              (a,v)
#define     <link linkend="BONOBO-ARG-SET-LONG-CAPS">BONOBO_ARG_SET_LONG</link>             (a,v)
#define     <link linkend="BONOBO-ARG-SET-STRING-CAPS">BONOBO_ARG_SET_STRING</link>           (a,v)
#define     <link linkend="BONOBO-ARG-SET-FLOAT-CAPS">BONOBO_ARG_SET_FLOAT</link>            (a,v)
#define     <link linkend="BONOBO-ARG-SET-DOUBLE-CAPS">BONOBO_ARG_SET_DOUBLE</link>           (a,v)
<link linkend="BonoboArg">BonoboArg</link>*  <link linkend="bonobo-arg-new">bonobo_arg_new</link>                  (<link linkend="BonoboArgType">BonoboArgType</link> t);
void        <link linkend="bonobo-arg-release">bonobo_arg_release</link>              (<link linkend="BonoboArg">BonoboArg</link> *arg);
<link linkend="BonoboArg">BonoboArg</link>*  <link linkend="bonobo-arg-copy">bonobo_arg_copy</link>                 (const <link linkend="BonoboArg">BonoboArg</link> *arg);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-arg-is-equal">bonobo_arg_is_equal</link>             (<link linkend="BonoboArg">BonoboArg</link> *a,
                                             <link linkend="BonoboArg">BonoboArg</link> *b,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="GtkType">GtkType</link>     <link linkend="bonobo-arg-type-to-gtk">bonobo_arg_type_to_gtk</link>          (<link linkend="BonoboArgType">BonoboArgType</link> id);
<link linkend="BonoboArgType">BonoboArgType</link> <link linkend="bonobo-arg-type-from-gtk">bonobo_arg_type_from_gtk</link>      (<link linkend="GtkType">GtkType</link> t);
void        <link linkend="bonobo-arg-to-gtk">bonobo_arg_to_gtk</link>               (<link linkend="GtkArg">GtkArg</link> *a,
                                             const <link linkend="BonoboArg">BonoboArg</link> *arg);
void        <link linkend="bonobo-arg-from-gtk">bonobo_arg_from_gtk</link>             (<link linkend="BonoboArg">BonoboArg</link> *a,
                                             const <link linkend="GtkArg">GtkArg</link> *arg);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-arg-type-is-equal">bonobo_arg_type_is_equal</link>        (<link linkend="BonoboArgType">BonoboArgType</link> a,
                                             <link linkend="BonoboArgType">BonoboArgType</link> b,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The BonoboArg code, and macros are designed to make the
use of CORBA_Any's slightly simpler by providing a glib
like binding for them. The bonobo-arg code also provides
mappings between Gtk Args and CORBA_anys.
</para>

<para>
A typical use of the BonoboArg macros would be in 
  <example>
     <title>Property bag implementation</title>
     <programlisting>
static void
get_prop (BonoboPropertyBag *bag,
	  BonoboArg         *arg,
	  guint              arg_id,
	  CORBA_Environment *ev,
	  gpointer           user_data)
{
	GtkObject *clock = user_data;

	switch (arg_id) {

	case PROP_RUNNING: {
		BONOBO_ARG_SET_BOOLEAN (arg, is_it_running);
		break;
	}

	default:
		bonobo_exception_set (ev, ex_Bonobo_PropertyBag_NotFound);
		break;
	}
}
     </programlisting>
  </example>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboArg">BonoboArg</title>
<programlisting>typedef CORBA_any      BonoboArg;
</programlisting>
<para>
A glib style looking type alias for a CORBA_any
</para></refsect2>
<refsect2>
<title><anchor id="BonoboArgType">BonoboArgType</title>
<programlisting>typedef CORBA_TypeCode BonoboArgType;
</programlisting>
<para>
A glib style looking typedef for a CORBA type description.
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-NULL-CAPS">BONOBO_ARG_NULL</title>
<programlisting>#define BONOBO_ARG_NULL    TC_null
</programlisting>
<para>
the null type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-BOOLEAN-CAPS">BONOBO_ARG_BOOLEAN</title>
<programlisting>#define BONOBO_ARG_BOOLEAN TC_boolean
</programlisting>
<para>
the boolean type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-INT-CAPS">BONOBO_ARG_INT</title>
<programlisting>#define BONOBO_ARG_INT     TC_long
</programlisting>
<para>
the integer type [ in fact a long ]
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-LONG-CAPS">BONOBO_ARG_LONG</title>
<programlisting>#define BONOBO_ARG_LONG    TC_long
</programlisting>
<para>
the long type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-STRING-CAPS">BONOBO_ARG_STRING</title>
<programlisting>#define BONOBO_ARG_STRING  TC_string
</programlisting>
<para>
the string type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-FLOAT-CAPS">BONOBO_ARG_FLOAT</title>
<programlisting>#define BONOBO_ARG_FLOAT   TC_float
</programlisting>
<para>
the float type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-DOUBLE-CAPS">BONOBO_ARG_DOUBLE</title>
<programlisting>#define BONOBO_ARG_DOUBLE  TC_double
</programlisting>
<para>
the double type
</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-GENERAL-CAPS">BONOBO_ARG_GET_GENERAL()</title>
<programlisting>#define     BONOBO_ARG_GET_GENERAL(a,c,t,e)</programlisting>
<para>
A macro to extract a value from a BonoboArg with
the given CORBA type <parameter>t</parameter>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg
</entry></row>
<row><entry align="right"><parameter>c</parameter>&nbsp;:</entry>
<entry>a BonoboArgType for checking
</entry></row>
<row><entry align="right"><parameter>t</parameter>&nbsp;:</entry>
<entry>the C type of the value eg. for BONOBO_ARG_LONG: CORBA_long
</entry></row>
<row><entry align="right"><parameter>e</parameter>&nbsp;:</entry>
<entry>an optional CORBA_Environment or NULL.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-BOOLEAN-CAPS">BONOBO_ARG_GET_BOOLEAN()</title>
<programlisting>#define BONOBO_ARG_GET_BOOLEAN(a)   (BONOBO_ARG_GET_GENERAL (a, TC_boolean, CORBA_boolean, NULL))
</programlisting>
<para>
this macro returns a CORBA_boolean from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-INT-CAPS">BONOBO_ARG_GET_INT()</title>
<programlisting>#define BONOBO_ARG_GET_INT(a)       (BONOBO_ARG_GET_GENERAL (a, TC_long, CORBA_long, NULL))
</programlisting>
<para>
this macro returns a CORBA_long from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-LONG-CAPS">BONOBO_ARG_GET_LONG()</title>
<programlisting>#define BONOBO_ARG_GET_LONG(a)      (BONOBO_ARG_GET_GENERAL (a, TC_long, CORBA_long, NULL))
</programlisting>
<para>
this macro returns a CORBA_long from from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-STRING-CAPS">BONOBO_ARG_GET_STRING()</title>
<programlisting>#define     BONOBO_ARG_GET_STRING(a)</programlisting>
<para>
this macro returns a const CORBA_char * from from inside a
BonoboArg, if the BonoboArg's type does not match, the
behavior is undefined, and may cause faults. The
pointer to the string is only valid for the scope of
the lifetime of <parameter>a</parameter>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-FLOAT-CAPS">BONOBO_ARG_GET_FLOAT()</title>
<programlisting>#define BONOBO_ARG_GET_FLOAT(a)     (BONOBO_ARG_GET_GENERAL (a, TC_float, CORBA_float, NULL))
</programlisting>
<para>
this macro returns a CORBA_float from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-GET-DOUBLE-CAPS">BONOBO_ARG_GET_DOUBLE()</title>
<programlisting>#define BONOBO_ARG_GET_DOUBLE(a)    (BONOBO_ARG_GET_GENERAL (a, TC_double, CORBA_double, NULL))
</programlisting>
<para>
this macro returns a CORBA_double from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg to extract the value from.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-GENERAL-CAPS">BONOBO_ARG_SET_GENERAL()</title>
<programlisting>#define     BONOBO_ARG_SET_GENERAL(a,v,c,t,e)</programlisting>
<para>
A macro to insert a value into an empty BonoboArg with
the given CORBA type <parameter>t</parameter>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the BonoboArg
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a pointer to the value to insert.
</entry></row>
<row><entry align="right"><parameter>c</parameter>&nbsp;:</entry>
<entry>a BonoboArgType for checking
</entry></row>
<row><entry align="right"><parameter>t</parameter>&nbsp;:</entry>
<entry>the C type of the value eg. for BONOBO_ARG_LONG: CORBA_long
</entry></row>
<row><entry align="right"><parameter>e</parameter>&nbsp;:</entry>
<entry>an optional CORBA_Environment or NULL.
</para>

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-BOOLEAN-CAPS">BONOBO_ARG_SET_BOOLEAN()</title>
<programlisting>#define BONOBO_ARG_SET_BOOLEAN(a,v) (BONOBO_ARG_SET_GENERAL (a, v, TC_boolean, CORBA_boolean, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_boolean.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-INT-CAPS">BONOBO_ARG_SET_INT()</title>
<programlisting>#define BONOBO_ARG_SET_INT(a,v)     (BONOBO_ARG_SET_GENERAL (a, v, TC_long, CORBA_long, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_long.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-LONG-CAPS">BONOBO_ARG_SET_LONG()</title>
<programlisting>#define BONOBO_ARG_SET_LONG(a,v)    (BONOBO_ARG_SET_GENERAL (a, v, TC_long, CORBA_long, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_long.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-STRING-CAPS">BONOBO_ARG_SET_STRING()</title>
<programlisting>#define     BONOBO_ARG_SET_STRING(a,v)</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain a
duplicated copy of <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_char *.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-FLOAT-CAPS">BONOBO_ARG_SET_FLOAT()</title>
<programlisting>#define BONOBO_ARG_SET_FLOAT(a,v)   (BONOBO_ARG_SET_GENERAL (a, v, TC_float, CORBA_float, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_float.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-ARG-SET-DOUBLE-CAPS">BONOBO_ARG_SET_DOUBLE()</title>
<programlisting>#define BONOBO_ARG_SET_DOUBLE(a,v)  (BONOBO_ARG_SET_GENERAL (a, v, TC_double, CORBA_double, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>a</parameter>&nbsp;:</entry>
<entry>the Bonobo arg to insert the value into
</entry></row>
<row><entry align="right"><parameter>v</parameter>&nbsp;:</entry>
<entry>a CORBA_double.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-arg-new">bonobo_arg_new ()</title>
<programlisting><link linkend="BonoboArg">BonoboArg</link>*  bonobo_arg_new                  (<link linkend="BonoboArgType">BonoboArgType</link> t);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-release">bonobo_arg_release ()</title>
<programlisting>void        bonobo_arg_release              (<link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-copy">bonobo_arg_copy ()</title>
<programlisting><link linkend="BonoboArg">BonoboArg</link>*  bonobo_arg_copy                 (const <link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-is-equal">bonobo_arg_is_equal ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_arg_is_equal             (<link linkend="BonoboArg">BonoboArg</link> *a,
                                             <link linkend="BonoboArg">BonoboArg</link> *b,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-type-to-gtk">bonobo_arg_type_to_gtk ()</title>
<programlisting><link linkend="GtkType">GtkType</link>     bonobo_arg_type_to_gtk          (<link linkend="BonoboArgType">BonoboArgType</link> id);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-type-from-gtk">bonobo_arg_type_from_gtk ()</title>
<programlisting><link linkend="BonoboArgType">BonoboArgType</link> bonobo_arg_type_from_gtk      (<link linkend="GtkType">GtkType</link> t);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-to-gtk">bonobo_arg_to_gtk ()</title>
<programlisting>void        bonobo_arg_to_gtk               (<link linkend="GtkArg">GtkArg</link> *a,
                                             const <link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-from-gtk">bonobo_arg_from_gtk ()</title>
<programlisting>void        bonobo_arg_from_gtk             (<link linkend="BonoboArg">BonoboArg</link> *a,
                                             const <link linkend="GtkArg">GtkArg</link> *arg);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="bonobo-arg-type-is-equal">bonobo_arg_type_is_equal ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_arg_type_is_equal        (<link linkend="BonoboArgType">BonoboArgType</link> a,
                                             <link linkend="BonoboArgType">BonoboArgType</link> b,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
</refsect2>

</refsect1>




</refentry>
