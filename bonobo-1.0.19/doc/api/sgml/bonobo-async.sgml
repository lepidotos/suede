<refentry id="bonobo-bonobo-async">
<refmeta>
<refentrytitle>bonobo-async</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-async</refname><refpurpose>Helpers for invoking CORBA methods asynchronously</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="BonoboAsyncArgFlag">BonoboAsyncArgFlag</link>;
typedef     <link linkend="BonoboAsyncArg">BonoboAsyncArg</link>;
typedef     <link linkend="BonoboAsyncMethod">BonoboAsyncMethod</link>;
struct      <link linkend="BonoboAsyncReply">BonoboAsyncReply</link>;
void        (<link linkend="BonoboAsyncCallback">*BonoboAsyncCallback</link>)          (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-async-demarshal">bonobo_async_demarshal</link>          (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply,
                                             <link linkend="gpointer">gpointer</link> retval,
                                             <link linkend="gpointer">gpointer</link> *out_args);
void        <link linkend="bonobo-async-invoke">bonobo_async_invoke</link>             (const <link linkend="BonoboAsyncMethod">BonoboAsyncMethod</link> *method,
                                             <link linkend="BonoboAsyncCallback">BonoboAsyncCallback</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="CORBA-Object">CORBA_Object</link> object,
                                             <link linkend="gpointer">gpointer</link> *args,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="GIOPRecvBuffer">GIOPRecvBuffer</link>* <link linkend="bonobo-async-handle-get-recv">bonobo_async_handle_get_recv</link>
                                            (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The bonobo-async interface duplicates much of the equivalent CORBA
asynchronous invocation functionality, in a non-standard way. This
is regrettable, but appeared neccessary at the time for various
reasons. This interface will be short lived, disappearing in the
next versions of Bonobo.
</para>

<para>
The bonobo-async code uses fully type driven marshaling, so before
you can invoke a method you need to fully describe the method you
wish to invoke by constructing its type data. You probably really
don't want to do this, however here is some example code to
demonstrate how it can be done:
  <example>
    <title>A chunk of the asynchronous moniker code</title>
    <programlisting>
typedef struct {
	Bonobo_Moniker       moniker;
	BonoboMonikerAsyncFn cb;
	gpointer             user_data;
} resolve_async_ctx_t;

static void
resolve_async_cb (BonoboAsyncReply  *handle,
		  CORBA_Environment *ev,
		  gpointer           user_data)
{
	resolve_async_ctx_t *ctx = user_data;

	if (BONOBO_EX (ev))
		ctx->cb (CORBA_OBJECT_NIL, ev, ctx->user_data);
	else {
		Bonobo_Unknown object;
		bonobo_async_demarshal (handle, &amp;object, NULL);
		ctx->cb (object, ev, ctx->user_data);
	}

	bonobo_object_release_unref (ctx->moniker, ev);
	g_free (ctx);
}

void
bonobo_moniker_resolve_async (Bonobo_Moniker         moniker,
			      Bonobo_ResolveOptions *options,
			      const char            *interface_name,
			      CORBA_Environment     *ev,
			      guint                  timeout_msec,
			      BonoboMonikerAsyncFn   cb,
			      gpointer               user_data)
{
	/*
	 * A chunk of data describing the 'resolve' method.
	 */
	static const BonoboAsyncArg arguments [] = {
		{ TC_Bonobo_ResolveOptions, BONOBO_ASYNC_IN },
		{ TC_string,                BONOBO_ASYNC_IN },
		{ NULL }
	};
	static const CORBA_TypeCode exceptions [] = {
		TC_Bonobo_Moniker_InterfaceNotFound,
		TC_Bonobo_Moniker_UnknownPrefix,
		NULL
	};
	static const BonoboAsyncMethod method = {
		"resolve", 
		TC_Object, 
		arguments,
		exceptions
	};
	gpointer arg_values [2] = { &amp;options, &amp;interface_name };
	resolve_async_ctx_t *ctx;
	
	g_return_if_fail (ev != NULL);
	g_return_if_fail (cb != NULL);
	g_return_if_fail (moniker != CORBA_OBJECT_NIL);
	g_return_if_fail (options != CORBA_OBJECT_NIL);
	g_return_if_fail (interface_name != CORBA_OBJECT_NIL);

	ctx = g_new0 (resolve_async_ctx_t, 1);
	ctx->cb = cb;
	ctx->user_data = user_data;
	ctx->moniker = bonobo_object_dup_ref (moniker, ev);

	bonobo_async_invoke (&amp;method, resolve_async_cb, ctx,
			     timeout_msec, ctx->moniker, arg_values, ev);
}
    </programlisting>
  </example>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboAsyncArgFlag">enum BonoboAsyncArgFlag</title>
<programlisting>typedef enum {
	BONOBO_ASYNC_IN  = 0x1,
	BONOBO_ASYNC_OUT = 0x2
} BonoboAsyncArgFlag;
</programlisting>
<para>
An enumeration flagging the direction of an argument.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>BONOBO_ASYNC_IN</literal></entry>
<entry>Flags an argument as being In
</entry>
</row>
<row>
<entry><literal>BONOBO_ASYNC_OUT</literal></entry>
<entry>Flags an argument as being Out

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboAsyncArg">BonoboAsyncArg</title>
<programlisting>typedef struct {
	const CORBA_TypeCode  type;
	BonoboAsyncArgFlag    flag;
} BonoboAsyncArg;
</programlisting>
<para>
A type describing a single CORBA method argument
</para></refsect2>
<refsect2>
<title><anchor id="BonoboAsyncMethod">BonoboAsyncMethod</title>
<programlisting>typedef struct {
	const char           *name;
	const CORBA_TypeCode  ret_type;
	const BonoboAsyncArg *arguments;  /* NULL-terminated */
	const CORBA_TypeCode *exceptions; /* NULL-terminated */
} BonoboAsyncMethod;
</programlisting>
<para>
A type describing a CORBA method
</para></refsect2>
<refsect2>
<title><anchor id="BonoboAsyncReply">struct BonoboAsyncReply</title>
<programlisting>struct BonoboAsyncReply;</programlisting>
<para>
An opaque async reply handle
</para></refsect2>
<refsect2>
<title><anchor id="BonoboAsyncCallback">BonoboAsyncCallback ()</title>
<programlisting>void        (*BonoboAsyncCallback)          (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This callback is invoked either when the invocation
times out, in which case an ex_CORBA_COMM_FAILURE system
exception will be passed in <parameter>ev</parameter>. Or with a valid reply,
in which case arguments should be de-marshaled using
<link linkend="bonobo-async-demarshal">bonobo_async_demarshal</link>.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>reply</parameter>&nbsp;:</entry>
<entry>the reply handle
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry>the CORBA_Environment
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>the callback's associated user data.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-async-demarshal">bonobo_async_demarshal ()</title>
<programlisting>void        bonobo_async_demarshal          (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply,
                                             <link linkend="gpointer">gpointer</link> retval,
                                             <link linkend="gpointer">gpointer</link> *out_args);</programlisting>
<para>
When a user's async callback happens ( when a method's return data
arrives back ) this function is typicaly used by the callback
to de-marshal the arguments associated with the method, such as
the <parameter>retval</parameter>, and an array of pointers to memory in which to store
the returned InOut / Out arguments in order.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>reply</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>retval</parameter>&nbsp;:</entry>
<entry> pointer to variable to store retval in
</entry></row>
<row><entry align="right"><parameter>out_args</parameter>&nbsp;:</entry>
<entry> array of pointers to vars for InOut / Out params.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-async-invoke">bonobo_async_invoke ()</title>
<programlisting>void        bonobo_async_invoke             (const <link linkend="BonoboAsyncMethod">BonoboAsyncMethod</link> *method,
                                             <link linkend="BonoboAsyncCallback">BonoboAsyncCallback</link> cb,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="guint">guint</link> timeout_msec,
                                             <link linkend="CORBA-Object">CORBA_Object</link> object,
                                             <link linkend="gpointer">gpointer</link> *args,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Given a type based description of a CORBA <parameter>method</parameter>
the method is invoked asynchronously. If an error occurs
in invocation an exception is fired in <parameter>ev</parameter> and <parameter>cb</parameter> will
never be invoked.
Otherwise, <parameter>cb</parameter> is invoked, either on the timeout - in
which case an ex_CORBA_COMM_FAILURE system exception will be
returned, or when the method returns with whatever data /
exceptions are relevant.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>method</parameter>&nbsp;:</entry>
<entry> method description
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry> async callback
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> associated callback user data
</entry></row>
<row><entry align="right"><parameter>timeout_msec</parameter>&nbsp;:</entry>
<entry> timeout in milli-seconds
</entry></row>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry> object to invoke method on
</entry></row>
<row><entry align="right"><parameter>args</parameter>&nbsp;:</entry>
<entry> array of ordered In/InOut arguments in same order as in method
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-async-handle-get-recv">bonobo_async_handle_get_recv ()</title>
<programlisting><link linkend="GIOPRecvBuffer">GIOPRecvBuffer</link>* bonobo_async_handle_get_recv
                                            (<link linkend="BonoboAsyncReply">BonoboAsyncReply</link> *reply);</programlisting>
<para>
This method can be used to extract the internal GIOP
buffer on the reply, for advanced custom de-marshaling.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>reply</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the internal reply buffer.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
