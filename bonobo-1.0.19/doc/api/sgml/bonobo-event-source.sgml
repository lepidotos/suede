<refentry id="bonobo-bonobo-event-source">
<refmeta>
<refentrytitle>bonobo-event-source</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-event-source</refname><refpurpose>An Event Source where clients can connect to listen to events.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="BonoboEventSource">BonoboEventSource</link>;
typedef     <link linkend="BonoboEventSourceClass">BonoboEventSourceClass</link>;
<link linkend="BonoboEventSource">BonoboEventSource</link>* <link linkend="bonobo-event-source-new">bonobo_event_source_new</link>  (void);
void        <link linkend="bonobo-event-source-notify-listeners">bonobo_event_source_notify_listeners</link>
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                             const char *event_name,
                                             const <link linkend="CORBA-any">CORBA_any</link> *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-event-source-notify-listeners-full">bonobo_event_source_notify_listeners_full</link>
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                             const char *path,
                                             const char *type,
                                             const char *subtype,
                                             const <link linkend="CORBA-any">CORBA_any</link> *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-EventSource-ListenerId">Bonobo_EventSource_ListenerId</link> <link linkend="bonobo-event-source-client-add-listener">bonobo_event_source_client_add_listener</link>
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                             const char *opt_mask,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-event-source-client-remove-listener">bonobo_event_source_client_remove_listener</link>
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="Bonobo-EventSource-ListenerId">Bonobo_EventSource_ListenerId</link> id,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-event-source-ignore-listeners">bonobo_event_source_ignore_listeners</link>
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
An event source object is responsible for channeling the emission
of signals on an object to the appropriate attached listeners.
The API is extremely simple and allows implementations to notify
their listeners of a new event occuring.
</para>

<para>
To notify a listener, you need to construct a textual string,
this is done by the <function>bonobo_event</function> functions
( see <link linkend="BonoboListener">BonoboListener</link> ) ':' delimiting the fields. It is reccommended
that the IDL module path of the interface be used as the first
part of the string. This is because many interfaces can be aggregated
together and need to share the same event namespace without conflicts.
So for example the bonobo property bag notification code
uses the IDL path "Bonobo/Property" the "change" kind and sets the
sub-type to the property name:
  <example>
    <title>An example event source notification</title>
    <programlisting>
static void
notify_listeners (BonoboPropertyBag *pb,
		  BonoboProperty    *prop,
		  const BonoboArg   *new_value,
		  CORBA_Environment *opt_ev)
{
	if (prop->flags &amp; BONOBO_PROPERTY_NO_LISTENING)
		return;
	
	bonobo_event_source_notify_listeners_full (pb->es,
						   "Bonobo/Property",
						   "change", prop->name,
						   new_value, opt_ev);
}
    </programlisting>
  </example>
  Of course, you need to notify the listener with a valid
BonoboArg containing the event data, this could easily contain
a structure. eg.
  <example>
     <title>Passing a structure in an event</title>
     <programlisting>
module GNOME {
	module Foo {
		struct BaaEvent {
			double a;
			string b;
			long   c;
		};
	};
};
     </programlisting>
     <programlisting>
static void
fire_event (BonoboEventSource *on_source,
            double             a_double,
	    char              *a_string,
	    long               a_float,
	    CORBA_Environment *opt_ev)
{
	CORBA_any any;
	GNOME_Foo_BaaEvent e;

	e.a = a_double;
	e.b = a_string;
	e.c = a_float;

	any->_type = TC_GNOME_Foo_BaaEvent;
	any->_data = &amp;e;

	bonobo_event_source_notify_listeners_full (
	   on_source, "GNOME/Foo", "event", NULL,
	   &amp;any, opt_ev);
}
     </programlisting>
  </example>
  NB. it is reccommended that you make it clear that the event
structure is intended for use with the <link linkend="BonoboEventSource">BonoboEventSource</link> /
<link linkend="BonoboListener">BonoboListener</link> by naming it XYZEvent, ie. with the 'Event'
suffix.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboEventSource">BonoboEventSource</title>
<programlisting>typedef struct {
	BonoboXObject             parent;
	BonoboEventSourcePrivate *priv;
} BonoboEventSource;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboEventSourceClass">BonoboEventSourceClass</title>
<programlisting>typedef struct {
	BonoboXObjectClass parent_class;

	POA_Bonobo_EventSource__epv epv;
} BonoboEventSourceClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-new">bonobo_event_source_new ()</title>
<programlisting><link linkend="BonoboEventSource">BonoboEventSource</link>* bonobo_event_source_new  (void);</programlisting>
<para>
Creates a new BonoboEventSource object.  Typically this
object will be exposed to clients through CORBA and they
will register and unregister functions to be notified
of events that this EventSource generates.
</para>
<para>
To notify clients of an event, use the <link linkend="bonobo-event-source-notify-listeners">bonobo_event_source_notify_listeners</link>()
function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> A new <link linkend="BonoboEventSource">BonoboEventSource</link> server object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-notify-listeners">bonobo_event_source_notify_listeners ()</title>
<programlisting>void        bonobo_event_source_notify_listeners
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                             const char *event_name,
                                             const <link linkend="CORBA-any">CORBA_any</link> *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This will notify all clients that have registered with this EventSource
(through the addListener or addListenerWithMask methods) of the availability
of the event named <parameter>event_name</parameter>.  The <parameter>value</parameter> CORBA::any value is passed to
all listeners.
</para>
<para>
<parameter>event_name</parameter> can not contain comma separators, as commas are used to
separate the various event names.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event_source</parameter>&nbsp;:</entry>
<entry> the Event Source that will emit the event.
</entry></row>
<row><entry align="right"><parameter>event_name</parameter>&nbsp;:</entry>
<entry> Name of the event being emitted
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> A CORBA_any value that contains the data that is passed to interested clients
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry> A CORBA_Environment where a failure code can be returned, can be NULL.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-notify-listeners-full">bonobo_event_source_notify_listeners_full ()</title>
<programlisting>void        bonobo_event_source_notify_listeners_full
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                             const char *path,
                                             const char *type,
                                             const char *subtype,
                                             const <link linkend="CORBA-any">CORBA_any</link> *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event_source</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-client-add-listener">bonobo_event_source_client_add_listener ()</title>
<programlisting><link linkend="Bonobo-EventSource-ListenerId">Bonobo_EventSource_ListenerId</link> bonobo_event_source_client_add_listener
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                             const char *opt_mask,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>event_callback</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>opt_mask</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-client-remove-listener">bonobo_event_source_client_remove_listener ()</title>
<programlisting>void        bonobo_event_source_client_remove_listener
                                            (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                             <link linkend="Bonobo-EventSource-ListenerId">Bonobo_EventSource_ListenerId</link> id,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-event-source-ignore-listeners">bonobo_event_source_ignore_listeners ()</title>
<programlisting>void        bonobo_event_source_ignore_listeners
                                            (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source);</programlisting>
<para>
Instructs the event source to de-register any listeners
that are added from the global running context.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event_source</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
  <link linkend="BonoboListener">BonoboListener</link> <link linkend="BonoboArg">BonoboArg</link>
</para>
</refsect1>

</refentry>
