<refentry id="bonobo-bonobo-stream-client">
<refmeta>
<refentrytitle>bonobo-stream-client</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-stream-client</refname><refpurpose>Simplified client wrapper functions for the Stream interface</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="guint8">guint8</link>*     <link linkend="bonobo-stream-client-read">bonobo_stream_client_read</link>       (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const <link linkend="size-t">size_t</link> size,
                                             <link linkend="CORBA-long">CORBA_long</link> *length_read,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-stream-client-write">bonobo_stream_client_write</link>      (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const void *buffer,
                                             const <link linkend="size-t">size_t</link> size,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-stream-client-write-string">bonobo_stream_client_write_string</link>
                                            (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const char *str,
                                             const <link linkend="gboolean">gboolean</link> terminate,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-stream-client-printf">bonobo_stream_client_printf</link>     (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const <link linkend="gboolean">gboolean</link> terminate,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             const char *fmt,
                                             ...);
<link linkend="CORBA-long">CORBA_long</link>  <link linkend="bonobo-stream-client-read-string">bonobo_stream_client_read_string</link>
                                            (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             char **str,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-long">CORBA_long</link>  <link linkend="bonobo-stream-client-get-length">bonobo_stream_client_get_length</link> (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
These interfaces are designed to make the stream interface
slightly easier to use from client code. This is done 2 ways,
first by make the exception environments optiional, and secondly
by providing slightly nicer semantics.
</para>

<para>
  <example>
     <title>Writing some simple data to a stream</title>
     <programlisting>
bonobo_stream_client_printf (stream, TRUE, ev, "Hello World: <literal>d</literal>", 5);
     </programlisting>
  </example>
  It is well worth using the bonobo_stream_client_write function
for any potentialy large writes, since this blocks the data into
sensible chunks. This is important, otherwise a single transfer is
attempted that will cause hassles in the CORBA stubs. [ NB. ORBit
tries to alloca a huge chunk of memory and SEGVs ].
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="bonobo-stream-client-read">bonobo_stream_client_read ()</title>
<programlisting><link linkend="guint8">guint8</link>*     bonobo_stream_client_read       (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const <link linkend="size-t">size_t</link> size,
                                             <link linkend="CORBA-long">CORBA_long</link> *length_read,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to read <parameter>size</parameter> bytes from the <parameter>stream</parameter> into
a freshly g_ allocated buffer which is returned. Whilst this
routine may seem pointless; it reads the stream in small chunks
avoiding possibly massive alloca's inside ORBit's stub/skel code.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> A CORBA Object reference to a Bonobo_Stream
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> number of bytes to read or -1 for whole stream.
</entry></row>
<row><entry align="right"><parameter>length_read</parameter>&nbsp;:</entry>
<entry> if non NULL will be set to the length read
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a CORBA environment to return status information.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>NULL on any sort of failure &amp; 0 size read.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-client-write">bonobo_stream_client_write ()</title>
<programlisting>void        bonobo_stream_client_write      (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const void *buffer,
                                             const <link linkend="size-t">size_t</link> size,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to write <parameter>size</parameter> bytes from <parameter>buffer</parameter> to the
<parameter>stream</parameter>.  It will continue to write bytes until a fatal error
occurs. It works around serious problems in ORBit's handling of
sequences, and makes for nicer, saner protocol usage for
transfering huge chunks of data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> A CORBA Object reference to a Bonobo_Stream
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry> the buffer to write
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> number of bytes to write
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> a CORBA environment to return status information.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-client-write-string">bonobo_stream_client_write_string ()</title>
<programlisting>void        bonobo_stream_client_write_string
                                            (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const char *str,
                                             const <link linkend="gboolean">gboolean</link> terminate,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to write the string in <parameter>str</parameter> to <parameter>stream</parameter>.
If <parameter>terminate</parameter> is TRUE, a NULL character will be written out at the
end of the string.  This function will not return until the entire
string has been written out, unless an exception is raised.  See
also <link linkend="bonobo-stream-client-write">bonobo_stream_client_write</link>(). Continues writing until finished
or a fatal exception occurs.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> A CORBA object reference to a <link linkend="Bonobo-Stream">Bonobo_Stream</link>.
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> A string.
</entry></row>
<row><entry align="right"><parameter>terminate</parameter>&nbsp;:</entry>
<entry> Whether or not to write the \0 at the end of the
string.
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> A pointer to a <link linkend="CORBA-Environment">CORBA_Environment</link>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-client-printf">bonobo_stream_client_printf ()</title>
<programlisting>void        bonobo_stream_client_printf     (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             const <link linkend="gboolean">gboolean</link> terminate,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                             const char *fmt,
                                             ...);</programlisting>
<para>
Processes <parameter>fmt</parameter> and the arguments which follow it to produce a
string.  Writes this string out to <parameter>stream</parameter>.  This function will not
return until the entire string is written out, unless an exception
is raised.  See also <link linkend="bonobo-stream-client-write-string">bonobo_stream_client_write_string</link>() and
<link linkend="bonobo-stream-client-write">bonobo_stream_client_write</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> A CORBA object reference to a <link linkend="Bonobo-Stream">Bonobo_Stream</link>.
</entry></row>
<row><entry align="right"><parameter>terminate</parameter>&nbsp;:</entry>
<entry> Whether or not to null-terminate the string when it is
written out to the stream.
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> A CORBA_Environment pointer.
</entry></row>
<row><entry align="right"><parameter>fmt</parameter>&nbsp;:</entry>
<entry> The printf format string.
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-client-read-string">bonobo_stream_client_read_string ()</title>
<programlisting><link linkend="CORBA-long">CORBA_long</link>  bonobo_stream_client_read_string
                                            (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             char **str,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Reads a NULL-terminated string from <parameter>stream</parameter> and stores it in a
newly-allocated string in <parameter>str</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> The <link linkend="Bonobo-Stream">Bonobo_Stream</link> from which the string will be read.
</entry></row>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> The string pointer in which the string will be stored.
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> A pointer to a <link linkend="CORBA-Environment">CORBA_Environment</link>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The number of bytes read, or -1 if an error occurs.
If an exception occurs, <parameter>ev</parameter> will contain the exception.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-stream-client-get-length">bonobo_stream_client_get_length ()</title>
<programlisting><link linkend="CORBA-long">CORBA_long</link>  bonobo_stream_client_get_length (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Does the grunt work to get the length of a stream,
returns -1 if the length is not available. Returns -1
on exception.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> The stream.
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> Exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Length or -1
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="BonoboStream">BonoboStream</link>
</para>
</refsect1>

</refentry>
