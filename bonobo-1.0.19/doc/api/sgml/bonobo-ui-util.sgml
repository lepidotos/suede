<refentry id="bonobo-bonobo-ui-util">
<refmeta>
<refentrytitle>bonobo-ui-util</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-ui-util</refname><refpurpose>A collection of utility functions to help with UI related issues</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



char*       <link linkend="bonobo-ui-util-pixbuf-to-xml">bonobo_ui_util_pixbuf_to_xml</link>    (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="bonobo-ui-util-xml-to-pixbuf">bonobo_ui_util_xml_to_pixbuf</link>    (const char *xml);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="bonobo-ui-util-xml-get-icon-pixbuf">bonobo_ui_util_xml_get_icon_pixbuf</link>
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> prepend_menu);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="bonobo-ui-util-xml-get-icon-pixmap-widget">bonobo_ui_util_xml_get_icon_pixmap_widget</link>
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> prepend_menu);
void        <link linkend="bonobo-ui-util-xml-set-pixbuf">bonobo_ui_util_xml_set_pixbuf</link>   (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);
void        <link linkend="bonobo-ui-util-xml-set-pix-xpm">bonobo_ui_util_xml_set_pix_xpm</link>  (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char **xpm);
void        <link linkend="bonobo-ui-util-xml-set-pix-stock">bonobo_ui_util_xml_set_pix_stock</link>
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *name);
void        <link linkend="bonobo-ui-util-xml-set-pix-fname">bonobo_ui_util_xml_set_pix_fname</link>
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *name);
void        <link linkend="bonobo-ui-util-build-help-menu">bonobo_ui_util_build_help_menu</link>  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *listener,
                                             const char *app_prefix,
                                             const char *app_name,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *parent);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-build-accel">bonobo_ui_util_build_accel</link>    (<link linkend="guint">guint</link> accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> accelerator_mods,
                                             const char *verb);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-new-menu">bonobo_ui_util_new_menu</link>       (<link linkend="gboolean">gboolean</link> submenu,
                                             const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *verb);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-new-placeholder">bonobo_ui_util_new_placeholder</link>
                                            (const char *name,
                                             <link linkend="gboolean">gboolean</link> top,
                                             <link linkend="gboolean">gboolean</link> bottom);
void        <link linkend="bonobo-ui-util-set-radiogroup">bonobo_ui_util_set_radiogroup</link>   (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *group_name);
void        <link linkend="bonobo-ui-util-set-toggle">bonobo_ui_util_set_toggle</link>       (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *id,
                                             const char *init_state);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-new-std-toolbar">bonobo_ui_util_new_std_toolbar</link>
                                            (const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *verb);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-new-toggle-toolbar">bonobo_ui_util_new_toggle_toolbar</link>
                                            (const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *id);
char*       <link linkend="bonobo-ui-util-get-ui-fname">bonobo_ui_util_get_ui_fname</link>     (const char *component_prefix,
                                             const char *file_name);
void        <link linkend="bonobo-ui-util-translate-ui">bonobo_ui_util_translate_ui</link>     (<link linkend="BonoboUINode">BonoboUINode</link> *node);
void        <link linkend="bonobo-ui-util-fixup-icons">bonobo_ui_util_fixup_icons</link>      (<link linkend="BonoboUINode">BonoboUINode</link> *node);
void        <link linkend="bonobo-ui-util-fixup-help">bonobo_ui_util_fixup_help</link>       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *app_prefix,
                                             const char *app_name);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-util-new-ui">bonobo_ui_util_new_ui</link>         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *fname,
                                             const char *app_prefix,
                                             const char *app_name);
void        <link linkend="bonobo-ui-util-set-ui">bonobo_ui_util_set_ui</link>           (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *app_prefix,
                                             const char *file_name,
                                             const char *app_name);
void        <link linkend="bonobo-ui-util-set-pixbuf">bonobo_ui_util_set_pixbuf</link>       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);
<link linkend="gchar">gchar</link>*      <link linkend="bonobo-ui-util-accel-name">bonobo_ui_util_accel_name</link>       (<link linkend="guint">guint</link> accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> accelerator_mods);
void        <link linkend="bonobo-ui-util-accel-parse">bonobo_ui_util_accel_parse</link>      (char *name,
                                             <link linkend="guint">guint</link> *accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> *accelerator_mods);
char*       <link linkend="bonobo-ui-util-decode-str">bonobo_ui_util_decode_str</link>       (const char *str,
                                             <link linkend="gboolean">gboolean</link> *err);
char*       <link linkend="bonobo-ui-util-encode-str">bonobo_ui_util_encode_str</link>       (const char *str);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The UI utilities do man things, mostly concerned with smoothing
the flow of XML data from containee to container. There are also
several generaly useful functions used internaly for manipulating
pixmaps. Also, code for stringifying accelerators, fixing up help
and working around libxml bugs. Also a large chunk of code is
included for dynamic UI tree building that is now strongly
deprecated by the various tools to do this from dynamic files.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="bonobo-ui-util-pixbuf-to-xml">bonobo_ui_util_pixbuf_to_xml ()</title>
<programlisting>char*       bonobo_ui_util_pixbuf_to_xml    (<link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);</programlisting>
<para>
Convert a <parameter>pixbuf</parameter> to a string representation suitable
for passing as a "pixname" attribute with a pixtype
attribute = "pixbuf".</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>pixbuf</parameter>&nbsp;:</entry>
<entry> a GdkPixbuf
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the stringified pixbuf.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-to-pixbuf">bonobo_ui_util_xml_to_pixbuf ()</title>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  bonobo_ui_util_xml_to_pixbuf    (const char *xml);</programlisting>
<para>
This converts a stringified pixbuf in <parameter>xml</parameter> into a GdkPixbuf</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> a string
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a handed reference to the created GdkPixbuf.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-get-icon-pixbuf">bonobo_ui_util_xml_get_icon_pixbuf ()</title>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  bonobo_ui_util_xml_get_icon_pixbuf
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> prepend_menu);</programlisting>
<para>
This routine returns a GdkPixbuf for a <parameter>node</parameter>, if <parameter>prepend_menu</parameter> is
TRUE then if it is a stock pixbuf 'Menu_' will be prepended to
the stock name. Otherwise the pixbuf is extracted either from the
node, a filename, or the stock system.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>prepend_menu</parameter>&nbsp;:</entry>
<entry> whether the pixbuf is for a menu item
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> A handed reference to the extracted pixbuf.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-get-icon-pixmap-widget">bonobo_ui_util_xml_get_icon_pixmap_widget ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  bonobo_ui_util_xml_get_icon_pixmap_widget
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="gboolean">gboolean</link> prepend_menu);</programlisting>
<para>
This function extracts a pixbuf from the node and returns a GtkWidget
containing a display of the pixbuf.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>prepend_menu</parameter>&nbsp;:</entry>
<entry> whether the pixbuf is for a menu item
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-set-pixbuf">bonobo_ui_util_xml_set_pixbuf ()</title>
<programlisting>void        bonobo_ui_util_xml_set_pixbuf   (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);</programlisting>
<para>
Associate <parameter>pixbuf</parameter> with this <parameter>node</parameter> by stringifying it and setting
the requisite attributes.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>pixbuf</parameter>&nbsp;:</entry>
<entry> the pixbuf
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-set-pix-xpm">bonobo_ui_util_xml_set_pix_xpm ()</title>
<programlisting>void        bonobo_ui_util_xml_set_pix_xpm  (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char **xpm);</programlisting>
<para>
Associate <parameter>xpm</parameter> with this <parameter>node</parameter> by stringifying it and setting
the requisite attributes.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>xpm</parameter>&nbsp;:</entry>
<entry> an xpm
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-set-pix-stock">bonobo_ui_util_xml_set_pix_stock ()</title>
<programlisting>void        bonobo_ui_util_xml_set_pix_stock
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *name);</programlisting>
<para>
Associate the stock pixmap named <parameter>name</parameter> with this <parameter>node</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the stock name
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-xml-set-pix-fname">bonobo_ui_util_xml_set_pix_fname ()</title>
<programlisting>void        bonobo_ui_util_xml_set_pix_fname
                                            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *name);</programlisting>
<para>
Associate a pixmap filename <parameter>name</parameter> with a <parameter>node</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the filename
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-build-help-menu">bonobo_ui_util_build_help_menu ()</title>
<programlisting>void        bonobo_ui_util_build_help_menu  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *listener,
                                             const char *app_prefix,
                                             const char *app_name,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *parent);</programlisting>
<para>
This routine inserts all the help menu items appropriate for this
application as children of the <parameter>parent</parameter> node.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> associated component
</entry></row>
<row><entry align="right"><parameter>app_prefix</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>app_name</parameter>&nbsp;:</entry>
<entry> application name
</entry></row>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> toplevel node
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-build-accel">bonobo_ui_util_build_accel ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_build_accel    (<link linkend="guint">guint</link> accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> accelerator_mods,
                                             const char *verb);</programlisting>
<para>
This routine builds an accelerator node from the key and mod mask
and associates it with a verb.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accelerator_key</parameter>&nbsp;:</entry>
<entry> the accelerator key
</entry></row>
<row><entry align="right"><parameter>accelerator_mods</parameter>&nbsp;:</entry>
<entry> the accelerator mods
</entry></row>
<row><entry align="right"><parameter>verb</parameter>&nbsp;:</entry>
<entry> the associated verb.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the built node.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-new-menu">bonobo_ui_util_new_menu ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_new_menu       (<link linkend="gboolean">gboolean</link> submenu,
                                             const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *verb);</programlisting>
<para>
A helper routine to create a menu or submenu with associated
information - this routine is strongly deprecated.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>submenu</parameter>&nbsp;:</entry>
<entry> whether it is a menu or submenu
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the path element name of the menu
</entry></row>
<row><entry align="right"><parameter>label</parameter>&nbsp;:</entry>
<entry> the label
</entry></row>
<row><entry align="right"><parameter>tip</parameter>&nbsp;:</entry>
<entry> the description
</entry></row>
<row><entry align="right"><parameter>verb</parameter>&nbsp;:</entry>
<entry> the associated verb
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the constructed node.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-new-placeholder">bonobo_ui_util_new_placeholder ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_new_placeholder
                                            (const char *name,
                                             <link linkend="gboolean">gboolean</link> top,
                                             <link linkend="gboolean">gboolean</link> bottom);</programlisting>
<para>
A helper routine to create a menu or submenu with associated
information - this routine is strongly deprecated - it is also
broken.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> path element name of the placeholder
</entry></row>
<row><entry align="right"><parameter>top</parameter>&nbsp;:</entry>
<entry> whether to delimit at the top
</entry></row>
<row><entry align="right"><parameter>bottom</parameter>&nbsp;:</entry>
<entry> whether to delimit at the bottom
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new node
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-set-radiogroup">bonobo_ui_util_set_radiogroup ()</title>
<programlisting>void        bonobo_ui_util_set_radiogroup   (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *group_name);</programlisting>
<para>
This is a helper function that sets the radiogroup to
the requested group - deprecated</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>group_name</parameter>&nbsp;:</entry>
<entry> the group name.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-set-toggle">bonobo_ui_util_set_toggle ()</title>
<programlisting>void        bonobo_ui_util_set_toggle       (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *id,
                                             const char *init_state);</programlisting>
<para>
Deprecated, makes a node toggleable.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the associated id
</entry></row>
<row><entry align="right"><parameter>init_state</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-new-std-toolbar">bonobo_ui_util_new_std_toolbar ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_new_std_toolbar
                                            (const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *verb);</programlisting>
<para>
Deprecated - created a new toolbar item.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>label</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>tip</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>verb</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-new-toggle-toolbar">bonobo_ui_util_new_toggle_toolbar ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_new_toggle_toolbar
                                            (const char *name,
                                             const char *label,
                                             const char *tip,
                                             const char *id);</programlisting>
<para>
Deprecated - creates a new toggle toolbar item</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>label</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>tip</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-get-ui-fname">bonobo_ui_util_get_ui_fname ()</title>
<programlisting>char*       bonobo_ui_util_get_ui_fname     (const char *component_prefix,
                                             const char *file_name);</programlisting>
<para>
Builds a path to the xml file that stores the GUI.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component_prefix</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>file_name</parameter>&nbsp;:</entry>
<entry> the file name of the xml file.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the path to the file that describes the
UI or NULL if it is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-translate-ui">bonobo_ui_util_translate_ui ()</title>
<programlisting>void        bonobo_ui_util_translate_ui     (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Quest through a tree looking for translatable properties
( those prefixed with an '_' ). Translates the value of the
property and removes the leading '_'.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node to start at.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-fixup-icons">bonobo_ui_util_fixup_icons ()</title>
<programlisting>void        bonobo_ui_util_fixup_icons      (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
This function is used to ensure filename pixbuf attributes are
converted to in-line pixbufs on the server side, so that we don't
sent a ( possibly invalid ) filename across the wire.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-fixup-help">bonobo_ui_util_fixup_help ()</title>
<programlisting>void        bonobo_ui_util_fixup_help       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             const char *app_prefix,
                                             const char *app_name);</programlisting>
<para>
This searches for 'BuiltMenuItems' placeholders, and then
fills them with the application's menu items.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the UI component
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the node to search under
</entry></row>
<row><entry align="right"><parameter>app_prefix</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>app_name</parameter>&nbsp;:</entry>
<entry> the application name
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-new-ui">bonobo_ui_util_new_ui ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_util_new_ui         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *fname,
                                             const char *app_prefix,
                                             const char *app_name);</programlisting>
<para>
Loads an xml tree from a file, cleans the 
doc cruft from its nodes; and translates the nodes.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> The component help callback should be on
</entry></row>
<row><entry align="right"><parameter>fname</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>app_prefix</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>app_name</parameter>&nbsp;:</entry>
<entry> Application name ( for finding help )
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The translated tree ready to be merged.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-set-ui">bonobo_ui_util_set_ui ()</title>
<programlisting>void        bonobo_ui_util_set_ui           (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *app_prefix,
                                             const char *file_name,
                                             const char *app_name);</programlisting>
<para>
This function loads the UI from the associated file, translates it,
fixes up all the menus, ensures pixbuf filenames are resolved to xml
and then merges the XML to the remote container - this is the best
and most simple entry point for the new UI code.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>app_prefix</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>file_name</parameter>&nbsp;:</entry>
<entry> the filename of the file to merge relative to the datadir.
</entry></row>
<row><entry align="right"><parameter>app_name</parameter>&nbsp;:</entry>
<entry> the application name - for help merging
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-set-pixbuf">bonobo_ui_util_set_pixbuf ()</title>
<programlisting>void        bonobo_ui_util_set_pixbuf       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *pixbuf);</programlisting>
<para>
This helper function sets a pixbuf at a certain path into an
xml tree.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path into the xml tree
</entry></row>
<row><entry align="right"><parameter>pixbuf</parameter>&nbsp;:</entry>
<entry> the pixbuf
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-accel-name">bonobo_ui_util_accel_name ()</title>
<programlisting><link linkend="gchar">gchar</link>*      bonobo_ui_util_accel_name       (<link linkend="guint">guint</link> accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> accelerator_mods);</programlisting>
<para>
This stringifies an <parameter>accelerator_key</parameter> and some <parameter>accelerator_mods</parameter>
it is the converse of bonobo_ui_util_accel_parse</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accelerator_key</parameter>&nbsp;:</entry>
<entry> the key
</entry></row>
<row><entry align="right"><parameter>accelerator_mods</parameter>&nbsp;:</entry>
<entry> the modifiers
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the stringified representation
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-accel-parse">bonobo_ui_util_accel_parse ()</title>
<programlisting>void        bonobo_ui_util_accel_parse      (char *name,
                                             <link linkend="guint">guint</link> *accelerator_key,
                                             <link linkend="GdkModifierType">GdkModifierType</link> *accelerator_mods);</programlisting>
<para>
This parses the accelerator string and returns the key and mods
associated with it - using a similar format to Gtk+ but one which
doesn't involve inefficient XML entities and avoids other misc.
problems.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>accelerator_key</parameter>&nbsp;:</entry>
<entry> output of the key
</entry></row>
<row><entry align="right"><parameter>accelerator_mods</parameter>&nbsp;:</entry>
<entry> output of the mods
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-decode-str">bonobo_ui_util_decode_str ()</title>
<programlisting>char*       bonobo_ui_util_decode_str       (const char *str,
                                             <link linkend="gboolean">gboolean</link> *err);</programlisting>
<para>
This provides the inverse mapping for bonobo_ui_util_encode_str</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> the string
</entry></row>
<row><entry align="right"><parameter>err</parameter>&nbsp;:</entry>
<entry> a pointer to an error flag
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the decoded string or NULL on failure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-util-encode-str">bonobo_ui_util_encode_str ()</title>
<programlisting>char*       bonobo_ui_util_encode_str       (const char *str);</programlisting>
<para>
This function is needed to encode labels that contain
either UTF-8 or other 8 bit charsets. This is due to
severe libxml1 breakage. If you want to do manual
label setting you need this function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>str</parameter>&nbsp;:</entry>
<entry> the string
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the mangled (hex) text.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
