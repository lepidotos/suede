<refentry id="bonobo-bonobo-ui-component">
<refmeta>
<refentrytitle>BonoboUIComponent</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboUIComponent</refname><refpurpose>A UI interface that handles UI merging for a component</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="BonoboUIComponent-struct">BonoboUIComponent</link>;
void        (<link linkend="BonoboUIListenerFn">*BonoboUIListenerFn</link>)           (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                             const char *state,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        (<link linkend="BonoboUIVerbFn">*BonoboUIVerbFn</link>)               (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             const char *cname);
typedef     <link linkend="BonoboUIComponentClass">BonoboUIComponentClass</link>;
<link linkend="BonoboUIComponent">BonoboUIComponent</link>* <link linkend="bonobo-ui-component-construct">bonobo_ui_component_construct</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *name);
<link linkend="BonoboUIComponent">BonoboUIComponent</link>* <link linkend="bonobo-ui-component-new">bonobo_ui_component_new</link>  (const char *name);
<link linkend="BonoboUIComponent">BonoboUIComponent</link>* <link linkend="bonobo-ui-component-new-default">bonobo_ui_component_new_default</link>
                                            (void);
void        <link linkend="bonobo-ui-component-set-name">bonobo_ui_component_set_name</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *name);
const char* <link linkend="bonobo-ui-component-get-name">bonobo_ui_component_get_name</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
void        <link linkend="bonobo-ui-component-set-container">bonobo_ui_component_set_container</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> container);
void        <link linkend="bonobo-ui-component-unset-container">bonobo_ui_component_unset_container</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> <link linkend="bonobo-ui-component-get-container">bonobo_ui_component_get_container</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
void        <link linkend="bonobo-ui-component-add-verb">bonobo_ui_component_add_verb</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-ui-component-add-verb-full">bonobo_ui_component_add_verb_full</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);
void        <link linkend="bonobo-ui-component-remove-verb">bonobo_ui_component_remove_verb</link> (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname);
void        <link linkend="bonobo-ui-component-remove-verb-by-func">bonobo_ui_component_remove_verb_by_func</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn);
void        <link linkend="bonobo-ui-component-remove-verb-by-data">bonobo_ui_component_remove_verb_by_data</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-ui-component-add-listener">bonobo_ui_component_add_listener</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *id,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-ui-component-add-listener-full">bonobo_ui_component_add_listener_full</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *id,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);
void        <link linkend="bonobo-ui-component-remove-listener">bonobo_ui_component_remove_listener</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname);
void        <link linkend="bonobo-ui-component-remove-listener-by-func">bonobo_ui_component_remove_listener_by_func</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn);
void        <link linkend="bonobo-ui-component-remove-listener-by-data">bonobo_ui_component_remove_listener_by_data</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data);
void        <link linkend="bonobo-ui-component-set">bonobo_ui_component_set</link>         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *xml,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-ui-component-set-translate">bonobo_ui_component_set_translate</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *xml,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-ui-component-set-tree">bonobo_ui_component_set_tree</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-ui-component-rm">bonobo_ui_component_rm</link>          (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="gboolean">gboolean</link>    <link linkend="bonobo-ui-component-path-exists">bonobo_ui_component_path_exists</link> (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-char">CORBA_char</link>* <link linkend="bonobo-ui-component-get">bonobo_ui_component_get</link>         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="gboolean">gboolean</link> recurse,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="BonoboUINode">BonoboUINode</link>* <link linkend="bonobo-ui-component-get-tree">bonobo_ui_component_get_tree</link>  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="gboolean">gboolean</link> recurse,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
void        <link linkend="bonobo-ui-component-object-set">bonobo_ui_component_object_set</link>  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> control,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> <link linkend="bonobo-ui-component-object-get">bonobo_ui_component_object_get</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-ui-component-freeze">bonobo_ui_component_freeze</link>      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-ui-component-thaw">bonobo_ui_component_thaw</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-ui-component-set-prop">bonobo_ui_component_set_prop</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *prop,
                                             const char *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="gchar">gchar</link>*      <link linkend="bonobo-ui-component-get-prop">bonobo_ui_component_get_prop</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *prop,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
void        <link linkend="bonobo-ui-component-set-status">bonobo_ui_component_set_status</link>  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *text,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
typedef     <link linkend="BonoboUIVerb">BonoboUIVerb</link>;
#define     <link linkend="BONOBO-UI-VERB-CAPS">BONOBO_UI_VERB</link>                  (name,cb)
#define     <link linkend="BONOBO-UI-VERB-DATA-CAPS">BONOBO_UI_VERB_DATA</link>             (name,cb,data)
#define     <link linkend="BONOBO-UI-UNSAFE-VERB-CAPS">BONOBO_UI_UNSAFE_VERB</link>           (name,cb)
#define     <link linkend="BONOBO-UI-UNSAFE-VERB-DATA-CAPS">BONOBO_UI_UNSAFE_VERB_DATA</link>      (name,cb,data)
#define     <link linkend="BONOBO-UI-VERB-END-CAPS">BONOBO_UI_VERB_END</link>
void        <link linkend="bonobo-ui-component-add-verb-list">bonobo_ui_component_add_verb_list</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list);
void        <link linkend="bonobo-ui-component-add-verb-list-with-data">bonobo_ui_component_add_verb_list_with_data</link>
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list,
                                             <link linkend="gpointer">gpointer</link> user_data);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
The BonoboUIComponent is the client side portion of the UI merging scheme.
It should be implemented by any component that wishes to merge menus / UI.
The Component object is neccessary to receive notifications from the
associated <link linkend="BonoboUIContainer">BonoboUIContainer</link>. Notifications come in two forms - verbs and
events. Verbs have an associated ( non translated ) name that is used to
match them with callbacks. Events have an associated ( non translated ) id
that does the same thing. Events pass a state string. Events are used for
eg. toggle buttons, Verbs are used for eg. Menu items.
</para>

<para>
Mostly you don't need to bother with creating your own BonoboUIComponent,
if you implement a Control eg. a BonoboUIComponent is created at Control
construction time and can be accessed thus:
  <example>
    <title>Using the UI Component associated with a control</title>
    <programlisting>
/*
 * For the format of the XML see bonobo/doc/xml-ui.txt
 * For a standard template to base your UI on see bonobo/doc/std-ui.xml
 */
const char my_ui_elements [] =
	"&gt;placeholder name=\"FileOps\"&lt;"
	"	&gt;menuitem name=\"Foo\" verb=\"FileFoo\" _label=\"Foo!\""
	"	 _tip=\"do some foo thing\"/&lt;"
	"&gt;/placeholder&lt;";

static void
control_activate_cb (BonoboControl *object,
                     gboolean       state,
 		     gpointer       user_data)
{
	BonoboUIComponent *ui_component;

	/* Get UIComponent from control */
	ui_component = bonobo_control_get_ui_component (control);

	if (state) /* Activate */
		bonobo_ui_component_set_translate (
			ui_component, "/menu/File", my_ui_elements, NULL);

	else /* De-activate */
		bonobo_ui_component_unset_container (ui_component);
}

static void
verb_foo_cb (BonoboUIComponent *ui_container,
             gpointer           user_data,
	     const              char *cname)
{
	BonoboControl *control = user_data;

	g_print ("FileFoo !\n");
}

static BonoboUIVerb my_ui_verbs[] = {
	BONOBO_UI_VERB ("FileFoo", verb_foo_cb),
	BONOBO_UI_VERB_END
};

BonoboObject *
create_ui_control (void)
{
	BonoboControl     *control;
	BonoboUIComponent *ui_component;
	GtkWidget         *widget;

	control = bonobo_control_new ((widget = gtk_widget_new_label ("Hello World")));

	/* Automaticaly associate the remote UIContainer for us on activate */
	bonobo_control_set_automerge (control, TRUE);

	ui_component = bonobo_control_get_ui_component (control);

	/* Register the verbs with the UI Component */
	bonobo_ui_component_add_verb_list_with_data (
		ui_component, my_ui_verbs, control);

	gtk_signal_connect (GTK_OBJECT (control), "activate",
	                    GTK_SIGNAL_FUNC (control_activate_cb), NULL);
	gtk_widget_show (widget);

	return BONOBO_OBJECT (control);
}
    </programlisting>
  </example>
This sets up the UI, associates a 'FileFoo' verb with a callback, and
on control activation merges the UI elements into a standard path
in the file menu.
</para>

<para>
There are several standard placeholders that it is important for
containers to implement, basing your UI on the doc/std-ui.xml is
a very good starting point. Also in the above example the _label
and _tip are not cmd / widget separated - for more information read
doc/ui-xml.txt.
</para>

<para>
Most applications will should not use the BonoboUIComponent in this
way, there is a <function>bonobo_ui_util_set_ui</function> that does
the translation, help menu build, insertion etc. from an installed
XML file. The above example is complete except for translation, which
is extremely important. Here is a better activate function:
  <example>
    <title>A better way to create your UI</title>
    <programlisting>
static void
control_activate_cb (BonoboControl *object,
                     gboolean       state,
		     gpointer       user_data)
{
	BonoboUIComponent *ui_component;

	/* Get UIComponent from control */
	ui_component = bonobo_control_get_ui_component (control);

	if (state) /* Activate */
		/*
		 * Use a helper function to setup your UI from a file:
		 */
		bonobo_ui_util_set_ui (
			ui_component, MY_COMPILE_TIME_PREFIX,
			"GNOME_MyApp.ui", "my-app");
	else /* De-activate */
		bonobo_ui_component_unset_container (ui_component);
}
    </programlisting>
  </example>
  In this example "GNOME_MyApp.ui" is the correctly namespaced UI
xml filename, ( see doc/NAMESPACE to register your name ), and
"my-app" is the gnome application name, from which a path to your
installed help files can be deduced.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BonoboUIComponent-struct">struct BonoboUIComponent</title>
<programlisting>struct BonoboUIComponent;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboUIListenerFn">BonoboUIListenerFn ()</title>
<programlisting>void        (*BonoboUIListenerFn)           (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                             const char *state,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboUIVerbFn">BonoboUIVerbFn ()</title>
<programlisting>void        (*BonoboUIVerbFn)               (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             const char *cname);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>cname</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboUIComponentClass">BonoboUIComponentClass</title>
<programlisting>typedef struct {
	BonoboXObjectClass          parent_class;

	POA_Bonobo_UIComponent__epv epv;

	/* Signals */
	void (*exec_verb) (BonoboUIComponent *comp,
			   const char        *cname);

	void (*ui_event)  (BonoboUIComponent *comp,
			   const char        *path,
			   Bonobo_UIComponent_EventType type,
			   const char        *state);
	/* Virtual XML Methods */
	void (*freeze)    (BonoboUIComponent *component,
			   CORBA_Environment *opt_ev);

	void (*thaw)      (BonoboUIComponent *component,
			   CORBA_Environment *opt_ev);

	void (*xml_set)   (BonoboUIComponent *component,
			   const char        *path,
			   const char        *xml,
			   CORBA_Environment *ev);

	CORBA_char *(*xml_get) (BonoboUIComponent *component,
				const char        *path,
				gboolean           recurse,
				CORBA_Environment *ev);

	void (*xml_rm)    (BonoboUIComponent *component,
			   const char        *path,
			   CORBA_Environment *ev);

	void (*set_prop)  (BonoboUIComponent *component,
			   const char        *path,
			   const char        *prop,
			   const char        *value,
			   CORBA_Environment *opt_ev);
	
	gchar *(*get_prop) (BonoboUIComponent *component,
			    const char        *path,
			    const char        *prop,
			    CORBA_Environment *opt_ev);

	gboolean (*exists) (BonoboUIComponent *component,
			    const char        *path,
			    CORBA_Environment *ev);
	

	gpointer            dummy;
} BonoboUIComponentClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-construct">bonobo_ui_component_construct ()</title>
<programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link>* bonobo_ui_component_construct
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *name);</programlisting>
<para>
Construct the UI component with name <parameter>name</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name of the UI component
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a constructed UI component or NULL on error
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-new">bonobo_ui_component_new ()</title>
<programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link>* bonobo_ui_component_new  (const char *name);</programlisting>
<para>
Create a new UI component with the specified name</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name of the UI component
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new UI component 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-new-default">bonobo_ui_component_new_default ()</title>
<programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link>* bonobo_ui_component_new_default
                                            (void);</programlisting>
<para>
Create a UI component with a unique default name
constructed from various available system properties.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a new UI component
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-name">bonobo_ui_component_set_name ()</title>
<programlisting>void        bonobo_ui_component_set_name    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *name);</programlisting>
<para>
Set the <parameter>name</parameter> of the UI <parameter>component</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the UI component
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the new name
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-get-name">bonobo_ui_component_get_name ()</title>
<programlisting>const char* bonobo_ui_component_get_name    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the UI component
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the name of the UI <parameter>component</parameter>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-container">bonobo_ui_component_set_container ()</title>
<programlisting>void        bonobo_ui_component_set_container
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> container);</programlisting>
<para>
This associates this <parameter>component</parameter> with a remote <parameter>container</parameter>
object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>container</parameter>&nbsp;:</entry>
<entry> a remote container object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-unset-container">bonobo_ui_component_unset_container ()</title>
<programlisting>void        bonobo_ui_component_unset_container
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
This dis-associates the <parameter>component</parameter> from its associated
<link linkend="BonoboUIContainer">BonoboUIContainer</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-get-container">bonobo_ui_component_get_container ()</title>
<programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> bonobo_ui_component_get_container
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the associated remote container
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-verb">bonobo_ui_component_add_verb ()</title>
<programlisting>void        bonobo_ui_component_add_verb    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Add a verb to the UI component, that can be invoked by
the container.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>cname</parameter>&nbsp;:</entry>
<entry> the programmatic name of the verb
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry> the callback function for invoking it
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> the associated user data for the callback
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-verb-full">bonobo_ui_component_add_verb_full ()</title>
<programlisting>void        bonobo_ui_component_add_verb_full
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);</programlisting>
<para>
Add a verb to the UI component, that can be invoked by
the container.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>cname</parameter>&nbsp;:</entry>
<entry> the programmatic name of the verb
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry> the callback function for invoking it
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> the associated user data for the callback
</entry></row>
<row><entry align="right"><parameter>destroy_fn</parameter>&nbsp;:</entry>
<entry> a destroy function for the callback data
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-verb">bonobo_ui_component_remove_verb ()</title>
<programlisting>void        bonobo_ui_component_remove_verb (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname);</programlisting>
<para>
Remove a verb by it's unique name</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>cname</parameter>&nbsp;:</entry>
<entry> the programmatic name of the verb
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-verb-by-func">bonobo_ui_component_remove_verb_by_func ()</title>
<programlisting>void        bonobo_ui_component_remove_verb_by_func
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn);</programlisting>
<para>
remove any verb with associated <parameter>user_data</parameter> pointer</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-verb-by-data">bonobo_ui_component_remove_verb_by_data ()</title>
<programlisting>void        bonobo_ui_component_remove_verb_by_data
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-listener">bonobo_ui_component_add_listener ()</title>
<programlisting>void        bonobo_ui_component_add_listener
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *id,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Add a listener for stateful events.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the programmatic name of the id
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry> the callback function for invoking it
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> the associated user data for the callback
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-listener-full">bonobo_ui_component_add_listener_full ()</title>
<programlisting>void        bonobo_ui_component_add_listener_full
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *id,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);</programlisting>
<para>
Add a listener for stateful events.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the programmatic name of the id
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry> the callback function for invoking it
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> the associated user data for the callback
</entry></row>
<row><entry align="right"><parameter>destroy_fn</parameter>&nbsp;:</entry>
<entry> a destroy function for the callback data
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-listener">bonobo_ui_component_remove_listener ()</title>
<programlisting>void        bonobo_ui_component_remove_listener
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *cname);</programlisting>
<para>
Remove any listener by its unique id</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component to add it to
</entry></row>
<row><entry align="right"><parameter>cname</parameter>&nbsp;:</entry>
<entry> the programmatic name of the id
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-listener-by-func">bonobo_ui_component_remove_listener_by_func ()</title>
<programlisting>void        bonobo_ui_component_remove_listener_by_func
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>fn</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-remove-listener-by-data">bonobo_ui_component_remove_listener_by_data ()</title>
<programlisting>void        bonobo_ui_component_remove_listener_by_data
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set">bonobo_ui_component_set ()</title>
<programlisting>void        bonobo_ui_component_set         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *xml,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Set the <parameter>xml</parameter> fragment into the remote <link linkend="BonoboUIContainer">BonoboUIContainer</link>'s tree
attached to <parameter>component</parameter> at the specified <parameter>path</parameter>
</para>
<para>
If you see blank menu items ( or just separators ) it's
likely that you should be using <link linkend="bonobo-ui-component-set-translate">bonobo_ui_component_set_translate</link>
which substantialy deprecates this routine.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the xml to set
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-translate">bonobo_ui_component_set_translate ()</title>
<programlisting>void        bonobo_ui_component_set_translate
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *xml,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine parses the XML strings, and converts any:
_label="Hello World" type strings into the translated,
and encoded format expected by the remote <link linkend="BonoboUIContainer">BonoboUIContainer</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the non translated xml to set
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-tree">bonobo_ui_component_set_tree ()</title>
<programlisting>void        bonobo_ui_component_set_tree    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Set the <parameter>xml</parameter> fragment into the remote <link linkend="BonoboUIContainer">BonoboUIContainer</link>'s tree
attached to <parameter>component</parameter> at the specified <parameter>path</parameter>
</para>
<para>
It is likely that you don't want this routine, but want
bonobo_ui_component_set_translate.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the <link linkend="BonoboUINode">BonoboUINode</link> representation of an xml tree to set
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-rm">bonobo_ui_component_rm ()</title>
<programlisting>void        bonobo_ui_component_rm          (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine removes a chunk of the XML tree in the
<link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-path-exists">bonobo_ui_component_path_exists ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    bonobo_ui_component_path_exists (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set the property on
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> TRUE if the path exists in the container.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-get">bonobo_ui_component_get ()</title>
<programlisting><link linkend="CORBA-char">CORBA_char</link>* bonobo_ui_component_get         (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="gboolean">gboolean</link> recurse,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine fetches a chunk of the XML tree in the
<link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>. If <parameter>recurse</parameter> then the child nodes of <parameter>path</parameter>
are returned too, otherwise they are not.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to get
</entry></row>
<row><entry align="right"><parameter>recurse</parameter>&nbsp;:</entry>
<entry> whether to get child nodes of <parameter>path</parameter>
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an XML string
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-get-tree">bonobo_ui_component_get_tree ()</title>
<programlisting><link linkend="BonoboUINode">BonoboUINode</link>* bonobo_ui_component_get_tree  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="gboolean">gboolean</link> recurse,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine fetches a chunk of the XML tree in the
<link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>. If <parameter>recurse</parameter> then the child nodes of <parameter>path</parameter>
are returned too, otherwise they are not.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to get
</entry></row>
<row><entry align="right"><parameter>recurse</parameter>&nbsp;:</entry>
<entry> whether to get child nodes of <parameter>path</parameter>
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="BonoboUINode">BonoboUINode</link> XML representation
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-object-set">bonobo_ui_component_object_set ()</title>
<programlisting>void        bonobo_ui_component_object_set  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> control,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This registers the <parameter>control</parameter> CORBA object into the
<link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with this <parameter>component</parameter> at
the specified <parameter>path</parameter>. This is most often used to associate
controls with a certain path.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>control</parameter>&nbsp;:</entry>
<entry> a CORBA object reference
</entry></row>
<row><entry align="right"><parameter>ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-object-get">bonobo_ui_component_object_get ()</title>
<programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link> bonobo_ui_component_object_get
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This returns the <parameter>control</parameter> CORBA object registered with the
<link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with this <parameter>component</parameter> at
the specified <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the associated remote CORBA object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-freeze">bonobo_ui_component_freeze ()</title>
<programlisting>void        bonobo_ui_component_freeze      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This increments the freeze count on the remote associated
<link linkend="BonoboUIContainer">BonoboUIContainer</link>, this means that a batch of update operations
can be performed without a re-render penalty per update.
</para>
<para>
NB. if your GUI is frozen / not updating you probably have a
freeze / thaw reference leak/</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-thaw">bonobo_ui_component_thaw ()</title>
<programlisting>void        bonobo_ui_component_thaw        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This decrements the freeze count on the remote associated
<link linkend="BonoboUIContainer">BonoboUIContainer</link>, this means that a batch of update operations
can be performed without a re-render penalty per update.
</para>
<para>
NB. if your GUI is frozen / not updating you probably have a
freeze / thaw reference leak/</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-prop">bonobo_ui_component_set_prop ()</title>
<programlisting>void        bonobo_ui_component_set_prop    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *prop,
                                             const char *value,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This helper function sets an XML property ( or attribute )
on the XML node pointed at by <parameter>path</parameter>. It does this by
a read / modify / write process. If you find yourself
doing this a lot, you need to consider batching this process.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set the property on
</entry></row>
<row><entry align="right"><parameter>prop</parameter>&nbsp;:</entry>
<entry> the property name
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> the property value
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-get-prop">bonobo_ui_component_get_prop ()</title>
<programlisting><link linkend="gchar">gchar</link>*      bonobo_ui_component_get_prop    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *path,
                                             const char *prop,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This helper function fetches an XML property ( or attribute )
from the XML node pointed at by <parameter>path</parameter> in the <link linkend="BonoboUIContainer">BonoboUIContainer</link>
associated with <parameter>component</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> the path to set the property on
</entry></row>
<row><entry align="right"><parameter>prop</parameter>&nbsp;:</entry>
<entry> the property name
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry> the (optional) CORBA exception environment
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the xml property value or NULL - free with g_free.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-set-status">bonobo_ui_component_set_status ()</title>
<programlisting>void        bonobo_ui_component_set_status  (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             const char *text,
                                             <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This sets the contents of the status bar to <parameter>text</parameter> in the
remote <link linkend="BonoboUIContainer">BonoboUIContainer</link> associated with <parameter>component</parameter>.
This is done by setting the contents of the /status/main
node.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> the new status text
</entry></row>
<row><entry align="right"><parameter>opt_ev</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BonoboUIVerb">BonoboUIVerb</title>
<programlisting>typedef struct {
	char          *cname;
	BonoboUIVerbFn cb;
	gpointer       user_data;
	gpointer       dummy;
} BonoboUIVerb;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BONOBO-UI-VERB-CAPS">BONOBO_UI_VERB()</title>
<programlisting>#define BONOBO_UI_VERB(name,cb)                  { (name), (cb), NULL   }
</programlisting>
<para>
This declares and fills a BonoboUIVerb structure suitable for
use in constructing a lost of verbs to add with
bonobo_ui_component_add_verb_list_with_data.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>the verb name
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry>the callback function.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-UI-VERB-DATA-CAPS">BONOBO_UI_VERB_DATA()</title>
<programlisting>#define BONOBO_UI_VERB_DATA(name,cb,data)        { (name), (cb), (data) }
</programlisting>
<para>
This declares and fills a BonoboUIVerb structure suitable for
use in constructing a lost of verbs to add with
bonobo_ui_component_add_verb_list.
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>the verb name
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry>the callback function
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>some associated user_data


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-UI-UNSAFE-VERB-CAPS">BONOBO_UI_UNSAFE_VERB()</title>
<programlisting>#define BONOBO_UI_UNSAFE_VERB(name,cb)           { (name), ((BonoboUIVerbFn)(cb)), NULL   }
</programlisting>
<para>
As BONOBO_UI_VERB, but unsafely casts <parameter>cb</parameter> to the correct type
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>the verb name
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry>the callback function.


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-UI-UNSAFE-VERB-DATA-CAPS">BONOBO_UI_UNSAFE_VERB_DATA()</title>
<programlisting>#define BONOBO_UI_UNSAFE_VERB_DATA(name,cb,data) { (name), ((BonoboUIVerbFn)(cb)), (data) }
</programlisting>
<para>
As BONOBO_UI_VERB_DATA, but unsafely casts <parameter>cb</parameter> to the correct type
</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>the verb name
</entry></row>
<row><entry align="right"><parameter>cb</parameter>&nbsp;:</entry>
<entry>the callback function
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>some associated user_data


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="BONOBO-UI-VERB-END-CAPS">BONOBO_UI_VERB_END</title>
<programlisting>#define BONOBO_UI_VERB_END                       { NULL, NULL, NULL }
</programlisting>
<para>
The terminator BonoboUIVerb structure for a list of BonoboUIVerbs.
</para></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-verb-list">bonobo_ui_component_add_verb_list ()</title>
<programlisting>void        bonobo_ui_component_add_verb_list
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list);</programlisting>
<para>
Add a list of verbs with no associated user_data, you probably
want <link linkend="bonobo-ui-component-add-verb-list-with-data">bonobo_ui_component_add_verb_list_with_data</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> the list of verbs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-ui-component-add-verb-list-with-data">bonobo_ui_component_add_verb_list_with_data ()</title>
<programlisting>void        bonobo_ui_component_add_verb_list_with_data
                                            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                             <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This is a helper function to save registering verbs individualy
it allows registration of a great batch of verbs at one time
in a list of <link linkend="BonoboUIVerb">BonoboUIVerb</link> terminated by <link linkend="BONOBO-UI-VERB-END-CAPS">BONOBO_UI_VERB_END</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>component</parameter>&nbsp;:</entry>
<entry> the component
</entry></row>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> the list of verbs
</entry></row>
<row><entry align="right"><parameter>user_data</parameter>&nbsp;:</entry>
<entry> the user data passed to the verb callbacks
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="BonoboUIContainer">BonoboUIContainer</link>, <link linkend="bonobo-ui-util">bonobo-ui-util</link>, <link linkend="BonoboControl">BonoboControl</link>
</para>
</refsect1>

</refentry>
