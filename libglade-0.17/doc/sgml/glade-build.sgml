<refentry id="libglade-Libglade-Build">
<refmeta>
<refentrytitle>Libglade Build</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGLADE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Libglade Build</refname><refpurpose>Routines used by widget building routines</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;glade/glade.h&gt;
#include &lt;glade/glade-build.h&gt;


<link linkend="GtkWidget">GtkWidget</link>*  (<link linkend="GladeNewFunc">*GladeNewFunc</link>)                 (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);
void        (<link linkend="GladeBuildChildrenFunc">*GladeBuildChildrenFunc</link>)       (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkWidget">GtkWidget</link> *w,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *longname);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="glade-xml-build-widget">glade_xml_build_widget</link>          (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *parent_long);
void        <link linkend="glade-xml-set-common-params">glade_xml_set_common_params</link>     (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *parent_long);
struct      <link linkend="GladeWidgetBuildData">GladeWidgetBuildData</link>;
void        <link linkend="glade-register-widgets">glade_register_widgets</link>          (const <link linkend="GladeWidgetBuildData">GladeWidgetBuildData</link> *widgets);

<link linkend="gchar">gchar</link>*      <link linkend="glade-xml-relative-file">glade_xml_relative_file</link>         (<link linkend="GladeXML">GladeXML</link> *self,
                                             const <link linkend="gchar">gchar</link> *filename);
<link linkend="gint">gint</link>        <link linkend="glade-enum-from-string">glade_enum_from_string</link>          (<link linkend="GtkType">GtkType</link> type,
                                             const char *string);
<link linkend="GtkAdjustment">GtkAdjustment</link>* <link linkend="glade-get-adjustment">glade_get_adjustment</link>         (<link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);
void        <link linkend="glade-xml-set-window-props">glade_xml_set_window_props</link>      (<link linkend="GtkWindow">GtkWindow</link> *window,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);
void        <link linkend="glade-standard-build-children">glade_standard_build_children</link>   (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GtkWidget">GtkWidget</link> *w,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *longname);

char*       <link linkend="glade-xml-gettext">glade_xml_gettext</link>               (<link linkend="GladeXML">GladeXML</link> *xml,
                                             const char *msgid);

void        <link linkend="glade-xml-set-toplevel">glade_xml_set_toplevel</link>          (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkWindow">GtkWindow</link> *window);
<link linkend="GtkAccelGroup">GtkAccelGroup</link>* <link linkend="glade-xml-ensure-accel">glade_xml_ensure_accel</link>       (<link linkend="GladeXML">GladeXML</link> *xml);
void        <link linkend="glade-xml-push-uline-accel">glade_xml_push_uline_accel</link>      (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkAccelGroup">GtkAccelGroup</link> *uline);
void        <link linkend="glade-xml-pop-uline-accel">glade_xml_pop_uline_accel</link>       (<link linkend="GladeXML">GladeXML</link> *xml);
<link linkend="GtkAccelGroup">GtkAccelGroup</link>* <link linkend="glade-xml-get-uline-accel">glade_xml_get_uline_accel</link>    (<link linkend="GladeXML">GladeXML</link> *xml);
void        <link linkend="glade-xml-handle-label-accel">glade_xml_handle_label_accel</link>    (<link linkend="GladeXML">GladeXML</link> *xml,
                                             const <link linkend="gchar">gchar</link> *target,
                                             <link linkend="guint">guint</link> key);
<link linkend="guint">guint</link>       <link linkend="glade-xml-get-parent-accel">glade_xml_get_parent_accel</link>      (<link linkend="GladeXML">GladeXML</link> *xml);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
These functions are used by the routines that are responsible for building
the actual widgets from the XML node data structures.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GladeNewFunc">GladeNewFunc ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  (*GladeNewFunc)                 (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);</programlisting>
<para>
This function signature should be used by functions that build particular
widget types.  The function should create the new widget and set any non
standard widget parameters (ie. don't set visibility, size, etc), as
this is handled by glade_xml_build_widget, which calls these functions.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> The GladeXML object.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure for this widget.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the new widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GladeBuildChildrenFunc">GladeBuildChildrenFunc ()</title>
<programlisting>void        (*GladeBuildChildrenFunc)       (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkWidget">GtkWidget</link> *w,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *longname);</programlisting>
<para>
This function signature should be used by functions that are responsible
for adding children to a container widget.  To create each child widget,
glade_xml_build_widget should be called.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>w</parameter>&nbsp;:</entry>
<entry> this widget.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure for this widget.
</entry></row>
<row><entry align="right"><parameter>longname</parameter>&nbsp;:</entry>
<entry> the long name for this widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-build-widget">glade_xml_build_widget ()</title>
<programlisting><link linkend="GtkWidget">GtkWidget</link>*  glade_xml_build_widget          (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *parent_long);</programlisting>
<para>
This function is not intended for people who just use libglade.  Instead
it is for people extending it (it is designed to be called in the child
build routine defined for the parent widget).  It first checks the type
of the widget from the class tag, then calls the corresponding widget
creation routine.  This routine sets up all the settings specific to that
type of widget.  Then general widget settings are performed on the widget.
Then it sets up accelerators for the widget, and extracts any signal
information for the widget.  Then it checks to see if there are any
child widget nodes for this widget, and if so calls the widget's
build routine, which will create the children with this function and add
them to the widget in the appropriate way.  Finally it returns the widget.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>self</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure for the widget.
</entry></row>
<row><entry align="right"><parameter>parent_long</parameter>&nbsp;:</entry>
<entry> the long name of the parent object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the newly created widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-set-common-params">glade_xml_set_common_params ()</title>
<programlisting>void        glade_xml_set_common_params     (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GtkWidget">GtkWidget</link> *widget,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *parent_long);</programlisting>
<para>
This function sets the common parameters on a widget, and is responsible
for inserting it into the GladeXML object's internal structures.  It will
also add the children to this widget.  Usually this function is only called
by glade_xml_build_widget, but is exposed for difficult cases, such as
setting up toolbar buttons and the like.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>self</parameter>&nbsp;:</entry>
<entry> the GladeXML widget.
</entry></row>
<row><entry align="right"><parameter>widget</parameter>&nbsp;:</entry>
<entry> the widget to set parameters on.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure for the widget.
</entry></row>
<row><entry align="right"><parameter>parent_long</parameter>&nbsp;:</entry>
<entry> the long name of the parent widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GladeWidgetBuildData">struct GladeWidgetBuildData</title>
<programlisting>struct GladeWidgetBuildData {
  char *name;
  GladeNewFunc new;
  GladeBuildChildrenFunc build_children;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="glade-register-widgets">glade_register_widgets ()</title>
<programlisting>void        glade_register_widgets          (const <link linkend="GladeWidgetBuildData">GladeWidgetBuildData</link> *widgets);</programlisting>
<para>
This function is used to register new sets of widget building functions.
each member of <parameter>widgets</parameter> contains the widget name, a function to build
a widget of that type, and optionally a function to build the children
of this widget.  The child building routine would call
glade_xml_build_widget on each child node to create the child before
packing it.
</para>
<para>
This function is mainly useful for addon widget modules for libglade
(it would get called from the glade_init_module function).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>widgets</parameter>&nbsp;:</entry>
<entry> a NULL terminated array of GladeWidgetBuildData structures.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-relative-file">glade_xml_relative_file ()</title>
<programlisting><link linkend="gchar">gchar</link>*      glade_xml_relative_file         (<link linkend="GladeXML">GladeXML</link> *self,
                                             const <link linkend="gchar">gchar</link> *filename);</programlisting>
<para>
This function resolves a relative pathname, using the directory of the
XML file as a base.  If the pathname is absolute, then the original
filename is returned.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>self</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry> the filename.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the filename.  The result must be g_free'd.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-enum-from-string">glade_enum_from_string ()</title>
<programlisting><link linkend="gint">gint</link>        glade_enum_from_string          (<link linkend="GtkType">GtkType</link> type,
                                             const char *string);</programlisting>
<para>
This helper routine is designed to be used by widget build routines to
convert the string representations of enumeration values found in the
XML descriptions to the integer values that can be used to configure
the widget.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry> the GtkType for this flag or enum type.
</entry></row>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> the string representation of the enum value.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the integer value for this enumeration, or 0 if it couldn't be
found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-get-adjustment">glade_get_adjustment ()</title>
<programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>* glade_get_adjustment         (<link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);</programlisting>
<para>
This utility routine is used to create an adjustment object for a widget.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure for this widget.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the newly created GtkAdjustment.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-set-window-props">glade_xml_set_window_props ()</title>
<programlisting>void        glade_xml_set_window_props      (<link linkend="GtkWindow">GtkWindow</link> *window,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info);</programlisting>
<para>
This is a convenience function to set some common attributes on
GtkWindow widgets and widgets derived from GtkWindow.  It does not
set the title or the window type, as these may need special handling
in some widgets.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry> the GtkWindow to set the properties of.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure holding the properties
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-standard-build-children">glade_standard_build_children ()</title>
<programlisting>void        glade_standard_build_children   (<link linkend="GladeXML">GladeXML</link> *self,
                                             <link linkend="GtkWidget">GtkWidget</link> *w,
                                             <link linkend="GladeWidgetInfo">GladeWidgetInfo</link> *info,
                                             const char *longname);</programlisting>
<para>
This is the standard child building function.  It simply calls
gtk_container_add on each child to add them to the parent.  It is
implemented here, as it should be useful to many GTK+ based widget
sets.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>self</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>w</parameter>&nbsp;:</entry>
<entry> the container widget.
</entry></row>
<row><entry align="right"><parameter>info</parameter>&nbsp;:</entry>
<entry> the GladeWidgetInfo structure.
</entry></row>
<row><entry align="right"><parameter>longname</parameter>&nbsp;:</entry>
<entry> the long name for this widget.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-gettext">glade_xml_gettext ()</title>
<programlisting>char*       glade_xml_gettext               (<link linkend="GladeXML">GladeXML</link> *xml,
                                             const char *msgid);</programlisting>
<para>
This function is a wrapper for gettext, that uses the translation domain
requested by the user of the function, or the default if no domain has
been specified.  This should be used for translatable strings in all
widget building routines.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>msgid</parameter>&nbsp;:</entry>
<entry> the string to translate.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the translated string
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-set-toplevel">glade_xml_set_toplevel ()</title>
<programlisting>void        glade_xml_set_toplevel          (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkWindow">GtkWindow</link> *window);</programlisting>
<para>
This is used while the tree is being built to set the toplevel window that
is currently being built.  It is mainly used to enable GtkAccelGroup's to
be bound to the correct window, but could have other uses.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry> the toplevel.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-ensure-accel">glade_xml_ensure_accel ()</title>
<programlisting><link linkend="GtkAccelGroup">GtkAccelGroup</link>* glade_xml_ensure_accel       (<link linkend="GladeXML">GladeXML</link> *xml);</programlisting>
<para>
This function is used to get the current GtkAccelGroup.  If there isn't
one, a new one is created and bound to the current toplevel window (if
a toplevel has been set).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the current GtkAccelGroup.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-push-uline-accel">glade_xml_push_uline_accel ()</title>
<programlisting>void        glade_xml_push_uline_accel      (<link linkend="GladeXML">GladeXML</link> *xml,
                                             <link linkend="GtkAccelGroup">GtkAccelGroup</link> *uline);</programlisting>
<para>
Push a new uline accel group onto the stack.  This is intended for use
by GtkMenu so that GtkMenuItem's can set up underline accelerators.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>uline</parameter>&nbsp;:</entry>
<entry> the underline accelerator group.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-pop-uline-accel">glade_xml_pop_uline_accel ()</title>
<programlisting>void        glade_xml_pop_uline_accel       (<link linkend="GladeXML">GladeXML</link> *xml);</programlisting>
<para>
Pops the uline accel group.  This will usually be called after a GtkMenu
has built all its children.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-get-uline-accel">glade_xml_get_uline_accel ()</title>
<programlisting><link linkend="GtkAccelGroup">GtkAccelGroup</link>* glade_xml_get_uline_accel    (<link linkend="GladeXML">GladeXML</link> *xml);</programlisting>
<para>
This function is intended for use in menu items when setting up underline
accelerators.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the current uline accel group, or NULL if there is none.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-handle-label-accel">glade_xml_handle_label_accel ()</title>
<programlisting>void        glade_xml_handle_label_accel    (<link linkend="GladeXML">GladeXML</link> *xml,
                                             const <link linkend="gchar">gchar</link> *target,
                                             <link linkend="guint">guint</link> key);</programlisting>
<para>
This function is called by the GtkLabel creation routine to register an
underline accelerator for the label.  If the target widget exists, the
accelerator is connected to the grab_focus signal.  If it does not exist
yet, the (target, key) pair is saved so that it can be attached when the
widget is created.
If <parameter>target</parameter> is <literal>NULL</literal>, then the accelerator should be attached to one of
the parents of this widget (typically a GtkButton).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><parameter>target</parameter>&nbsp;:</entry>
<entry> the target widget name (or <literal>NULL</literal>).
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the key code for the accelerator.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="glade-xml-get-parent-accel">glade_xml_get_parent_accel ()</title>
<programlisting><link linkend="guint">guint</link>       glade_xml_get_parent_accel      (<link linkend="GladeXML">GladeXML</link> *xml);</programlisting>
<para>
This function gets the latest label underline accelerator directed at the
parent widget.  If there is no accelerator waiting, 0 is returned.  If
this function is called twice in a row, the second call will always return
0.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>xml</parameter>&nbsp;:</entry>
<entry> the GladeXML object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the key code for the accelerator, or zero.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
