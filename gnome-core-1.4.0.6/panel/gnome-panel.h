/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef gnome_panel_H
#define gnome_panel_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_GNOME_PanelSpot) && !defined(_GNOME_PanelSpot_defined)
#define ORBIT_DECL_GNOME_PanelSpot 1
#define _GNOME_PanelSpot_defined 1
#define GNOME_PanelSpot__free CORBA_Object__free
   typedef CORBA_Object GNOME_PanelSpot;
   extern CORBA_unsigned_long GNOME_PanelSpot__classid;
#if !defined(TC_IMPL_TC_GNOME_PanelSpot_0)
#define TC_IMPL_TC_GNOME_PanelSpot_0 'g'
#define TC_IMPL_TC_GNOME_PanelSpot_1 'n'
#define TC_IMPL_TC_GNOME_PanelSpot_2 'o'
#define TC_IMPL_TC_GNOME_PanelSpot_3 'm'
#define TC_IMPL_TC_GNOME_PanelSpot_4 'e'
#define TC_IMPL_TC_GNOME_PanelSpot_5 '_'
#define TC_IMPL_TC_GNOME_PanelSpot_6 'p'
#define TC_IMPL_TC_GNOME_PanelSpot_7 'a'
#define TC_IMPL_TC_GNOME_PanelSpot_8 'n'
#define TC_IMPL_TC_GNOME_PanelSpot_9 'e'
#define TC_IMPL_TC_GNOME_PanelSpot_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_PanelSpot_struct;
#define TC_GNOME_PanelSpot ((CORBA_TypeCode)&TC_GNOME_PanelSpot_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_Applet) && !defined(_GNOME_Applet_defined)
#define ORBIT_DECL_GNOME_Applet 1
#define _GNOME_Applet_defined 1
#define GNOME_Applet__free CORBA_Object__free
   typedef CORBA_Object GNOME_Applet;
   extern CORBA_unsigned_long GNOME_Applet__classid;
#if !defined(TC_IMPL_TC_GNOME_Applet_0)
#define TC_IMPL_TC_GNOME_Applet_0 'g'
#define TC_IMPL_TC_GNOME_Applet_1 'n'
#define TC_IMPL_TC_GNOME_Applet_2 'o'
#define TC_IMPL_TC_GNOME_Applet_3 'm'
#define TC_IMPL_TC_GNOME_Applet_4 'e'
#define TC_IMPL_TC_GNOME_Applet_5 '_'
#define TC_IMPL_TC_GNOME_Applet_6 'p'
#define TC_IMPL_TC_GNOME_Applet_7 'a'
#define TC_IMPL_TC_GNOME_Applet_8 'n'
#define TC_IMPL_TC_GNOME_Applet_9 'e'
#define TC_IMPL_TC_GNOME_Applet_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Applet_struct;
#define TC_GNOME_Applet ((CORBA_TypeCode)&TC_GNOME_Applet_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_StatusSpot) && !defined(_GNOME_StatusSpot_defined)
#define ORBIT_DECL_GNOME_StatusSpot 1
#define _GNOME_StatusSpot_defined 1
#define GNOME_StatusSpot__free CORBA_Object__free
   typedef CORBA_Object GNOME_StatusSpot;
   extern CORBA_unsigned_long GNOME_StatusSpot__classid;
#if !defined(TC_IMPL_TC_GNOME_StatusSpot_0)
#define TC_IMPL_TC_GNOME_StatusSpot_0 'g'
#define TC_IMPL_TC_GNOME_StatusSpot_1 'n'
#define TC_IMPL_TC_GNOME_StatusSpot_2 'o'
#define TC_IMPL_TC_GNOME_StatusSpot_3 'm'
#define TC_IMPL_TC_GNOME_StatusSpot_4 'e'
#define TC_IMPL_TC_GNOME_StatusSpot_5 '_'
#define TC_IMPL_TC_GNOME_StatusSpot_6 'p'
#define TC_IMPL_TC_GNOME_StatusSpot_7 'a'
#define TC_IMPL_TC_GNOME_StatusSpot_8 'n'
#define TC_IMPL_TC_GNOME_StatusSpot_9 'e'
#define TC_IMPL_TC_GNOME_StatusSpot_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_StatusSpot_struct;
#define TC_GNOME_StatusSpot ((CORBA_TypeCode)&TC_GNOME_StatusSpot_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_PanelAppletBooter) && !defined(_GNOME_PanelAppletBooter_defined)
#define ORBIT_DECL_GNOME_PanelAppletBooter 1
#define _GNOME_PanelAppletBooter_defined 1
#define GNOME_PanelAppletBooter__free CORBA_Object__free
   typedef CORBA_Object GNOME_PanelAppletBooter;
   extern CORBA_unsigned_long GNOME_PanelAppletBooter__classid;
#if !defined(TC_IMPL_TC_GNOME_PanelAppletBooter_0)
#define TC_IMPL_TC_GNOME_PanelAppletBooter_0 'g'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_1 'n'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_2 'o'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_3 'm'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_4 'e'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_5 '_'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_6 'p'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_7 'a'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_8 'n'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_9 'e'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_10 'l'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_PanelAppletBooter_struct;
#define TC_GNOME_PanelAppletBooter ((CORBA_TypeCode)&TC_GNOME_PanelAppletBooter_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_Panel) && !defined(_GNOME_Panel_defined)
#define ORBIT_DECL_GNOME_Panel 1
#define _GNOME_Panel_defined 1
#define GNOME_Panel__free CORBA_Object__free
   typedef CORBA_Object GNOME_Panel;
   extern CORBA_unsigned_long GNOME_Panel__classid;
#if !defined(TC_IMPL_TC_GNOME_Panel_0)
#define TC_IMPL_TC_GNOME_Panel_0 'g'
#define TC_IMPL_TC_GNOME_Panel_1 'n'
#define TC_IMPL_TC_GNOME_Panel_2 'o'
#define TC_IMPL_TC_GNOME_Panel_3 'm'
#define TC_IMPL_TC_GNOME_Panel_4 'e'
#define TC_IMPL_TC_GNOME_Panel_5 '_'
#define TC_IMPL_TC_GNOME_Panel_6 'p'
#define TC_IMPL_TC_GNOME_Panel_7 'a'
#define TC_IMPL_TC_GNOME_Panel_8 'n'
#define TC_IMPL_TC_GNOME_Panel_9 'e'
#define TC_IMPL_TC_GNOME_Panel_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_struct;
#define TC_GNOME_Panel ((CORBA_TypeCode)&TC_GNOME_Panel_struct)
#endif
#endif
#if !defined(_GNOME_Panel_Color_defined)
#define _GNOME_Panel_Color_defined 1
   typedef struct
   {
      CORBA_unsigned_short red;
      CORBA_unsigned_short green;
      CORBA_unsigned_short blue;
   }
   GNOME_Panel_Color;

#if !defined(TC_IMPL_TC_GNOME_Panel_Color_0)
#define TC_IMPL_TC_GNOME_Panel_Color_0 'g'
#define TC_IMPL_TC_GNOME_Panel_Color_1 'n'
#define TC_IMPL_TC_GNOME_Panel_Color_2 'o'
#define TC_IMPL_TC_GNOME_Panel_Color_3 'm'
#define TC_IMPL_TC_GNOME_Panel_Color_4 'e'
#define TC_IMPL_TC_GNOME_Panel_Color_5 '_'
#define TC_IMPL_TC_GNOME_Panel_Color_6 'p'
#define TC_IMPL_TC_GNOME_Panel_Color_7 'a'
#define TC_IMPL_TC_GNOME_Panel_Color_8 'n'
#define TC_IMPL_TC_GNOME_Panel_Color_9 'e'
#define TC_IMPL_TC_GNOME_Panel_Color_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_Color_struct;
#define TC_GNOME_Panel_Color ((CORBA_TypeCode)&TC_GNOME_Panel_Color_struct)
#endif
   extern GNOME_Panel_Color *GNOME_Panel_Color__alloc(void);
   extern gpointer GNOME_Panel_Color__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet) && !defined(_CORBA_sequence_CORBA_octet_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define _CORBA_sequence_CORBA_octet_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'p'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_7 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_8 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_9 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_10 'l'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_octet;
   CORBA_octet *CORBA_sequence_CORBA_octet_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'p'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_7 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_8 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_9 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_10 'l'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
   extern CORBA_sequence_CORBA_octet *CORBA_sequence_CORBA_octet__alloc(void);
   extern gpointer CORBA_sequence_CORBA_octet__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_GNOME_Panel_RgbData_defined)
#define _GNOME_Panel_RgbData_defined 1
   typedef CORBA_sequence_CORBA_octet GNOME_Panel_RgbData;
#if !defined(TC_IMPL_TC_GNOME_Panel_RgbData_0)
#define TC_IMPL_TC_GNOME_Panel_RgbData_0 'g'
#define TC_IMPL_TC_GNOME_Panel_RgbData_1 'n'
#define TC_IMPL_TC_GNOME_Panel_RgbData_2 'o'
#define TC_IMPL_TC_GNOME_Panel_RgbData_3 'm'
#define TC_IMPL_TC_GNOME_Panel_RgbData_4 'e'
#define TC_IMPL_TC_GNOME_Panel_RgbData_5 '_'
#define TC_IMPL_TC_GNOME_Panel_RgbData_6 'p'
#define TC_IMPL_TC_GNOME_Panel_RgbData_7 'a'
#define TC_IMPL_TC_GNOME_Panel_RgbData_8 'n'
#define TC_IMPL_TC_GNOME_Panel_RgbData_9 'e'
#define TC_IMPL_TC_GNOME_Panel_RgbData_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_RgbData_struct;
#define TC_GNOME_Panel_RgbData ((CORBA_TypeCode)&TC_GNOME_Panel_RgbData_struct)
#endif
   extern GNOME_Panel_RgbData *GNOME_Panel_RgbData__alloc(void);
   extern gpointer GNOME_Panel_RgbData__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_Panel_RgbImage_defined)
#define _GNOME_Panel_RgbImage_defined 1
   typedef struct
   {
      GNOME_Panel_RgbData data;
      CORBA_unsigned_short width;
      CORBA_unsigned_short height;
      CORBA_unsigned_short rowstride;
      CORBA_boolean color_only;
   }
   GNOME_Panel_RgbImage;

#if !defined(TC_IMPL_TC_GNOME_Panel_RgbImage_0)
#define TC_IMPL_TC_GNOME_Panel_RgbImage_0 'g'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_1 'n'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_2 'o'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_3 'm'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_4 'e'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_5 '_'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_6 'p'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_7 'a'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_8 'n'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_9 'e'
#define TC_IMPL_TC_GNOME_Panel_RgbImage_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_RgbImage_struct;
#define TC_GNOME_Panel_RgbImage ((CORBA_TypeCode)&TC_GNOME_Panel_RgbImage_struct)
#endif
   extern GNOME_Panel_RgbImage *GNOME_Panel_RgbImage__alloc(void);
   extern gpointer GNOME_Panel_RgbImage__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_GNOME_Panel_OrientType_defined)
#define _GNOME_Panel_OrientType_defined 1
   typedef enum
   {
      GNOME_Panel_ORIENT_UP,
      GNOME_Panel_ORIENT_DOWN,
      GNOME_Panel_ORIENT_LEFT,
      GNOME_Panel_ORIENT_RIGHT
   }
   GNOME_Panel_OrientType;
#if !defined(TC_IMPL_TC_GNOME_Panel_OrientType_0)
#define TC_IMPL_TC_GNOME_Panel_OrientType_0 'g'
#define TC_IMPL_TC_GNOME_Panel_OrientType_1 'n'
#define TC_IMPL_TC_GNOME_Panel_OrientType_2 'o'
#define TC_IMPL_TC_GNOME_Panel_OrientType_3 'm'
#define TC_IMPL_TC_GNOME_Panel_OrientType_4 'e'
#define TC_IMPL_TC_GNOME_Panel_OrientType_5 '_'
#define TC_IMPL_TC_GNOME_Panel_OrientType_6 'p'
#define TC_IMPL_TC_GNOME_Panel_OrientType_7 'a'
#define TC_IMPL_TC_GNOME_Panel_OrientType_8 'n'
#define TC_IMPL_TC_GNOME_Panel_OrientType_9 'e'
#define TC_IMPL_TC_GNOME_Panel_OrientType_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_OrientType_struct;
#define TC_GNOME_Panel_OrientType ((CORBA_TypeCode)&TC_GNOME_Panel_OrientType_struct)
#endif
#endif
#if !defined(_GNOME_Panel_BackType_defined)
#define _GNOME_Panel_BackType_defined 1
   typedef enum
   {
      GNOME_Panel_BACK_NONE,
      GNOME_Panel_BACK_COLOR,
      GNOME_Panel_BACK_PIXMAP,
      GNOME_Panel_BACK_TRANSLUCENT
   }
   GNOME_Panel_BackType;
#if !defined(TC_IMPL_TC_GNOME_Panel_BackType_0)
#define TC_IMPL_TC_GNOME_Panel_BackType_0 'g'
#define TC_IMPL_TC_GNOME_Panel_BackType_1 'n'
#define TC_IMPL_TC_GNOME_Panel_BackType_2 'o'
#define TC_IMPL_TC_GNOME_Panel_BackType_3 'm'
#define TC_IMPL_TC_GNOME_Panel_BackType_4 'e'
#define TC_IMPL_TC_GNOME_Panel_BackType_5 '_'
#define TC_IMPL_TC_GNOME_Panel_BackType_6 'p'
#define TC_IMPL_TC_GNOME_Panel_BackType_7 'a'
#define TC_IMPL_TC_GNOME_Panel_BackType_8 'n'
#define TC_IMPL_TC_GNOME_Panel_BackType_9 'e'
#define TC_IMPL_TC_GNOME_Panel_BackType_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel_BackType_struct;
#define TC_GNOME_Panel_BackType ((CORBA_TypeCode)&TC_GNOME_Panel_BackType_struct)
#endif
#endif
#if !defined(_GNOME_Panel_BackInfoType_defined)
#define _GNOME_Panel_BackInfoType_defined 1
   typedef struct
   {
      GNOME_Panel_BackType _d;
      union
      {
	 GNOME_Panel_Color c;
	 CORBA_char *pmap;
      }
      _u;
   }
   GNOME_Panel_BackInfoType;
#if !defined(TC_IMPL_TC_GNOME_Panel_BackInfoType_0)
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_0 'g'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_1 'n'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_2 'o'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_3 'm'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_4 'e'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_5 '_'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_6 'p'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_7 'a'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_8 'n'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_9 'e'
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_10 'l'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_Panel_BackInfoType_struct;
#define TC_GNOME_Panel_BackInfoType ((CORBA_TypeCode)&TC_GNOME_Panel_BackInfoType_struct)
#endif
   extern GNOME_Panel_BackInfoType *GNOME_Panel_BackInfoType__alloc(void);
   extern gpointer GNOME_Panel_BackInfoType__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_GNOME_Panel2) && !defined(_GNOME_Panel2_defined)
#define ORBIT_DECL_GNOME_Panel2 1
#define _GNOME_Panel2_defined 1
#define GNOME_Panel2__free CORBA_Object__free
   typedef CORBA_Object GNOME_Panel2;
   extern CORBA_unsigned_long GNOME_Panel2__classid;
#if !defined(TC_IMPL_TC_GNOME_Panel2_0)
#define TC_IMPL_TC_GNOME_Panel2_0 'g'
#define TC_IMPL_TC_GNOME_Panel2_1 'n'
#define TC_IMPL_TC_GNOME_Panel2_2 'o'
#define TC_IMPL_TC_GNOME_Panel2_3 'm'
#define TC_IMPL_TC_GNOME_Panel2_4 'e'
#define TC_IMPL_TC_GNOME_Panel2_5 '_'
#define TC_IMPL_TC_GNOME_Panel2_6 'p'
#define TC_IMPL_TC_GNOME_Panel2_7 'a'
#define TC_IMPL_TC_GNOME_Panel2_8 'n'
#define TC_IMPL_TC_GNOME_Panel2_9 'e'
#define TC_IMPL_TC_GNOME_Panel2_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Panel2_struct;
#define TC_GNOME_Panel2 ((CORBA_TypeCode)&TC_GNOME_Panel2_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_PanelAppletBooter) && !defined(_GNOME_PanelAppletBooter_defined)
#define ORBIT_DECL_GNOME_PanelAppletBooter 1
#define _GNOME_PanelAppletBooter_defined 1
#define GNOME_PanelAppletBooter__free CORBA_Object__free
   typedef CORBA_Object GNOME_PanelAppletBooter;
   extern CORBA_unsigned_long GNOME_PanelAppletBooter__classid;
#if !defined(TC_IMPL_TC_GNOME_PanelAppletBooter_0)
#define TC_IMPL_TC_GNOME_PanelAppletBooter_0 'g'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_1 'n'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_2 'o'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_3 'm'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_4 'e'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_5 '_'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_6 'p'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_7 'a'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_8 'n'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_9 'e'
#define TC_IMPL_TC_GNOME_PanelAppletBooter_10 'l'
   extern const struct CORBA_TypeCode_struct
      TC_GNOME_PanelAppletBooter_struct;
#define TC_GNOME_PanelAppletBooter ((CORBA_TypeCode)&TC_GNOME_PanelAppletBooter_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_PanelSpot) && !defined(_GNOME_PanelSpot_defined)
#define ORBIT_DECL_GNOME_PanelSpot 1
#define _GNOME_PanelSpot_defined 1
#define GNOME_PanelSpot__free CORBA_Object__free
   typedef CORBA_Object GNOME_PanelSpot;
   extern CORBA_unsigned_long GNOME_PanelSpot__classid;
#if !defined(TC_IMPL_TC_GNOME_PanelSpot_0)
#define TC_IMPL_TC_GNOME_PanelSpot_0 'g'
#define TC_IMPL_TC_GNOME_PanelSpot_1 'n'
#define TC_IMPL_TC_GNOME_PanelSpot_2 'o'
#define TC_IMPL_TC_GNOME_PanelSpot_3 'm'
#define TC_IMPL_TC_GNOME_PanelSpot_4 'e'
#define TC_IMPL_TC_GNOME_PanelSpot_5 '_'
#define TC_IMPL_TC_GNOME_PanelSpot_6 'p'
#define TC_IMPL_TC_GNOME_PanelSpot_7 'a'
#define TC_IMPL_TC_GNOME_PanelSpot_8 'n'
#define TC_IMPL_TC_GNOME_PanelSpot_9 'e'
#define TC_IMPL_TC_GNOME_PanelSpot_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_PanelSpot_struct;
#define TC_GNOME_PanelSpot ((CORBA_TypeCode)&TC_GNOME_PanelSpot_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_Applet) && !defined(_GNOME_Applet_defined)
#define ORBIT_DECL_GNOME_Applet 1
#define _GNOME_Applet_defined 1
#define GNOME_Applet__free CORBA_Object__free
   typedef CORBA_Object GNOME_Applet;
   extern CORBA_unsigned_long GNOME_Applet__classid;
#if !defined(TC_IMPL_TC_GNOME_Applet_0)
#define TC_IMPL_TC_GNOME_Applet_0 'g'
#define TC_IMPL_TC_GNOME_Applet_1 'n'
#define TC_IMPL_TC_GNOME_Applet_2 'o'
#define TC_IMPL_TC_GNOME_Applet_3 'm'
#define TC_IMPL_TC_GNOME_Applet_4 'e'
#define TC_IMPL_TC_GNOME_Applet_5 '_'
#define TC_IMPL_TC_GNOME_Applet_6 'p'
#define TC_IMPL_TC_GNOME_Applet_7 'a'
#define TC_IMPL_TC_GNOME_Applet_8 'n'
#define TC_IMPL_TC_GNOME_Applet_9 'e'
#define TC_IMPL_TC_GNOME_Applet_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_Applet_struct;
#define TC_GNOME_Applet ((CORBA_TypeCode)&TC_GNOME_Applet_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_StatusSpot) && !defined(_GNOME_StatusSpot_defined)
#define ORBIT_DECL_GNOME_StatusSpot 1
#define _GNOME_StatusSpot_defined 1
#define GNOME_StatusSpot__free CORBA_Object__free
   typedef CORBA_Object GNOME_StatusSpot;
   extern CORBA_unsigned_long GNOME_StatusSpot__classid;
#if !defined(TC_IMPL_TC_GNOME_StatusSpot_0)
#define TC_IMPL_TC_GNOME_StatusSpot_0 'g'
#define TC_IMPL_TC_GNOME_StatusSpot_1 'n'
#define TC_IMPL_TC_GNOME_StatusSpot_2 'o'
#define TC_IMPL_TC_GNOME_StatusSpot_3 'm'
#define TC_IMPL_TC_GNOME_StatusSpot_4 'e'
#define TC_IMPL_TC_GNOME_StatusSpot_5 '_'
#define TC_IMPL_TC_GNOME_StatusSpot_6 'p'
#define TC_IMPL_TC_GNOME_StatusSpot_7 'a'
#define TC_IMPL_TC_GNOME_StatusSpot_8 'n'
#define TC_IMPL_TC_GNOME_StatusSpot_9 'e'
#define TC_IMPL_TC_GNOME_StatusSpot_10 'l'
   extern const struct CORBA_TypeCode_struct TC_GNOME_StatusSpot_struct;
#define TC_GNOME_StatusSpot ((CORBA_TypeCode)&TC_GNOME_StatusSpot_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
       GNOME_PanelSpot(*add_applet) (PortableServer_Servant _servant,
				     const GNOME_Applet panel_applet,
				     const CORBA_char * goad_id,
				     CORBA_char ** cfgpath,
				     CORBA_char ** globcfgpath,
				     CORBA_unsigned_long * winid,
				     CORBA_Environment * ev);
       GNOME_PanelSpot(*add_applet_full) (PortableServer_Servant _servant,
					  const GNOME_Applet panel_applet,
					  const CORBA_char * goad_id,
					  const CORBA_short panel,
					  const CORBA_short pos,
					  CORBA_char ** cfgpath,
					  CORBA_char ** globcfgpath,
					  CORBA_unsigned_long * winid,
					  CORBA_Environment * ev);
      void (*quit) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*_get_in_drag) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
       GNOME_StatusSpot(*add_status) (PortableServer_Servant _servant,
				      CORBA_unsigned_long * winid,
				      CORBA_Environment * ev);
      void (*notice_config_changes) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
   }
   POA_GNOME_Panel__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_Panel__epv *GNOME_Panel_epv;
   }
   POA_GNOME_Panel__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_Panel__vepv *vepv;
   }
   POA_GNOME_Panel;
   extern void POA_GNOME_Panel__init(PortableServer_Servant servant,
				     CORBA_Environment * ev);
   extern void POA_GNOME_Panel__fini(PortableServer_Servant servant,
				     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*suggest_sync) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
      void (*add_launcher) (PortableServer_Servant _servant,
			    const CORBA_char * launcher_desktop,
			    const CORBA_short panel, const CORBA_short pos,
			    CORBA_Environment * ev);
      void (*ask_about_launcher) (PortableServer_Servant _servant,
				  const CORBA_char * exec_string,
				  const CORBA_short panel,
				  const CORBA_short pos,
				  CORBA_Environment * ev);
      void (*add_launcher_from_info) (PortableServer_Servant _servant,
				      const CORBA_char * name,
				      const CORBA_char * comment,
				      const CORBA_char * exec,
				      const CORBA_char * icon,
				      const CORBA_short panel,
				      const CORBA_short pos,
				      CORBA_Environment * ev);
      void (*add_launcher_from_info_url) (PortableServer_Servant _servant,
					  const CORBA_char * name,
					  const CORBA_char * comment,
					  const CORBA_char * url,
					  const CORBA_char * icon,
					  const CORBA_short panel,
					  const CORBA_short pos,
					  CORBA_Environment * ev);
      void (*run_box) (PortableServer_Servant _servant,
		       const CORBA_char * initial_string,
		       CORBA_Environment * ev);
      void (*main_menu) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*launch_an_applet) (PortableServer_Servant _servant,
				const CORBA_char * goad_id,
				const GNOME_PanelAppletBooter booter,
				CORBA_Environment * ev);
   }
   POA_GNOME_Panel2__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_Panel__epv *GNOME_Panel_epv;
      POA_GNOME_Panel2__epv *GNOME_Panel2_epv;
   }
   POA_GNOME_Panel2__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_Panel2__vepv *vepv;
   }
   POA_GNOME_Panel2;
   extern void POA_GNOME_Panel2__init(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   extern void POA_GNOME_Panel2__fini(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
       GNOME_PanelSpot(*add_applet) (PortableServer_Servant _servant,
				     const GNOME_Applet panel_applet,
				     const CORBA_char * goad_id,
				     CORBA_char ** cfgpath,
				     CORBA_char ** globcfgpath,
				     CORBA_unsigned_long * winid,
				     CORBA_Environment * ev);
   }
   POA_GNOME_PanelAppletBooter__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_PanelAppletBooter__epv *GNOME_PanelAppletBooter_epv;
   }
   POA_GNOME_PanelAppletBooter__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_PanelAppletBooter__vepv *vepv;
   }
   POA_GNOME_PanelAppletBooter;
   extern void POA_GNOME_PanelAppletBooter__init(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   extern void POA_GNOME_PanelAppletBooter__fini(PortableServer_Servant
						 servant,
						 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*_get_tooltip) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
      void (*_set_tooltip) (PortableServer_Servant _servant,
			    const CORBA_char * value, CORBA_Environment * ev);
       CORBA_short(*_get_parent_panel) (PortableServer_Servant _servant,
					CORBA_Environment * ev);
       CORBA_short(*_get_spot_pos) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
       GNOME_Panel_OrientType(*_get_parent_orient) (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev);
       CORBA_short(*_get_parent_size) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
       CORBA_short(*_get_free_space) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
       CORBA_boolean(*_get_send_position) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
      void (*_set_send_position) (PortableServer_Servant _servant,
				  const CORBA_boolean value,
				  CORBA_Environment * ev);
       CORBA_boolean(*_get_send_draw) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*_set_send_draw) (PortableServer_Servant _servant,
			      const CORBA_boolean value,
			      CORBA_Environment * ev);
      GNOME_Panel_RgbImage *(*_get_rgb_background) (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev);
      void (*register_us) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*unregister_us) (PortableServer_Servant _servant,
			     CORBA_Environment * ev);
      void (*abort_load) (PortableServer_Servant _servant,
			  CORBA_Environment * ev);
      void (*show_menu) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*drag_start) (PortableServer_Servant _servant,
			  CORBA_Environment * ev);
      void (*drag_stop) (PortableServer_Servant _servant,
			 CORBA_Environment * ev);
      void (*add_callback) (PortableServer_Servant _servant,
			    const CORBA_char * callback_name,
			    const CORBA_char * stock_item,
			    const CORBA_char * menuitem_text,
			    CORBA_Environment * ev);
      void (*remove_callback) (PortableServer_Servant _servant,
			       const CORBA_char * callback_name,
			       CORBA_Environment * ev);
      void (*callback_set_sensitive) (PortableServer_Servant _servant,
				      const CORBA_char * callback_name,
				      const CORBA_boolean sensitive,
				      CORBA_Environment * ev);
      void (*sync_config) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*done_session_save) (PortableServer_Servant _servant,
				 const CORBA_boolean ret,
				 const CORBA_unsigned_long cookie,
				 CORBA_Environment * ev);
   }
   POA_GNOME_PanelSpot__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_PanelSpot__epv *GNOME_PanelSpot_epv;
   }
   POA_GNOME_PanelSpot__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_PanelSpot__vepv *vepv;
   }
   POA_GNOME_PanelSpot;
   extern void POA_GNOME_PanelSpot__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_GNOME_PanelSpot__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*change_orient) (PortableServer_Servant _servant,
			     const GNOME_Panel_OrientType orient,
			     CORBA_Environment * ev);
      void (*do_callback) (PortableServer_Servant _servant,
			   const CORBA_char * callback_name,
			   CORBA_Environment * ev);
       CORBA_boolean(*session_save) (PortableServer_Servant _servant,
				     const CORBA_char * cfgpath,
				     const CORBA_char * global_cfgpath,
				     CORBA_Environment * ev);
      void (*back_change) (PortableServer_Servant _servant,
			   const GNOME_Panel_BackInfoType * backing,
			   CORBA_Environment * ev);
      void (*set_tooltips_state) (PortableServer_Servant _servant,
				  const CORBA_boolean enabled,
				  CORBA_Environment * ev);
      CORBA_char *(*_get_goad_id) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
      void (*draw) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*save_session) (PortableServer_Servant _servant,
			    const CORBA_char * cfgpath,
			    const CORBA_char * global_cfgpath,
			    const CORBA_unsigned_long cookie,
			    CORBA_Environment * ev);
      void (*change_size) (PortableServer_Servant _servant,
			   const CORBA_short size, CORBA_Environment * ev);
      void (*change_position) (PortableServer_Servant _servant,
			       const CORBA_short x, const CORBA_short y,
			       CORBA_Environment * ev);
      void (*freeze_changes) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
      void (*thaw_changes) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
   }
   POA_GNOME_Applet__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_Applet__epv *GNOME_Applet_epv;
   }
   POA_GNOME_Applet__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_Applet__vepv *vepv;
   }
   POA_GNOME_Applet;
   extern void POA_GNOME_Applet__init(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   extern void POA_GNOME_Applet__fini(PortableServer_Servant servant,
				      CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*remove) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
   }
   POA_GNOME_StatusSpot__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_StatusSpot__epv *GNOME_StatusSpot_epv;
   }
   POA_GNOME_StatusSpot__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_StatusSpot__vepv *vepv;
   }
   POA_GNOME_StatusSpot;
   extern void POA_GNOME_StatusSpot__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_GNOME_StatusSpot__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);

/** prototypes **/
   GNOME_PanelSpot GNOME_Panel_add_applet(GNOME_Panel _obj,
					  const GNOME_Applet panel_applet,
					  const CORBA_char * goad_id,
					  CORBA_char ** cfgpath,
					  CORBA_char ** globcfgpath,
					  CORBA_unsigned_long * winid,
					  CORBA_Environment * ev);
   GNOME_PanelSpot GNOME_Panel_add_applet_full(GNOME_Panel _obj,
					       const GNOME_Applet
					       panel_applet,
					       const CORBA_char * goad_id,
					       const CORBA_short panel,
					       const CORBA_short pos,
					       CORBA_char ** cfgpath,
					       CORBA_char ** globcfgpath,
					       CORBA_unsigned_long * winid,
					       CORBA_Environment * ev);
   void GNOME_Panel_quit(GNOME_Panel _obj, CORBA_Environment * ev);
   CORBA_boolean GNOME_Panel__get_in_drag(GNOME_Panel _obj,
					  CORBA_Environment * ev);
   GNOME_StatusSpot GNOME_Panel_add_status(GNOME_Panel _obj,
					   CORBA_unsigned_long * winid,
					   CORBA_Environment * ev);
   void GNOME_Panel_notice_config_changes(GNOME_Panel _obj,
					  CORBA_Environment * ev);
#define GNOME_Panel2_add_applet GNOME_Panel_add_applet
#define GNOME_Panel2_add_applet_full GNOME_Panel_add_applet_full
#define GNOME_Panel2_quit GNOME_Panel_quit
#define GNOME_Panel2__get_in_drag GNOME_Panel__get_in_drag
#define GNOME_Panel2_add_status GNOME_Panel_add_status
#define GNOME_Panel2_notice_config_changes GNOME_Panel_notice_config_changes
   void GNOME_Panel2_suggest_sync(GNOME_Panel2 _obj, CORBA_Environment * ev);
   void GNOME_Panel2_add_launcher(GNOME_Panel2 _obj,
				  const CORBA_char * launcher_desktop,
				  const CORBA_short panel,
				  const CORBA_short pos,
				  CORBA_Environment * ev);
   void GNOME_Panel2_ask_about_launcher(GNOME_Panel2 _obj,
					const CORBA_char * exec_string,
					const CORBA_short panel,
					const CORBA_short pos,
					CORBA_Environment * ev);
   void GNOME_Panel2_add_launcher_from_info(GNOME_Panel2 _obj,
					    const CORBA_char * name,
					    const CORBA_char * comment,
					    const CORBA_char * exec,
					    const CORBA_char * icon,
					    const CORBA_short panel,
					    const CORBA_short pos,
					    CORBA_Environment * ev);
   void GNOME_Panel2_add_launcher_from_info_url(GNOME_Panel2 _obj,
						const CORBA_char * name,
						const CORBA_char * comment,
						const CORBA_char * url,
						const CORBA_char * icon,
						const CORBA_short panel,
						const CORBA_short pos,
						CORBA_Environment * ev);
   void GNOME_Panel2_run_box(GNOME_Panel2 _obj,
			     const CORBA_char * initial_string,
			     CORBA_Environment * ev);
   void GNOME_Panel2_main_menu(GNOME_Panel2 _obj, CORBA_Environment * ev);
   void GNOME_Panel2_launch_an_applet(GNOME_Panel2 _obj,
				      const CORBA_char * goad_id,
				      const GNOME_PanelAppletBooter booter,
				      CORBA_Environment * ev);
   GNOME_PanelSpot GNOME_PanelAppletBooter_add_applet(GNOME_PanelAppletBooter
						      _obj,
						      const GNOME_Applet
						      panel_applet,
						      const CORBA_char *
						      goad_id,
						      CORBA_char ** cfgpath,
						      CORBA_char **
						      globcfgpath,
						      CORBA_unsigned_long *
						      winid,
						      CORBA_Environment * ev);
   CORBA_char *GNOME_PanelSpot__get_tooltip(GNOME_PanelSpot _obj,
					    CORBA_Environment * ev);
   void GNOME_PanelSpot__set_tooltip(GNOME_PanelSpot _obj,
				     const CORBA_char * value,
				     CORBA_Environment * ev);
   CORBA_short GNOME_PanelSpot__get_parent_panel(GNOME_PanelSpot _obj,
						 CORBA_Environment * ev);
   CORBA_short GNOME_PanelSpot__get_spot_pos(GNOME_PanelSpot _obj,
					     CORBA_Environment * ev);
   GNOME_Panel_OrientType GNOME_PanelSpot__get_parent_orient(GNOME_PanelSpot
							     _obj,
							     CORBA_Environment
							     * ev);
   CORBA_short GNOME_PanelSpot__get_parent_size(GNOME_PanelSpot _obj,
						CORBA_Environment * ev);
   CORBA_short GNOME_PanelSpot__get_free_space(GNOME_PanelSpot _obj,
					       CORBA_Environment * ev);
   CORBA_boolean GNOME_PanelSpot__get_send_position(GNOME_PanelSpot _obj,
						    CORBA_Environment * ev);
   void GNOME_PanelSpot__set_send_position(GNOME_PanelSpot _obj,
					   const CORBA_boolean value,
					   CORBA_Environment * ev);
   CORBA_boolean GNOME_PanelSpot__get_send_draw(GNOME_PanelSpot _obj,
						CORBA_Environment * ev);
   void GNOME_PanelSpot__set_send_draw(GNOME_PanelSpot _obj,
				       const CORBA_boolean value,
				       CORBA_Environment * ev);
   GNOME_Panel_RgbImage *GNOME_PanelSpot__get_rgb_background(GNOME_PanelSpot
							     _obj,
							     CORBA_Environment
							     * ev);
   void GNOME_PanelSpot_register_us(GNOME_PanelSpot _obj,
				    CORBA_Environment * ev);
   void GNOME_PanelSpot_unregister_us(GNOME_PanelSpot _obj,
				      CORBA_Environment * ev);
   void GNOME_PanelSpot_abort_load(GNOME_PanelSpot _obj,
				   CORBA_Environment * ev);
   void GNOME_PanelSpot_show_menu(GNOME_PanelSpot _obj,
				  CORBA_Environment * ev);
   void GNOME_PanelSpot_drag_start(GNOME_PanelSpot _obj,
				   CORBA_Environment * ev);
   void GNOME_PanelSpot_drag_stop(GNOME_PanelSpot _obj,
				  CORBA_Environment * ev);
   void GNOME_PanelSpot_add_callback(GNOME_PanelSpot _obj,
				     const CORBA_char * callback_name,
				     const CORBA_char * stock_item,
				     const CORBA_char * menuitem_text,
				     CORBA_Environment * ev);
   void GNOME_PanelSpot_remove_callback(GNOME_PanelSpot _obj,
					const CORBA_char * callback_name,
					CORBA_Environment * ev);
   void GNOME_PanelSpot_callback_set_sensitive(GNOME_PanelSpot _obj,
					       const CORBA_char *
					       callback_name,
					       const CORBA_boolean sensitive,
					       CORBA_Environment * ev);
   void GNOME_PanelSpot_sync_config(GNOME_PanelSpot _obj,
				    CORBA_Environment * ev);
   void GNOME_PanelSpot_done_session_save(GNOME_PanelSpot _obj,
					  const CORBA_boolean ret,
					  const CORBA_unsigned_long cookie,
					  CORBA_Environment * ev);
   void GNOME_Applet_change_orient(GNOME_Applet _obj,
				   const GNOME_Panel_OrientType orient,
				   CORBA_Environment * ev);
   void GNOME_Applet_do_callback(GNOME_Applet _obj,
				 const CORBA_char * callback_name,
				 CORBA_Environment * ev);
   CORBA_boolean GNOME_Applet_session_save(GNOME_Applet _obj,
					   const CORBA_char * cfgpath,
					   const CORBA_char * global_cfgpath,
					   CORBA_Environment * ev);
   void GNOME_Applet_back_change(GNOME_Applet _obj,
				 const GNOME_Panel_BackInfoType * backing,
				 CORBA_Environment * ev);
   void GNOME_Applet_set_tooltips_state(GNOME_Applet _obj,
					const CORBA_boolean enabled,
					CORBA_Environment * ev);
   CORBA_char *GNOME_Applet__get_goad_id(GNOME_Applet _obj,
					 CORBA_Environment * ev);
   void GNOME_Applet_draw(GNOME_Applet _obj, CORBA_Environment * ev);
   void GNOME_Applet_save_session(GNOME_Applet _obj,
				  const CORBA_char * cfgpath,
				  const CORBA_char * global_cfgpath,
				  const CORBA_unsigned_long cookie,
				  CORBA_Environment * ev);
   void GNOME_Applet_change_size(GNOME_Applet _obj, const CORBA_short size,
				 CORBA_Environment * ev);
   void GNOME_Applet_change_position(GNOME_Applet _obj, const CORBA_short x,
				     const CORBA_short y,
				     CORBA_Environment * ev);
   void GNOME_Applet_freeze_changes(GNOME_Applet _obj,
				    CORBA_Environment * ev);
   void GNOME_Applet_thaw_changes(GNOME_Applet _obj, CORBA_Environment * ev);
   void GNOME_StatusSpot_remove(GNOME_StatusSpot _obj,
				CORBA_Environment * ev);

   void _ORBIT_skel_GNOME_Panel_add_applet(POA_GNOME_Panel * _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   GNOME_PanelSpot(*_impl_add_applet)
					   (PortableServer_Servant _servant,
					    const GNOME_Applet panel_applet,
					    const CORBA_char * goad_id,
					    CORBA_char ** cfgpath,
					    CORBA_char ** globcfgpath,
					    CORBA_unsigned_long * winid,
					    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel_add_applet_full(POA_GNOME_Panel *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						GNOME_PanelSpot
						(*_impl_add_applet_full)
						(PortableServer_Servant
						 _servant,
						 const GNOME_Applet
						 panel_applet,
						 const CORBA_char * goad_id,
						 const CORBA_short panel,
						 const CORBA_short pos,
						 CORBA_char ** cfgpath,
						 CORBA_char ** globcfgpath,
						 CORBA_unsigned_long * winid,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel_quit(POA_GNOME_Panel * _ORBIT_servant,
				     GIOPRecvBuffer * _ORBIT_recv_buffer,
				     CORBA_Environment * ev,
				     void (*_impl_quit)
				     (PortableServer_Servant _servant,
				      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel__get_in_drag(POA_GNOME_Panel * _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_boolean
					     (*_impl__get_in_drag)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel_add_status(POA_GNOME_Panel * _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   GNOME_StatusSpot(*_impl_add_status)
					   (PortableServer_Servant _servant,
					    CORBA_unsigned_long * winid,
					    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel_notice_config_changes(POA_GNOME_Panel *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl_notice_config_changes)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_GNOME_Panel2_suggest_sync(POA_GNOME_Panel2 *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_suggest_sync)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel2_add_launcher(POA_GNOME_Panel2 *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_add_launcher)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char *
					       launcher_desktop,
					       const CORBA_short panel,
					       const CORBA_short pos,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel2_ask_about_launcher(POA_GNOME_Panel2 *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_ask_about_launcher)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char *
						     exec_string,
						     const CORBA_short panel,
						     const CORBA_short pos,
						     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel2_add_launcher_from_info(POA_GNOME_Panel2 *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							void
							(*_impl_add_launcher_from_info)
							(PortableServer_Servant
							 _servant,
							 const CORBA_char *
							 name,
							 const CORBA_char *
							 comment,
							 const CORBA_char *
							 exec,
							 const CORBA_char *
							 icon,
							 const CORBA_short
							 panel,
							 const CORBA_short
							 pos,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_GNOME_Panel2_add_launcher_from_info_url(POA_GNOME_Panel2 *
							    _ORBIT_servant,
							    GIOPRecvBuffer *
							    _ORBIT_recv_buffer,
							    CORBA_Environment
							    * ev,
							    void
							    (*_impl_add_launcher_from_info_url)
							    (PortableServer_Servant
							     _servant,
							     const CORBA_char
							     * name,
							     const CORBA_char
							     * comment,
							     const CORBA_char
							     * url,
							     const CORBA_char
							     * icon,
							     const CORBA_short
							     panel,
							     const CORBA_short
							     pos,
							     CORBA_Environment
							     * ev));
   void _ORBIT_skel_GNOME_Panel2_run_box(POA_GNOME_Panel2 * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_run_box)
					 (PortableServer_Servant _servant,
					  const CORBA_char * initial_string,
					  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel2_main_menu(POA_GNOME_Panel2 * _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_main_menu)
					   (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Panel2_launch_an_applet(POA_GNOME_Panel2 *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void
						  (*_impl_launch_an_applet)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * goad_id,
						   const
						   GNOME_PanelAppletBooter
						   booter,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_PanelAppletBooter_add_applet
      (POA_GNOME_PanelAppletBooter * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       GNOME_PanelSpot(*_impl_add_applet) (PortableServer_Servant _servant,
					   const GNOME_Applet panel_applet,
					   const CORBA_char * goad_id,
					   CORBA_char ** cfgpath,
					   CORBA_char ** globcfgpath,
					   CORBA_unsigned_long * winid,
					   CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_tooltip(POA_GNOME_PanelSpot *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 CORBA_char *
						 (*_impl__get_tooltip)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__set_tooltip(POA_GNOME_PanelSpot *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl__set_tooltip)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char * value,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_parent_panel(POA_GNOME_PanelSpot *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_short
						      (*_impl__get_parent_panel)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_spot_pos(POA_GNOME_PanelSpot *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_short
						  (*_impl__get_spot_pos)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_parent_orient(POA_GNOME_PanelSpot *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       GNOME_Panel_OrientType
						       (*_impl__get_parent_orient)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_parent_size(POA_GNOME_PanelSpot *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_short
						     (*_impl__get_parent_size)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_free_space(POA_GNOME_PanelSpot *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_short
						    (*_impl__get_free_space)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_send_position(POA_GNOME_PanelSpot *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       CORBA_boolean
						       (*_impl__get_send_position)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_GNOME_PanelSpot__set_send_position(POA_GNOME_PanelSpot *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl__set_send_position)
						       (PortableServer_Servant
							_servant,
							const CORBA_boolean
							value,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_send_draw(POA_GNOME_PanelSpot *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_boolean
						   (*_impl__get_send_draw)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__set_send_draw(POA_GNOME_PanelSpot *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void
						   (*_impl__set_send_draw)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_boolean value,
						    CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot__get_rgb_background(POA_GNOME_PanelSpot *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							GNOME_Panel_RgbImage *
							(*_impl__get_rgb_background)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_GNOME_PanelSpot_register_us(POA_GNOME_PanelSpot *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_register_us)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_unregister_us(POA_GNOME_PanelSpot *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_unregister_us)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_abort_load(POA_GNOME_PanelSpot *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_abort_load)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_show_menu(POA_GNOME_PanelSpot *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_show_menu)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_drag_start(POA_GNOME_PanelSpot *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_drag_start)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_drag_stop(POA_GNOME_PanelSpot *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_drag_stop)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_add_callback(POA_GNOME_PanelSpot *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_add_callback)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char *
						  callback_name,
						  const CORBA_char *
						  stock_item,
						  const CORBA_char *
						  menuitem_text,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_remove_callback(POA_GNOME_PanelSpot *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_remove_callback)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char *
						     callback_name,
						     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_callback_set_sensitive(POA_GNOME_PanelSpot
							   * _ORBIT_servant,
							   GIOPRecvBuffer *
							   _ORBIT_recv_buffer,
							   CORBA_Environment *
							   ev,
							   void
							   (*_impl_callback_set_sensitive)
							   (PortableServer_Servant
							    _servant,
							    const CORBA_char *
							    callback_name,
							    const
							    CORBA_boolean
							    sensitive,
							    CORBA_Environment
							    * ev));
   void _ORBIT_skel_GNOME_PanelSpot_sync_config(POA_GNOME_PanelSpot *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_sync_config)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_PanelSpot_done_session_save(POA_GNOME_PanelSpot *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl_done_session_save)
						      (PortableServer_Servant
						       _servant,
						       const CORBA_boolean
						       ret,
						       const
						       CORBA_unsigned_long
						       cookie,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_GNOME_Applet_change_orient(POA_GNOME_Applet *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_change_orient)
					       (PortableServer_Servant
						_servant,
						const GNOME_Panel_OrientType
						orient,
						CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_do_callback(POA_GNOME_Applet *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_do_callback)
					     (PortableServer_Servant _servant,
					      const CORBA_char *
					      callback_name,
					      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_session_save(POA_GNOME_Applet *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_boolean
					      (*_impl_session_save)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * cfgpath,
					       const CORBA_char *
					       global_cfgpath,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_back_change(POA_GNOME_Applet *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_back_change)
					     (PortableServer_Servant _servant,
					      const GNOME_Panel_BackInfoType *
					      backing,
					      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_set_tooltips_state(POA_GNOME_Applet *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_set_tooltips_state)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_boolean
						     enabled,
						     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet__get_goad_id(POA_GNOME_Applet *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_char *
					      (*_impl__get_goad_id)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_draw(POA_GNOME_Applet * _ORBIT_servant,
				      GIOPRecvBuffer * _ORBIT_recv_buffer,
				      CORBA_Environment * ev,
				      void (*_impl_draw)
				      (PortableServer_Servant _servant,
				       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_save_session(POA_GNOME_Applet *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_save_session)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * cfgpath,
					       const CORBA_char *
					       global_cfgpath,
					       const CORBA_unsigned_long
					       cookie,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_change_size(POA_GNOME_Applet *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_change_size)
					     (PortableServer_Servant _servant,
					      const CORBA_short size,
					      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_change_position(POA_GNOME_Applet *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_change_position)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_short x,
						  const CORBA_short y,
						  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_freeze_changes(POA_GNOME_Applet *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_freeze_changes)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_Applet_thaw_changes(POA_GNOME_Applet *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_thaw_changes)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_StatusSpot_remove(POA_GNOME_StatusSpot *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    void (*_impl_remove)
					    (PortableServer_Servant _servant,
					     CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
