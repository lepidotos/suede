<refentry id="libart-Svp-rendering">
<refmeta>
<refentrytitle>Svp rendering</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBART Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Svp rendering</refname><refpurpose>How to actually render SVPs into pixel buffers.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        <link linkend="art-rgb-fill-run">art_rgb_fill_run</link>                (<link linkend="art-u8">art_u8</link> *buf,
                                             <link linkend="art-u8">art_u8</link> r,
                                             <link linkend="art-u8">art_u8</link> g,
                                             <link linkend="art-u8">art_u8</link> b,
                                             int n);
void        <link linkend="art-rgb-run-alpha">art_rgb_run_alpha</link>               (<link linkend="art-u8">art_u8</link> *buf,
                                             <link linkend="art-u8">art_u8</link> r,
                                             <link linkend="art-u8">art_u8</link> g,
                                             <link linkend="art-u8">art_u8</link> b,
                                             int alpha,
                                             int n);
void        <link linkend="art-rgb-svp-aa">art_rgb_svp_aa</link>                  (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u32">art_u32</link> fg_color,
                                             <link linkend="art-u32">art_u32</link> bg_color,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride,
                                             <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> *alphagamma);
void        <link linkend="art-rgb-svp-alpha">art_rgb_svp_alpha</link>               (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u32">art_u32</link> rgba,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride,
                                             <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> *alphagamma);
void        <link linkend="art-gray-svp-aa">art_gray_svp_aa</link>                 (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride);
struct      <link linkend="ArtSVPRenderAAStep">ArtSVPRenderAAStep</link>;
void        <link linkend="art-svp-render-aa">art_svp_render_aa</link>               (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             void (*callback) (void *callback_data,int y,int start,ArtSVPRenderAAStep *steps, int n_steps),
                                             void *callback_data);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
Once SVPs have been generated from <literal>ArtVPaths</literal> and <literal>ArtBPaths</literal>, you need to do
the actual rasterization into pixel buffers. This step can be done with three
routines: <link linkend="art-rgb-svp-aa">art_rgb_svp_aa</link>, 
<link linkend="art-rgb-svp-alpha">art_rgb_svp_alpha</link> or
<link linkend="art-gray-svp-aa">art_gray_svp_aa</link>. There also exist
a low-level API for rasterizing, <link linkend="art-svp-render-aa">art_svp_render_aa</link>.
For conveniance, libart also provides some simple functions to fill pixel buffers with 
background colors such as <link linkend="art-rgb-fill-run">art_rgb_fill_run</link> and
<link linkend="art-rgb-run-alpha">art_rgb_run_alpha</link>
</para>

<para>
Each of the three high-level function used for rendering represents pixel buffers by
two parameters: a rowstride and pointer to an array of art_u8. The exact semantics of these
parameters depend of course on the nature pixel buffer (namely, the semantics are slightly
different for B&amp;W and color pixel buffers) but the spirit is the same. An image is represented
by the list of the values of each of its pixels. Libart manipulates only images where each
such pixel value is coded on 8 bits (that is, a byte/octet): this does not harm libart's usefulness
since this is the most widely used format both in software and hardware. For example, a 256x256
B&amp;W image will use 256 * 256 = 65536 bytes and a color image will use 256 * 256 * 3 = 196608 bytes
(because in a color image, we code separatly the red, green and blue components of the image,
each on 8 bits).
</para>

<para>
It is a natural idea to store these pixels one after the other, building a pixel buffer which 
is represented by the art_u8 array (pixels are listed from left to right/top to bottom). Once you
know the kind of pixel you are using (either B&amp;W or color), all you need to know to parse
efficiently the buffer is to know the width of the original image (so that you can jump from line 
to line). It happens that people are used to represent this information with rowstrides. The
rowstride of our 256x256 B&amp;W image is 256: it is the number of bytes a row of the image needs to
be stored.
</para>

<para>
Code to use the three rendering functions can be found in the previous examples. The only thing you 
need to take care of when using them is to make sure the rendering area defined by (x0,y0,x1,y1) is 
smaller than the pixel buffer where the vector paths are to be rendered (otherwise, bad segfaults 
will happen).
</para>

<para>
Finally, users who want to do cool rendering (such as filling a vector path with a pattern or a gradient
instead of using a solid color should look into librsvg. librsvg is a library used by nautilus to render 
svg graphics which extends libart and provides a number of rendering functions using the low-level 
<link linkend="art-rgb-run-alpha">art_rgb_run_alpha</link> function. It should be noted that librsvg
contains code from the unstable branch of libart_lgpl which was backported to the stable libart
but not included in it because of binary compatibility.). Users could also write their own rendering 
callbacks with <link linkend="art-rgb-run-alpha">art_rgb_run_alpha</link> but doing so requires a lot of 
knowledge of the internals of libart: if you really want to do this, read the section
<link linkend="internals">Libart Internals</link>.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="art-rgb-fill-run">art_rgb_fill_run ()</title>
<programlisting>void        art_rgb_fill_run                (<link linkend="art-u8">art_u8</link> *buf,
                                             <link linkend="art-u8">art_u8</link> r,
                                             <link linkend="art-u8">art_u8</link> g,
                                             <link linkend="art-u8">art_u8</link> b,
                                             int n);</programlisting>
<para>
Fills a buffer with <parameter>n</parameter> copies of the (<parameter>r</parameter>, <parameter>g</parameter>, <parameter>b</parameter>) triple. Thus,
locations <parameter>buf</parameter> (inclusive) through <parameter>buf</parameter> + 3 * <parameter>n</parameter> (exclusive) are
written.
</para>
<para>
The implementation of this routine is very highly optimized.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> Buffer to fill.
</entry></row>
<row><entry align="right"><parameter>r</parameter>&nbsp;:</entry>
<entry> Red, range 0..255.
</entry></row>
<row><entry align="right"><parameter>g</parameter>&nbsp;:</entry>
<entry> Green, range 0..255.
</entry></row>
<row><entry align="right"><parameter>b</parameter>&nbsp;:</entry>
<entry> Blue, range 0..255.
</entry></row>
<row><entry align="right"><parameter>n</parameter>&nbsp;:</entry>
<entry> Number of RGB triples to fill.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-rgb-run-alpha">art_rgb_run_alpha ()</title>
<programlisting>void        art_rgb_run_alpha               (<link linkend="art-u8">art_u8</link> *buf,
                                             <link linkend="art-u8">art_u8</link> r,
                                             <link linkend="art-u8">art_u8</link> g,
                                             <link linkend="art-u8">art_u8</link> b,
                                             int alpha,
                                             int n);</programlisting>
<para>
Renders a sequential run of solid (<parameter>r</parameter>, <parameter>g</parameter>, <parameter>b</parameter>) color over <parameter>buf</parameter> with
opacity <parameter>alpha</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> Buffer for rendering.
</entry></row>
<row><entry align="right"><parameter>r</parameter>&nbsp;:</entry>
<entry> Red, range 0..255.
</entry></row>
<row><entry align="right"><parameter>g</parameter>&nbsp;:</entry>
<entry> Green, range 0..255.
</entry></row>
<row><entry align="right"><parameter>b</parameter>&nbsp;:</entry>
<entry> Blue, range 0..255.
</entry></row>
<row><entry align="right"><parameter>alpha</parameter>&nbsp;:</entry>
<entry> Alpha, range 0..256.
</entry></row>
<row><entry align="right"><parameter>n</parameter>&nbsp;:</entry>
<entry> Number of RGB triples to render.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-rgb-svp-aa">art_rgb_svp_aa ()</title>
<programlisting>void        art_rgb_svp_aa                  (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u32">art_u32</link> fg_color,
                                             <link linkend="art-u32">art_u32</link> bg_color,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride,
                                             <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> *alphagamma);</programlisting>
<para>
Renders the shape specified with <parameter>svp</parameter> into the <parameter>buf</parameter> RGB buffer.
<parameter>x1</parameter> - <parameter>x0</parameter> specifies the width, and <parameter>y1</parameter> - <parameter>y0</parameter> specifies the height,
of the rectangle rendered. The new pixels are stored starting at
the first byte of <parameter>buf</parameter>. Thus, the <parameter>x0</parameter> and <parameter>y0</parameter> parameters specify
an offset within <parameter>svp</parameter>, and may be tweaked as a way of doing
integer-pixel translations without fiddling with <parameter>svp</parameter> itself.
</para>
<para>
The <parameter>fg_color</parameter> and <parameter>bg_color</parameter> arguments specify the opaque colors to
be used for rendering. For pixels of entirely 0 winding-number,
<parameter>bg_color</parameter> is used. For pixels of entirely 1 winding number,
<parameter>fg_color</parameter> is used. In between, the color is interpolated based on
the fraction of the pixel with a winding number of 1. If
<parameter>alphagamma</parameter> is NULL, then linear interpolation (in pixel counts) is
the default. Otherwise, the interpolation is as specified by
<parameter>alphagamma</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp</parameter>&nbsp;:</entry>
<entry> The source sorted vector path.
</entry></row>
<row><entry align="right"><parameter>x0</parameter>&nbsp;:</entry>
<entry> Left coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y0</parameter>&nbsp;:</entry>
<entry> Top coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry> Right coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry> Bottom coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>fg_color</parameter>&nbsp;:</entry>
<entry> Foreground color in 0xRRGGBB format.
</entry></row>
<row><entry align="right"><parameter>bg_color</parameter>&nbsp;:</entry>
<entry> Background color in 0xRRGGBB format.
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> Destination RGB buffer.
</entry></row>
<row><entry align="right"><parameter>rowstride</parameter>&nbsp;:</entry>
<entry> Rowstride of <parameter>buf</parameter> buffer.
</entry></row>
<row><entry align="right"><parameter>alphagamma</parameter>&nbsp;:</entry>
<entry> <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> for gamma-correcting the rendering.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-rgb-svp-alpha">art_rgb_svp_alpha ()</title>
<programlisting>void        art_rgb_svp_alpha               (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u32">art_u32</link> rgba,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride,
                                             <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> *alphagamma);</programlisting>
<para>
Renders the shape specified with <parameter>svp</parameter> over the <parameter>buf</parameter> RGB buffer.
<parameter>x1</parameter> - <parameter>x0</parameter> specifies the width, and <parameter>y1</parameter> - <parameter>y0</parameter> specifies the height,
of the rectangle rendered. The new pixels are stored starting at
the first byte of <parameter>buf</parameter>. Thus, the <parameter>x0</parameter> and <parameter>y0</parameter> parameters specify
an offset within <parameter>svp</parameter>, and may be tweaked as a way of doing
integer-pixel translations without fiddling with <parameter>svp</parameter> itself.
</para>
<para>
The <parameter>rgba</parameter> argument specifies the color for the rendering. Pixels of
entirely 0 winding number are left untouched. Pixels of entirely
1 winding number have the color <parameter>rgba</parameter> composited over them (ie,
are replaced by the red, green, blue components of <parameter>rgba</parameter> if the alpha
component is 0xff). Pixels of intermediate coverage are interpolated
according to the rule in <parameter>alphagamma</parameter>, or default to linear if
<parameter>alphagamma</parameter> is NULL.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp</parameter>&nbsp;:</entry>
<entry> The source sorted vector path.
</entry></row>
<row><entry align="right"><parameter>x0</parameter>&nbsp;:</entry>
<entry> Left coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y0</parameter>&nbsp;:</entry>
<entry> Top coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry> Right coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry> Bottom coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>rgba</parameter>&nbsp;:</entry>
<entry> Color in 0xRRGGBBAA format.
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> Destination RGB buffer.
</entry></row>
<row><entry align="right"><parameter>rowstride</parameter>&nbsp;:</entry>
<entry> Rowstride of <parameter>buf</parameter> buffer.
</entry></row>
<row><entry align="right"><parameter>alphagamma</parameter>&nbsp;:</entry>
<entry> <link linkend="ArtAlphaGamma">ArtAlphaGamma</link> for gamma-correcting the compositing.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-gray-svp-aa">art_gray_svp_aa ()</title>
<programlisting>void        art_gray_svp_aa                 (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             <link linkend="art-u8">art_u8</link> *buf,
                                             int rowstride);</programlisting>
<para>
Each pixel gets a value proportional to the area within the pixel
overlapping the (filled) SVP. Pixel (x, y) is stored at:
</para>
<para>
   <parameter>buf</parameter>[(y - * <parameter>y0</parameter>) * <parameter>rowstride</parameter> + (x - <parameter>x0</parameter>)]
</para>
<para>
All pixels <parameter>x0</parameter> &lt;= x &lt; <parameter>x1</parameter>, <parameter>y0</parameter> &lt;= y &lt; <parameter>y1</parameter> are generated. A
stored value of zero is no coverage, and a value of 255 is full
coverage. The area within the pixel (x, y) is the region covered
by [x..x+1] and [y..y+1].</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp</parameter>&nbsp;:</entry>
<entry> The SVP to render.
</entry></row>
<row><entry align="right"><parameter>x0</parameter>&nbsp;:</entry>
<entry> The view window's left coord.
</entry></row>
<row><entry align="right"><parameter>y0</parameter>&nbsp;:</entry>
<entry> The view window's top coord.
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry> The view window's right coord.
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry> The view window's bottom coord.
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> The buffer where the bytemap is stored.
</entry></row>
<row><entry align="right"><parameter>rowstride</parameter>&nbsp;:</entry>
<entry> the rowstride for <parameter>buf</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="ArtSVPRenderAAStep">struct ArtSVPRenderAAStep</title>
<programlisting>struct ArtSVPRenderAAStep {
  int x;
  int delta; /* stored with 16 fractional bits */
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="art-svp-render-aa">art_svp_render_aa ()</title>
<programlisting>void        art_svp_render_aa               (const <link linkend="ArtSVP">ArtSVP</link> *svp,
                                             int x0,
                                             int y0,
                                             int x1,
                                             int y1,
                                             void (*callback) (void *callback_data,int y,int start,ArtSVPRenderAAStep *steps, int n_steps),
                                             void *callback_data);</programlisting>
<para>
Renders the sorted vector path in the given rectangle, antialiased.
</para>
<para>
This interface uses a callback for the actual pixel rendering. The
callback is called <parameter>y1</parameter> - <parameter>y0</parameter> times (once for each scan line). The y
coordinate is given as an argument for convenience (it could be
stored in the callback's private data and incremented on each
call).
</para>
<para>
The rendered polygon is represented in a semi-runlength format: a
start value and a sequence of "steps". Each step has an x
coordinate and a value delta. The resulting value at position x is
equal to the sum of the start value and all step delta values for
which the step x coordinate is less than or equal to x. An
efficient algorithm will traverse the steps left to right, keeping
a running sum.
</para>
<para>
All x coordinates in the steps are guaranteed to be <parameter>x0</parameter> &lt;= x &lt; <parameter>x1</parameter>.
(This guarantee is a change from the gfonted vpaar renderer from
which this routine is derived, and is designed to simplify the
callback).
</para>
<para>
The value 0x8000 represents 0% coverage by the polygon, while
0xff8000 represents 100% coverage. This format is designed so that
&gt;&gt; 16 results in a standard 0x00..0xff value range, with nice
rounding.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp</parameter>&nbsp;:</entry>
<entry> The <link linkend="ArtSVP">ArtSVP</link> to render.
</entry></row>
<row><entry align="right"><parameter>x0</parameter>&nbsp;:</entry>
<entry> Left coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y0</parameter>&nbsp;:</entry>
<entry> Top coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>x1</parameter>&nbsp;:</entry>
<entry> Right coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>y1</parameter>&nbsp;:</entry>
<entry> Bottom coordinate of destination rectangle.
</entry></row>
<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
<entry> The callback which actually paints the pixels.
</entry></row>
<row><entry align="right"><parameter>callback_data</parameter>&nbsp;:</entry>
<entry> Private data for <parameter>callback</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
