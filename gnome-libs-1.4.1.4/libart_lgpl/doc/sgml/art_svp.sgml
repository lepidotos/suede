<refentry id="libart-SVPs">
<refmeta>
<refentrytitle>SVPs</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBART Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SVPs</refname><refpurpose>Manipulating SVPs</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="ArtVpath">ArtVpath</link>*   <link linkend="art-vpath-from-svp">art_vpath_from_svp</link>              (const <link linkend="ArtSVP">ArtSVP</link> *svp);
<link linkend="ArtSVP">ArtSVP</link>*     <link linkend="art-svp-from-vpath">art_svp_from_vpath</link>              (<link linkend="ArtVpath">ArtVpath</link> *vpath);
<link linkend="ArtSVP">ArtSVP</link>*     <link linkend="art-svp-union">art_svp_union</link>                   (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);
<link linkend="ArtSVP">ArtSVP</link>*     <link linkend="art-svp-intersect">art_svp_intersect</link>               (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);
<link linkend="ArtSVP">ArtSVP</link>*     <link linkend="art-svp-diff">art_svp_diff</link>                    (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
SVPs cannot be created in many different ways: 
<link linkend="art-svp-from-vpath">art_svp_from_vpath</link>
and <link linkend="art-vpath-from-svp">art_vpath_from_svp</link>
can be used to generate SVPs from a Vpath and to generate
VPaths from SVPs.
</para>

<para>
Once SVPs have been created, it is possible to manipulate them
and apply a number of interesting operations on them. Most notably, 
it is possible to do the union of two SVPs with 
<link linkend="art-svp-union">art_svp_union</link> (Given two SVPs, 
the union of these two SVPs is an SVP representing the area obtained by 
the concatenation of the underlying areas of the two original SVPs).
<link linkend="art-svp-intersect">art_svp_intersect</link> calculates the
intersection of two SVPs: the resulting SVPs contain points which were 
in the two original SVPs.
Finally, <link linkend="art-svp-diff">art_svp_diff</link> calculates the 
difference of two SVPs: the resulting SVPs contains all the points which 
were in only one of the original SVP.
These operations are sumamrized below:
	<figure>
	  <title>Operations on SVPs</title>
	  <graphic fileref="art-svp-ops.png" scale="50"></graphic>
	</figure>
</para>

<para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="art-vpath-from-svp">art_vpath_from_svp ()</title>
<programlisting><link linkend="ArtVpath">ArtVpath</link>*   art_vpath_from_svp              (const <link linkend="ArtSVP">ArtSVP</link> *svp);</programlisting>
<para>
Converts the sorted vector path <parameter>svp</parameter> into standard vpath form.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp</parameter>&nbsp;:</entry>
<entry> Original <link linkend="ArtSVP">ArtSVP</link>.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the newly allocated vpath.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-svp-from-vpath">art_svp_from_vpath ()</title>
<programlisting><link linkend="ArtSVP">ArtSVP</link>*     art_svp_from_vpath              (<link linkend="ArtVpath">ArtVpath</link> *vpath);</programlisting>
<para>
Converts a vector path into sorted vector path form. The svp form is
more efficient for rendering and other vector operations.
</para>
<para>
Basically, the implementation is to traverse the vector path,
generating a new segment for each "run" of points in the vector
path with monotonically increasing Y values. All the resulting
values are then sorted.
</para>
<para>
Note: I'm not sure that the sorting rule is correct with respect
to numerical stability issues.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>vpath</parameter>&nbsp;:</entry>
<entry> <link linkend="ArtVPath">ArtVPath</link> to convert.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Resulting sorted vector path.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-svp-union">art_svp_union ()</title>
<programlisting><link linkend="ArtSVP">ArtSVP</link>*     art_svp_union                   (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);</programlisting>
<para>
Computes the union of the two argument svp's. Given two svp's with
winding numbers of 0 and 1 everywhere, the resulting winding number
will be 1 where either (or both) of the argument svp's has a
winding number 1, 0 otherwise. The result is newly allocated.
</para>
<para>
Currently, this routine has accuracy problems pending the
implementation of the new intersector.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp1</parameter>&nbsp;:</entry>
<entry> One sorted vector path.
</entry></row>
<row><entry align="right"><parameter>svp2</parameter>&nbsp;:</entry>
<entry> The other sorted vector path.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The union of <parameter>svp1</parameter> and <parameter>svp2</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-svp-intersect">art_svp_intersect ()</title>
<programlisting><link linkend="ArtSVP">ArtSVP</link>*     art_svp_intersect               (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);</programlisting>
<para>
Computes the intersection of the two argument svp's. Given two
svp's with winding numbers of 0 and 1 everywhere, the resulting
winding number will be 1 where both of the argument svp's has a
winding number 1, 0 otherwise. The result is newly allocated.
</para>
<para>
Currently, this routine has accuracy problems pending the
implementation of the new intersector.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp1</parameter>&nbsp;:</entry>
<entry> One sorted vector path.
</entry></row>
<row><entry align="right"><parameter>svp2</parameter>&nbsp;:</entry>
<entry> The other sorted vector path.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The intersection of <parameter>svp1</parameter> and <parameter>svp2</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="art-svp-diff">art_svp_diff ()</title>
<programlisting><link linkend="ArtSVP">ArtSVP</link>*     art_svp_diff                    (const <link linkend="ArtSVP">ArtSVP</link> *svp1,
                                             const <link linkend="ArtSVP">ArtSVP</link> *svp2);</programlisting>
<para>
Computes the symmetric of the two argument svp's. Given two svp's
with winding numbers of 0 and 1 everywhere, the resulting winding
number will be 1 where either, but not both, of the argument svp's
has a winding number 1, 0 otherwise. The result is newly allocated.
</para>
<para>
Currently, this routine has accuracy problems pending the
implementation of the new intersector.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>svp1</parameter>&nbsp;:</entry>
<entry> One sorted vector path.
</entry></row>
<row><entry align="right"><parameter>svp2</parameter>&nbsp;:</entry>
<entry> The other sorted vector path.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The symmetric difference of <parameter>svp1</parameter> and <parameter>svp2</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
