<refentry id="gnomeui-gnome-winhints">
<refmeta>
<refentrytitle>gnome-winhints</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-winhints</refname><refpurpose>
Manipulate GNOME-specific window manager hints.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;gnome.h&gt;


#define     <link linkend="XA-WIN-PROTOCOLS-CAPS">XA_WIN_PROTOCOLS</link>
#define     <link linkend="XA-WIN-ICONS-CAPS">XA_WIN_ICONS</link>
#define     <link linkend="XA-WIN-WORKSPACE-CAPS">XA_WIN_WORKSPACE</link>
#define     <link linkend="XA-WIN-WORKSPACE-COUNT-CAPS">XA_WIN_WORKSPACE_COUNT</link>
#define     <link linkend="XA-WIN-WORKSPACE-NAMES-CAPS">XA_WIN_WORKSPACE_NAMES</link>
#define     <link linkend="XA-WIN-LAYER-CAPS">XA_WIN_LAYER</link>
#define     <link linkend="XA-WIN-STATE-CAPS">XA_WIN_STATE</link>
#define     <link linkend="XA-WIN-HINTS-CAPS">XA_WIN_HINTS</link>
#define     <link linkend="XA-WIN-WORKAREA-CAPS">XA_WIN_WORKAREA</link>
#define     <link linkend="XA-WIN-CLIENT-LIST-CAPS">XA_WIN_CLIENT_LIST</link>
#define     <link linkend="XA-WIN-APP-STATE-CAPS">XA_WIN_APP_STATE</link>
#define     <link linkend="XA-WIN-EXPANDED-SIZE-CAPS">XA_WIN_EXPANDED_SIZE</link>
#define     <link linkend="XA-WIN-CLIENT-MOVING-CAPS">XA_WIN_CLIENT_MOVING</link>
#define     <link linkend="XA-WIN-SUPPORTING-WM-CHECK-CAPS">XA_WIN_SUPPORTING_WM_CHECK</link>
enum        <link linkend="GnomeWinLayer">GnomeWinLayer</link>;
enum        <link linkend="GnomeWinState">GnomeWinState</link>;
enum        <link linkend="GnomeWinHints">GnomeWinHints</link>;
enum        <link linkend="GnomeWinAppState">GnomeWinAppState</link>;
void        <link linkend="gnome-win-hints-init">gnome_win_hints_init</link>            (void);
void        <link linkend="gnome-win-hints-set-layer">gnome_win_hints_set_layer</link>       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinLayer">GnomeWinLayer</link> layer);
<link linkend="GnomeWinLayer">GnomeWinLayer</link> <link linkend="gnome-win-hints-get-layer">gnome_win_hints_get_layer</link>     (<link linkend="GtkWidget">GtkWidget</link> *window);
void        <link linkend="gnome-win-hints-set-state">gnome_win_hints_set_state</link>       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinState">GnomeWinState</link> state);
<link linkend="GnomeWinState">GnomeWinState</link> <link linkend="gnome-win-hints-get-state">gnome_win_hints_get_state</link>     (<link linkend="GtkWidget">GtkWidget</link> *window);
void        <link linkend="gnome-win-hints-set-hints">gnome_win_hints_set_hints</link>       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinHints">GnomeWinHints</link> skip);
<link linkend="GnomeWinHints">GnomeWinHints</link> <link linkend="gnome-win-hints-get-hints">gnome_win_hints_get_hints</link>     (<link linkend="GtkWidget">GtkWidget</link> *window);
void        <link linkend="gnome-win-hints-set-workspace">gnome_win_hints_set_workspace</link>   (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> workspace);
<link linkend="gint">gint</link>        <link linkend="gnome-win-hints-get-workspace">gnome_win_hints_get_workspace</link>   (<link linkend="GtkWidget">GtkWidget</link> *window);
void        <link linkend="gnome-win-hints-set-current-workspace">gnome_win_hints_set_current_workspace</link>
                                            (<link linkend="gint">gint</link> workspace);
<link linkend="gint">gint</link>        <link linkend="gnome-win-hints-get-current-workspace">gnome_win_hints_get_current_workspace</link>
                                            (void);
<link linkend="GList">GList</link>*      <link linkend="gnome-win-hints-get-workspace-names">gnome_win_hints_get_workspace_names</link>
                                            (void);
<link linkend="gint">gint</link>        <link linkend="gnome-win-hints-get-workspace-count">gnome_win_hints_get_workspace_count</link>
                                            (void);
void        <link linkend="gnome-win-hints-set-expanded-size">gnome_win_hints_set_expanded_size</link>
                                            (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-win-hints-get-expanded-size">gnome_win_hints_get_expanded_size</link>
                                            (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height);
void        <link linkend="gnome-win-hints-set-moving">gnome_win_hints_set_moving</link>      (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gboolean">gboolean</link> moving);
void        <link linkend="gnome-win-hints-set-app-state">gnome_win_hints_set_app_state</link>   (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinAppState">GnomeWinAppState</link> state);
<link linkend="GnomeWinAppState">GnomeWinAppState</link> <link linkend="gnome-win-hints-get-app-state">gnome_win_hints_get_app_state</link>
                                            (<link linkend="GtkWidget">GtkWidget</link> *window);
<link linkend="gboolean">gboolean</link>    <link linkend="gnome-win-hints-wm-exists">gnome_win_hints_wm_exists</link>       (void);
<link linkend="GList">GList</link>*      <link linkend="gnome-win-hints-get-client-window-ids">gnome_win_hints_get_client_window_ids</link>
                                            (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="XA-WIN-PROTOCOLS-CAPS">XA_WIN_PROTOCOLS</title>
<programlisting>#define XA_WIN_PROTOCOLS           "_WIN_PROTOCOLS"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-ICONS-CAPS">XA_WIN_ICONS</title>
<programlisting>#define XA_WIN_ICONS               "_WIN_ICONS"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-WORKSPACE-CAPS">XA_WIN_WORKSPACE</title>
<programlisting>#define XA_WIN_WORKSPACE           "_WIN_WORKSPACE"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-WORKSPACE-COUNT-CAPS">XA_WIN_WORKSPACE_COUNT</title>
<programlisting>#define XA_WIN_WORKSPACE_COUNT     "_WIN_WORKSPACE_COUNT"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-WORKSPACE-NAMES-CAPS">XA_WIN_WORKSPACE_NAMES</title>
<programlisting>#define XA_WIN_WORKSPACE_NAMES     "_WIN_WORKSPACE_NAMES"    
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-LAYER-CAPS">XA_WIN_LAYER</title>
<programlisting>#define XA_WIN_LAYER               "_WIN_LAYER"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-STATE-CAPS">XA_WIN_STATE</title>
<programlisting>#define XA_WIN_STATE               "_WIN_STATE"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-HINTS-CAPS">XA_WIN_HINTS</title>
<programlisting>#define XA_WIN_HINTS               "_WIN_HINTS"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-WORKAREA-CAPS">XA_WIN_WORKAREA</title>
<programlisting>#define XA_WIN_WORKAREA            "_WIN_WORKAREA"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-CLIENT-LIST-CAPS">XA_WIN_CLIENT_LIST</title>
<programlisting>#define XA_WIN_CLIENT_LIST         "_WIN_CLIENT_LIST"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-APP-STATE-CAPS">XA_WIN_APP_STATE</title>
<programlisting>#define XA_WIN_APP_STATE           "_WIN_APP_STATE"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-EXPANDED-SIZE-CAPS">XA_WIN_EXPANDED_SIZE</title>
<programlisting>#define XA_WIN_EXPANDED_SIZE       "_WIN_EXPANDED_SIZE"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-CLIENT-MOVING-CAPS">XA_WIN_CLIENT_MOVING</title>
<programlisting>#define XA_WIN_CLIENT_MOVING       "_WIN_CLIENT_MOVING"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XA-WIN-SUPPORTING-WM-CHECK-CAPS">XA_WIN_SUPPORTING_WM_CHECK</title>
<programlisting>#define XA_WIN_SUPPORTING_WM_CHECK "_WIN_SUPPORTING_WM_CHECK"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeWinLayer">enum GnomeWinLayer</title>
<programlisting>typedef enum
{
  WIN_LAYER_DESKTOP     = 0,
  WIN_LAYER_BELOW       = 2,
  WIN_LAYER_NORMAL      = 4,
  WIN_LAYER_ONTOP       = 6,
  WIN_LAYER_DOCK        = 8,
  WIN_LAYER_ABOVE_DOCK  = 10
} GnomeWinLayer;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeWinState">enum GnomeWinState</title>
<programlisting>typedef enum
{
  WIN_STATE_STICKY          = (1&lt;&lt;0), /* everyone knows sticky */
  WIN_STATE_MINIMIZED       = (1&lt;&lt;1), /* ??? */
  WIN_STATE_MAXIMIZED_VERT  = (1&lt;&lt;2), /* window in maximized V state */
  WIN_STATE_MAXIMIZED_HORIZ = (1&lt;&lt;3), /* window in maximized H state */
  WIN_STATE_HIDDEN          = (1&lt;&lt;4), /* not on taskbar but window visible */
  WIN_STATE_SHADED          = (1&lt;&lt;5), /* shaded (NeXT style) */
  WIN_STATE_HID_WORKSPACE   = (1&lt;&lt;6), /* not on current desktop */
  WIN_STATE_HID_TRANSIENT   = (1&lt;&lt;7), /* owner of transient is hidden */
  WIN_STATE_FIXED_POSITION  = (1&lt;&lt;8), /* window is fixed in position even */
  WIN_STATE_ARRANGE_IGNORE  = (1&lt;&lt;9)  /* ignore for auto arranging */
} GnomeWinState;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeWinHints">enum GnomeWinHints</title>
<programlisting>typedef enum
{
  WIN_HINTS_SKIP_FOCUS      = (1&lt;&lt;0), /* "alt-tab" skips this win */
  WIN_HINTS_SKIP_WINLIST    = (1&lt;&lt;1), /* not in win list */
  WIN_HINTS_SKIP_TASKBAR    = (1&lt;&lt;2), /* not on taskbar */
  WIN_HINTS_GROUP_TRANSIENT = (1&lt;&lt;3), /* ??????? */
  WIN_HINTS_FOCUS_ON_CLICK  = (1&lt;&lt;4), /* app only accepts focus when clicked */
  WIN_HINTS_DO_NOT_COVER    = (1&lt;&lt;5)  /* attempt to not cover this window */
} GnomeWinHints;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GnomeWinAppState">enum GnomeWinAppState</title>
<programlisting>typedef enum
{
  WIN_APP_STATE_NONE,
  WIN_APP_STATE_ACTIVE1,
  WIN_APP_STATE_ACTIVE2,
  WIN_APP_STATE_ERROR1,
  WIN_APP_STATE_ERROR2,
  WIN_APP_STATE_FATAL_ERROR1,
  WIN_APP_STATE_FATAL_ERROR2,
  WIN_APP_STATE_IDLE1,
  WIN_APP_STATE_IDLE2,
  WIN_APP_STATE_WAITING1,
  WIN_APP_STATE_WAITING2,
  WIN_APP_STATE_WORKING1,
  WIN_APP_STATE_WORKING2,
  WIN_APP_STATE_NEED_USER_INPUT1,
  WIN_APP_STATE_NEED_USER_INPUT2,
  WIN_APP_STATE_STRUGGLING1,
  WIN_APP_STATE_STRUGGLING2,
  WIN_APP_STATE_DISK_TRAFFIC1,
  WIN_APP_STATE_DISK_TRAFFIC2,
  WIN_APP_STATE_NETWORK_TRAFFIC1,
  WIN_APP_STATE_NETWORK_TRAFFIC2,
  WIN_APP_STATE_OVERLOADED1,
  WIN_APP_STATE_OVERLOADED2,
  WIN_APP_STATE_PERCENT000_1,
  WIN_APP_STATE_PERCENT000_2,
  WIN_APP_STATE_PERCENT010_1,
  WIN_APP_STATE_PERCENT010_2,
  WIN_APP_STATE_PERCENT020_1,
  WIN_APP_STATE_PERCENT020_2,
  WIN_APP_STATE_PERCENT030_1,
  WIN_APP_STATE_PERCENT030_2,
  WIN_APP_STATE_PERCENT040_1,
  WIN_APP_STATE_PERCENT040_2,
  WIN_APP_STATE_PERCENT050_1,
  WIN_APP_STATE_PERCENT050_2,
  WIN_APP_STATE_PERCENT060_1,
  WIN_APP_STATE_PERCENT060_2,
  WIN_APP_STATE_PERCENT070_1,
  WIN_APP_STATE_PERCENT070_2,
  WIN_APP_STATE_PERCENT080_1,
  WIN_APP_STATE_PERCENT080_2,
  WIN_APP_STATE_PERCENT090_1,
  WIN_APP_STATE_PERCENT090_2,
  WIN_APP_STATE_PERCENT100_1,
  WIN_APP_STATE_PERCENT100_2
} GnomeWinAppState;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-init">gnome_win_hints_init ()</title>
<programlisting>void        gnome_win_hints_init            (void);</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-layer">gnome_win_hints_set_layer ()</title>
<programlisting>void        gnome_win_hints_set_layer       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinLayer">GnomeWinLayer</link> layer);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>layer</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-layer">gnome_win_hints_get_layer ()</title>
<programlisting><link linkend="GnomeWinLayer">GnomeWinLayer</link> gnome_win_hints_get_layer     (<link linkend="GtkWidget">GtkWidget</link> *window);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-state">gnome_win_hints_set_state ()</title>
<programlisting>void        gnome_win_hints_set_state       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinState">GnomeWinState</link> state);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-state">gnome_win_hints_get_state ()</title>
<programlisting><link linkend="GnomeWinState">GnomeWinState</link> gnome_win_hints_get_state     (<link linkend="GtkWidget">GtkWidget</link> *window);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-hints">gnome_win_hints_set_hints ()</title>
<programlisting>void        gnome_win_hints_set_hints       (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinHints">GnomeWinHints</link> skip);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>skip</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-hints">gnome_win_hints_get_hints ()</title>
<programlisting><link linkend="GnomeWinHints">GnomeWinHints</link> gnome_win_hints_get_hints     (<link linkend="GtkWidget">GtkWidget</link> *window);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-workspace">gnome_win_hints_set_workspace ()</title>
<programlisting>void        gnome_win_hints_set_workspace   (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> workspace);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>workspace</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-workspace">gnome_win_hints_get_workspace ()</title>
<programlisting><link linkend="gint">gint</link>        gnome_win_hints_get_workspace   (<link linkend="GtkWidget">GtkWidget</link> *window);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-current-workspace">gnome_win_hints_set_current_workspace ()</title>
<programlisting>void        gnome_win_hints_set_current_workspace
                                            (<link linkend="gint">gint</link> workspace);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>workspace</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-current-workspace">gnome_win_hints_get_current_workspace ()</title>
<programlisting><link linkend="gint">gint</link>        gnome_win_hints_get_current_workspace
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-workspace-names">gnome_win_hints_get_workspace_names ()</title>
<programlisting><link linkend="GList">GList</link>*      gnome_win_hints_get_workspace_names
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-workspace-count">gnome_win_hints_get_workspace_count ()</title>
<programlisting><link linkend="gint">gint</link>        gnome_win_hints_get_workspace_count
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-expanded-size">gnome_win_hints_set_expanded_size ()</title>
<programlisting>void        gnome_win_hints_set_expanded_size
                                            (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="gint">gint</link> width,
                                             <link linkend="gint">gint</link> height);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-expanded-size">gnome_win_hints_get_expanded_size ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_win_hints_get_expanded_size
                                            (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-moving">gnome_win_hints_set_moving ()</title>
<programlisting>void        gnome_win_hints_set_moving      (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="gboolean">gboolean</link> moving);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>moving</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-set-app-state">gnome_win_hints_set_app_state ()</title>
<programlisting>void        gnome_win_hints_set_app_state   (<link linkend="GtkWidget">GtkWidget</link> *window,
                                             <link linkend="GnomeWinAppState">GnomeWinAppState</link> state);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-app-state">gnome_win_hints_get_app_state ()</title>
<programlisting><link linkend="GnomeWinAppState">GnomeWinAppState</link> gnome_win_hints_get_app_state
                                            (<link linkend="GtkWidget">GtkWidget</link> *window);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>window</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-wm-exists">gnome_win_hints_wm_exists ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    gnome_win_hints_wm_exists       (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-win-hints-get-client-window-ids">gnome_win_hints_get_client_window_ids ()</title>
<programlisting><link linkend="GList">GList</link>*      gnome_win_hints_get_client_window_ids
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
