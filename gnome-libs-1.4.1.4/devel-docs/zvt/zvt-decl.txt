<FUNCTION>
<NAME>login</NAME>
<RETURNS>void  </RETURNS>
struct utmp *ut
</FUNCTION>
<FUNCTION>
<NAME>login_tty</NAME>
<RETURNS>int  </RETURNS>
int fd
</FUNCTION>
<FUNCTION>
<NAME>logout</NAME>
<RETURNS>int  </RETURNS>
char *line
</FUNCTION>
<FUNCTION>
<NAME>logwtmp</NAME>
<RETURNS>void  </RETURNS>
const char *line, const char *name, const char *host
</FUNCTION>
<FUNCTION>
<NAME>openpty</NAME>
<RETURNS>int  </RETURNS>
int *amaster, int *aslave, char *name, struct termios *termp, struct winsize *winp
</FUNCTION>
<FUNCTION>
<NAME>forkpty</NAME>
<RETURNS>int  </RETURNS>
int *amaster, char *name, struct termios *termp, struct winsize *winp
</FUNCTION>
<FUNCTION>
<NAME>openpty</NAME>
<RETURNS>int  </RETURNS>
int *master_fd, int *slavefd, char *name, struct termios *termp, struct winsize *winp
</FUNCTION>
<FUNCTION>
<NAME>forkpty</NAME>
<RETURNS>pid_t  </RETURNS>
int *master_fd, char *name, struct termios *termp, struct winsize *winp
</FUNCTION>
<FUNCTION>
<NAME>login_tty</NAME>
<RETURNS>int  </RETURNS>
int fd
</FUNCTION>
<FUNCTION>
<NAME>n_read</NAME>
<RETURNS>int  </RETURNS>
int fd, void *buffer, int size
</FUNCTION>
<ENUM>
<NAME>GnomePtyOps</NAME>
typedef enum {
	GNOME_PTY_OPEN_PTY_UTMP = 1,
	GNOME_PTY_OPEN_PTY_UWTMP,
	GNOME_PTY_OPEN_PTY_WTMP,
	GNOME_PTY_OPEN_NO_DB_UPDATE,
	GNOME_PTY_CLOSE_PTY
} GnomePtyOps;
</ENUM>
<FUNCTION>
<NAME>update_dbs</NAME>
<RETURNS>void  *</RETURNS>
int utmp, int wtmp, char *login_name, char *display_name, char *term_name
</FUNCTION>
<FUNCTION>
<NAME>write_login_record</NAME>
<RETURNS>void  *</RETURNS>
char *login_name, char *display_name, char *term_name, int utmp, int wtmp
</FUNCTION>
<FUNCTION>
<NAME>write_logout_record</NAME>
<RETURNS>void  </RETURNS>
void *data, int utmp, int wtmp
</FUNCTION>
<FUNCTION>
<NAME>vt_list_new</NAME>
<RETURNS>void  </RETURNS>
struct vt_list *v
</FUNCTION>
<FUNCTION>
<NAME>vt_list_empty</NAME>
<RETURNS>int  </RETURNS>
struct vt_list *l
</FUNCTION>
<MACRO>
<NAME>WEXITSTATUS</NAME>
#   define WEXITSTATUS(stat_val) ((unsigned)(stat_val) >> 8)
</MACRO>
<MACRO>
<NAME>WIFEXITED</NAME>
#   define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
</MACRO>
<FUNCTION>
<NAME>zvt_init_subshell</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt, char *pty_name, int full
</FUNCTION>
<FUNCTION>
<NAME>zvt_shutdown_subshell</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt
</FUNCTION>
<FUNCTION>
<NAME>zvt_resize_subshell</NAME>
<RETURNS>int  </RETURNS>
int fd, int col, int row, int xpixel, int ypixel
</FUNCTION>
<MACRO>
<NAME>ZVT_UTF</NAME>
#define ZVT_UTF 1
</MACRO>
<MACRO>
<NAME>UPDATE_CHANGES</NAME>
#define UPDATE_CHANGES    0x00	/* only update changed areas */
</MACRO>
<MACRO>
<NAME>UPDATE_REFRESH</NAME>
#define UPDATE_REFRESH    0x01	/* just refersh all */
</MACRO>
<MACRO>
<NAME>UPDATE_SCROLLBACK</NAME>
#define UPDATE_SCROLLBACK 0x02	/* if in scrollback mode, make sure everything is redrawn */
</MACRO>
<TYPEDEF>
<NAME>uint32</NAME>
typedef unsigned int uint32;
</TYPEDEF>
<MACRO>
<NAME>VTPARAM_MAXARGS</NAME>
#define VTPARAM_MAXARGS   5	/* maximum number of arguments */
</MACRO>
<MACRO>
<NAME>VTPARAM_ARGMAX</NAME>
#define VTPARAM_ARGMAX   20	/* number of characters in each arg maximum */
</MACRO>
<MACRO>
<NAME>VTPARAM_INTARGS</NAME>
#define VTPARAM_INTARGS  20	/* maximum args for integers, should be less than MAXARGS*ARGMAX bytes! */
</MACRO>
<MACRO>
<NAME>VT_LINE_SIZE</NAME>
#define VT_LINE_SIZE(width) (sizeof(struct vt_line) + (sizeof(uint32) * (width)))
</MACRO>
<ENUM>
<NAME>VTTITLE_TYPE</NAME>
typedef enum {
  VTTITLE_WINDOWICON=0,
  VTTITLE_ICON,
  VTTITLE_WINDOW
} VTTITLE_TYPE;
</ENUM>
<MACRO>
<NAME>VTATTR_BOLD</NAME>
#define VTATTR_BOLD       0x40000000
</MACRO>
<MACRO>
<NAME>VTATTR_UNDERLINE</NAME>
#define VTATTR_UNDERLINE  0x20000000
</MACRO>
<MACRO>
<NAME>VTATTR_BLINK</NAME>
#define VTATTR_BLINK      0x10000000
</MACRO>
<MACRO>
<NAME>VTATTR_REVERSE</NAME>
#define VTATTR_REVERSE    0x08000000
</MACRO>
<MACRO>
<NAME>VTATTR_CONCEALED</NAME>
#define VTATTR_CONCEALED  0x04000000
</MACRO>
<MACRO>
<NAME>VTATTR_MASK</NAME>
#define VTATTR_MASK	  0xffff0000
</MACRO>
<MACRO>
<NAME>VTATTR_DATAMASK</NAME>
#define VTATTR_DATAMASK	  (~VTATTR_MASK)
</MACRO>
<MACRO>
<NAME>VTATTR_CLEARMASK</NAME>
#define VTATTR_CLEARMASK  (~(VTATTR_BOLD|VTATTR_UNDERLINE|VTATTR_BLINK|VTATTR_REVERSE))
</MACRO>
<MACRO>
<NAME>VTATTR_FORECOLOURM</NAME>
#define VTATTR_FORECOLOURM 0x03e00000
</MACRO>
<MACRO>
<NAME>VTATTR_BACKCOLOURM</NAME>
#define VTATTR_BACKCOLOURM 0x001f0000
</MACRO>
<MACRO>
<NAME>VTATTR_FORECOLOURB</NAME>
#define VTATTR_FORECOLOURB 21
</MACRO>
<MACRO>
<NAME>VTATTR_BACKCOLOURB</NAME>
#define VTATTR_BACKCOLOURB 16
</MACRO>
<MACRO>
<NAME>VTATTR_CLEAR</NAME>
#define VTATTR_CLEAR (16<<VTATTR_FORECOLOURB)|(17<<VTATTR_BACKCOLOURB)|0x0000
</MACRO>
<MACRO>
<NAME>ZVT_CODE_ISOLATIN1</NAME>
#define ZVT_CODE_ISOLATIN1 0
</MACRO>
<MACRO>
<NAME>ZVT_CODE_UTF8</NAME>
#define ZVT_CODE_UTF8 1
</MACRO>
<MACRO>
<NAME>VTMODE_INSERT</NAME>
#define VTMODE_INSERT 0x00000001 /* insert mode active */
</MACRO>
<MACRO>
<NAME>VTMODE_SEND_MOUSE</NAME>
#define VTMODE_SEND_MOUSE 0x00000002 /* send mouse clicks */
</MACRO>
<MACRO>
<NAME>VTMODE_WRAPOFF</NAME>
#define VTMODE_WRAPOFF 0x04	/* wrap screenmode? (default = on) */
</MACRO>
<MACRO>
<NAME>VTMODE_APP_CURSOR</NAME>
#define VTMODE_APP_CURSOR 0x00000008 /* application cursor keys */
</MACRO>
<MACRO>
<NAME>VTMODE_RELATIVE</NAME>
#define VTMODE_RELATIVE 0x10	/* relative origin mode */
</MACRO>
<MACRO>
<NAME>VTMODE_APP_KEYPAD</NAME>
#define VTMODE_APP_KEYPAD 0x20	/* application keypad on */
</MACRO>
<MACRO>
<NAME>VTMODE_ALTSCREEN</NAME>
#define VTMODE_ALTSCREEN 0x80000000 /* on alternate screen? */
</MACRO>
<MACRO>
<NAME>VT_BLANK</NAME>
#define VT_BLANK(n) ((n)==0 || (n)==9 || (n)==32)
</MACRO>
<MACRO>
<NAME>VT_BMASK</NAME>
#define VT_BMASK(n) ((n) & (VTATTR_FORECOLOURM|VTATTR_BACKCOLOURM|VTATTR_REVERSE|VTATTR_UNDERLINE))
</MACRO>
<MACRO>
<NAME>VT_ASCII</NAME>
#define VT_ASCII(n) ((((n)&VTATTR_DATAMASK)==0 || ((n)&VTATTR_DATAMASK)==9)?32:((n)&VTATTR_DATAMASK))
</MACRO>
<MACRO>
<NAME>VT_THRESHHOLD</NAME>
#define VT_THRESHHOLD (4)
</MACRO>
<FUNCTION>
<NAME>vt_destroy</NAME>
<RETURNS>void  </RETURNS>
struct vt_em *vt
</FUNCTION>
<FUNCTION>
<NAME>vt_resize</NAME>
<RETURNS>void  </RETURNS>
struct vt_em *vt, int width, int height,int pixwidth, int pixheight
</FUNCTION>
<FUNCTION>
<NAME>vt_parse_vt</NAME>
<RETURNS>void  </RETURNS>
struct vt_em *vt, char *ptr, int length
</FUNCTION>
<FUNCTION>
<NAME>vt_swap_buffers</NAME>
<RETURNS>void  </RETURNS>
struct vt_em *vt
</FUNCTION>
<FUNCTION>
<NAME>vt_forkpty</NAME>
<RETURNS>pid_t  </RETURNS>
struct vt_em *vt, int do_uwtmp_log
</FUNCTION>
<FUNCTION>
<NAME>vt_readchild</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt, char *buffer, int len
</FUNCTION>
<FUNCTION>
<NAME>vt_writechild</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt, char *buffer, int len
</FUNCTION>
<FUNCTION>
<NAME>vt_report_button</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt, int button, int qual,int x, int y
</FUNCTION>
<FUNCTION>
<NAME>vt_scrollback_set</NAME>
<RETURNS>void  </RETURNS>
struct vt_em *vt, int lines
</FUNCTION>
<FUNCTION>
<NAME>vt_killchild</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt, int signal
</FUNCTION>
<FUNCTION>
<NAME>vt_closepty</NAME>
<RETURNS>int  </RETURNS>
struct vt_em *vt
</FUNCTION>
<FUNCTION>
<NAME>vt_reset_terminal</NAME>
<RETURNS>void 	</RETURNS>
struct vt_em *vt, int hard
</FUNCTION>
<MACRO>
<NAME>UPDATE_CHANGES</NAME>
#define UPDATE_CHANGES 0x00	/* only update changed areas */
</MACRO>
<MACRO>
<NAME>UPDATE_REFRESH</NAME>
#define UPDATE_REFRESH 0x01	/* just refersh all */
</MACRO>
<MACRO>
<NAME>UPDATE_SCROLLBACK</NAME>
#define UPDATE_SCROLLBACK 0x02	/* if in scrollback mode, make sure everything is redrawn */
</MACRO>
<ENUM>
<NAME>VT_SELTYPE</NAME>
typedef enum {
  VT_SELTYPE_NONE=0,		/* selection inactive */
  VT_SELTYPE_CHAR,		/* selection by char */
  VT_SELTYPE_WORD,		/* selection by word */
  VT_SELTYPE_LINE,		/* selection by whole line */
  VT_SELTYPE_MAGIC		/* 'magic' or 'active tag' select */
} VT_SELTYPE;
</ENUM>
<MACRO>
<NAME>VT_SELTYPE_MASK</NAME>
#define VT_SELTYPE_MASK 0xff
</MACRO>
<MACRO>
<NAME>VT_SELTYPE_BYEND</NAME>
#define VT_SELTYPE_BYEND 0x8000
</MACRO>
<MACRO>
<NAME>VT_SELTYPE_BYSTART</NAME>
#define VT_SELTYPE_BYSTART 0x4000
</MACRO>
<MACRO>
<NAME>VT_SELTYPE_MOVED</NAME>
#define VT_SELTYPE_MOVED 0x2000 /* has motion occured? */
</MACRO>
<ENUM>
<NAME>VT_SCROLLTYPE</NAME>
typedef enum {
  VT_SCROLL_ALWAYS=0,		/* normal display */
  VT_SCROLL_SOMETIMES,		/* with 'fast scroll' background pixmap */
  VT_SCROLL_NEVER		/* with transparency pixmap or fixed pixmap */
} VT_SCROLLTYPE;
</ENUM>
<STRUCT>
<NAME>vtx</NAME>
struct vtx
{
  struct vt_em vt;

  /* when updating, background colour matches for whole contents of line */
  unsigned int back_match:1;

  /* selection stuff */
  uint32 *selection_data;		/* actual selection */
  int selection_size;

  /* 256 bits of word class characters (assumes a char is 8 bits or more) */
  unsigned char wordclass[32];

  /* rendering buffer, for building output strings */
  char *runbuffer_donotuse;	/* TBR! */
  int runbuffer_size_donotuse;

  /* true if something selected */
  int selected;

  /* if selection active, what type? (by char/word/line) */
  VT_SELTYPE selectiontype;

  int selstartx, selstarty;
  int selendx, selendy;

  /* previously rendered values */
  int selstartxold, selstartyold;
  int selendxold, selendyold;

  /* rendering callbacks */
  void (*draw_text)(void *user_data, struct vt_line *line, int row, int col, int len, int attr);
  void (*scroll_area)(void *user_data, int firstrow, int count, int offset, int fill);
  /* set the cursor on/off, return old state */
  int  (*cursor_state)(void *user_data, int state);

  /* added in gnome-libs 1.0.10
     ... this shouldn't break bin compatibility? */
  unsigned char scroll_type;	/* how we scroll (see VT_SCROLLTYPE enum) */
};
</STRUCT>
<FUNCTION>
<NAME>vt_get_selection</NAME>
<RETURNS>char  *</RETURNS>
struct _vtx *vx, int size, int *len
</FUNCTION>
<FUNCTION>
<NAME>vt_clear_selection</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx
</FUNCTION>
<FUNCTION>
<NAME>vt_fix_selection</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx
</FUNCTION>
<FUNCTION>
<NAME>vt_draw_selection</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx
</FUNCTION>
<FUNCTION>
<NAME>vt_update_rect</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx, int fill, int sx, int sy, int ex, int ey
</FUNCTION>
<FUNCTION>
<NAME>vt_update</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vt, int state
</FUNCTION>
<FUNCTION>
<NAME>vt_draw_cursor</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx, int state
</FUNCTION>
<FUNCTION>
<NAME>vt_set_wordclass</NAME>
<RETURNS>void  </RETURNS>
struct _vtx *vx, unsigned char *s
</FUNCTION>
<FUNCTION>
<NAME>vt_get_attr_at</NAME>
<RETURNS>int  </RETURNS>
struct _vtx *vx, int col, int row
</FUNCTION>
<MACRO>
<NAME>ZVT_TERM</NAME>
#define ZVT_TERM(obj)          GTK_CHECK_CAST (obj, zvt_term_get_type (), ZvtTerm)
</MACRO>
<MACRO>
<NAME>ZVT_TERM_CLASS</NAME>
#define ZVT_TERM_CLASS(klass)  GTK_CHECK_CLASS_CAST (klass, zvt_term_get_type (), ZvtTermClass)
</MACRO>
<MACRO>
<NAME>ZVT_IS_TERM</NAME>
#define ZVT_IS_TERM(obj)       GTK_CHECK_TYPE (obj, zvt_term_get_type ())
</MACRO>
<MACRO>
<NAME>ZVT_TERM_PIXMAP_SUPPORT</NAME>
#define ZVT_TERM_PIXMAP_SUPPORT		0x01
</MACRO>
<MACRO>
<NAME>ZVT_TERM_EMBOLDEN_SUPPORT</NAME>
#define ZVT_TERM_EMBOLDEN_SUPPORT	0x02
</MACRO>
<MACRO>
<NAME>ZVT_TERM_TRANSPARENCY_SUPPORT</NAME>
#define ZVT_TERM_TRANSPARENCY_SUPPORT	0x04
</MACRO>
<MACRO>
<NAME>ZVT_TERM_PIXMAPSCROLL_SUPPORT</NAME>
#define ZVT_TERM_PIXMAPSCROLL_SUPPORT	0x08
</MACRO>
<STRUCT>
<NAME>ZvtTerm</NAME>
</STRUCT>
<STRUCT>
<NAME>ZvtTermClass</NAME>
</STRUCT>
<STRUCT>
<NAME>ZvtTerm</NAME>
struct ZvtTerm
{
  GtkWidget widget;

  /* scrollback position adjustement */
  GtkAdjustment *adjustment;

  GtkShadowType shadow_type;
  GdkWindow *term_window;

  /* zvt emulator */
  struct _vtx *vx;

  /* size of characters */
  int charwidth;
  int charheight;

  /* input handler, message handler, cursor blink timeout */
  gint input_id;
  gint msg_id;
  gint timeout_id;

  /* resizing */
  gboolean set_grid_size_pending;
  guint grid_width;
  guint grid_height;

  /* internal data */
  GdkCursor *cursor_bar;	/* I beam cursor */
  GdkCursor *cursor_dot;       	/* the blank cursor */
  GdkCursor *cursor_current;	/* current active cursor */
  GdkFont *font;		/* current normal font */
  GdkFont *font_bold;		/* current bold font */
  GdkGC *scroll_gc;		/* special GC used for scrolling */
  GdkGC *fore_gc, *back_gc;	/* GCs for the foreground and background colors */
  int fore_last, back_last;	/* last colour for foreground/background gc's */
  GdkColorContext *color_ctx;	/* Color context in use, where we allocate our colors */
  gulong colors [18];		/* Our colors, pixel values. */
  GdkIC *ic;			/* input context */

 /* file name of a pixmap, if NULL, none is loaded
  * and normal mode is used
  */
  char *pixmap_filename;

  /* transparency stuff, it's left in even if we don't compile
   * transparency/background pixmaps, if we don't, it will just be ignored
   */
  struct
  {
    GdkPixmap *pix; /* background pixmap */
    int x,y,w,h;    /* these are used to know if the position changed
		     * and we need to get new shaded transparent pixmap
		     */
  } background;

</STRUCT>
<STRUCT>
<NAME>ZvtTermClass</NAME>
struct ZvtTermClass
{
  GtkWidgetClass parent_class;

  void (* child_died) (ZvtTerm *term);    
  void (* title_changed) (ZvtTerm *term, VTTITLE_TYPE type, char *newtitle);
};
</STRUCT>
<ENUM>
<NAME>zvtfont_t</NAME>
typedef enum {
  ZVT_FONT_1BYTE=0,		/* simple, 1-byte fonts */
  ZVT_FONT_2BYTE,		/* 2-byte fonts */
  ZVT_FONT_FONTSET,		/* fontset fonts */
} zvtfont_t;
</ENUM>
<STRUCT>
<NAME>zvtprivate</NAME>
struct zvtprivate
{
  gint scrollselect_id;
  int scrollselect_dir;		/* scrolling selection direction/step */  

  void *text_expand;		/* text expansion area */
  int text_expandlen;		/* how much space here */
  zvtfont_t fonttype;		/* type of font */
  uint32 default_char;		/* what to use for unknown characters (a box, or ?) */

  int lastselectiontype;	/* last tried type for a selection query (see request_paste()) */

  int scroll_position;		/* offset for background pixmap when scrolling */
  GdkPixmap *bold_save;		/* when drawing bold, use this to save the
				   maybe-overwritten line. */
};
</STRUCT>
<MACRO>
<NAME>ZVT_TERM_DO_UTMP_LOG</NAME>
#define ZVT_TERM_DO_UTMP_LOG 1
</MACRO>
<MACRO>
<NAME>ZVT_TERM_DO_WTMP_LOG</NAME>
#define ZVT_TERM_DO_WTMP_LOG 2
</MACRO>
<MACRO>
<NAME>ZVT_BACKGROUND_SHADED</NAME>
#define ZVT_BACKGROUND_SHADED 0x01 /* shade background image.  This must be left as 1 for api compat! */
</MACRO>
<MACRO>
<NAME>ZVT_BACKGROUND_SCROLL</NAME>
#define ZVT_BACKGROUND_SCROLL 0x02 /* background can scroll, exclusive option with transparency */
</MACRO>
<FUNCTION>
<NAME>zvt_term_new</NAME>
<RETURNS>GtkWidget *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_new_with_size</NAME>
<RETURNS>GtkWidget *</RETURNS>
int cols, int rows
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_reset</NAME>
<RETURNS>void 	</RETURNS>
ZvtTerm *term, int hard
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_feed</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term,char *text, int len
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_forkpty</NAME>
<RETURNS>int 	</RETURNS>
ZvtTerm *term, int do_uwtmp_log
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_closepty</NAME>
<RETURNS>int  </RETURNS>
ZvtTerm *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_killchild</NAME>
<RETURNS>int  </RETURNS>
ZvtTerm *term, int signal
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_bell</NAME>
<RETURNS>void 	</RETURNS>
void *zvt_term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_get_type</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_scrollback</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, int lines
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_get_buffer</NAME>
<RETURNS>char         *</RETURNS>
ZvtTerm *term, int *len,int type,int sx, int sy,int ex, int ey
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_font_name</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, char *name
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_fonts</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term,GdkFont *font,GdkFont *font_bold
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_hide_pointer</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_show_pointer</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_bell</NAME>
<RETURNS>void 	</RETURNS>
ZvtTerm *term, int state
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_get_bell</NAME>
<RETURNS>gboolean  </RETURNS>
ZvtTerm *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_blink</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, int state
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_scroll_on_keystroke</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, int state
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_scroll_on_output</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, int state
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_color_scheme</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term,gushort *red,gushort *grn,gushort *blu
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_default_color_scheme</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_del_key_swap</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm *term, int state
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_wordclass</NAME>
<RETURNS>void 	</RETURNS>
ZvtTerm *term, unsigned char *klass
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_background</NAME>
<RETURNS>void 	</RETURNS>
ZvtTerm       *terminal,char          *pixmap_file,int		transparent,int		flags
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_shadow_type</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm       *term,GtkShadowType  type
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_set_size</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm       *term,guint          width,guint          height
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_get_capabilities</NAME>
<RETURNS>guint32 	</RETURNS>
ZvtTerm       *term
</FUNCTION>
<FUNCTION>
<NAME>zvt_term_get_adjustment</NAME>
<RETURNS>GtkAdjustment *</RETURNS>
ZvtTerm      *terminal
</FUNCTION>
<FUNCTION>
<NAME>zvk_term_set_adjustment</NAME>
<RETURNS>void  </RETURNS>
ZvtTerm      *dial,GtkAdjustment *adjustment
</FUNCTION>
