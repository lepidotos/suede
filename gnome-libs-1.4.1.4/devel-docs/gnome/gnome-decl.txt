<MACRO>
<NAME>gnome_config_get_string_with_default</NAME>
#define gnome_config_get_string_with_default(path,def) \
	(_gnome_config_get_string_with_default((path),(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_translated_string_with_default</NAME>
#define gnome_config_get_translated_string_with_default(path,def) \
	(_gnome_config_get_translated_string_with_default((path),(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_int_with_default</NAME>
#define gnome_config_get_int_with_default(path,def) \
	(_gnome_config_get_int_with_default((path),(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_float_with_default</NAME>
#define gnome_config_get_float_with_default(path,def) \
	(_gnome_config_get_float_with_default((path),(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_bool_with_default</NAME>
#define gnome_config_get_bool_with_default(path,def) \
	(_gnome_config_get_bool_with_default((path),(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_vector_with_default</NAME>
#define gnome_config_get_vector_with_default(path, argcp, argvp, def) \
        (_gnome_config_get_vector_with_default ((path),(argcp),(argvp), \
						(def),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_string_with_default</NAME>
#define gnome_config_private_get_string_with_default(path,def) \
	(_gnome_config_get_string_with_default((path),(def),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_translated_string_with_default</NAME>
#define gnome_config_private_get_translated_string_with_default(path,def) \
	(_gnome_config_get_translated_string_with_default((path), (def),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_int_with_default</NAME>
#define gnome_config_private_get_int_with_default(path,def) \
	(_gnome_config_get_int_with_default((path),(def),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_float_with_default</NAME>
#define gnome_config_private_get_float_with_default(path,def) \
	(_gnome_config_get_int_with_default((path),(def),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_bool_with_default</NAME>
#define gnome_config_private_get_bool_with_default(path,def) \
	(_gnome_config_get_bool_with_default((path),(def),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_vector_with_default</NAME>
#define gnome_config_private_get_vector_with_default(path, argcp, argvp, def) \
        (_gnome_config_get_vector_with_default ((path),(argcp), (argvp), \
        					(def), TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_string</NAME>
#define gnome_config_get_string(path) \
	(_gnome_config_get_string_with_default ((path), NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_translated_string</NAME>
#define gnome_config_get_translated_string(path) \
	(_gnome_config_get_translated_string_with_default ((path), NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_int</NAME>
#define gnome_config_get_int(path) \
	(_gnome_config_get_int_with_default ((path), NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_float</NAME>
#define gnome_config_get_float(path) \
	(_gnome_config_get_float_with_default ((path), NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_bool</NAME>
#define gnome_config_get_bool(path) \
	(_gnome_config_get_bool_with_default ((path), NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_vector</NAME>
#define gnome_config_get_vector(path, argcp, argvp) \
        (_gnome_config_get_vector_with_default ((path), (argcp), (argvp), \
        					NULL, FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_string</NAME>
#define gnome_config_private_get_string(path) \
	(_gnome_config_get_string_with_default ((path), NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_translated_string</NAME>
#define gnome_config_private_get_translated_string(path) \
	(_gnome_config_get_translated_string_with_default ((path), NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_int</NAME>
#define gnome_config_private_get_int(path) \
	(_gnome_config_get_int_with_default ((path), NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_float</NAME>
#define gnome_config_private_get_float(path) \
	(_gnome_config_get_float_with_default ((path), NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_bool</NAME>
#define gnome_config_private_get_bool(path) \
	(_gnome_config_get_bool_with_default ((path), NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_vector</NAME>
#define gnome_config_private_get_vector(path, argcp, argvp) \
        (_gnome_config_get_vector_with_default ((path), (argcp), (argvp), \
        					NULL, TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_string</NAME>
#define gnome_config_set_string(path,new_value) \
	(_gnome_config_set_string((path),(new_value),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_translated_string</NAME>
#define gnome_config_set_translated_string(path,value) \
	(_gnome_config_set_translated_string((path),(value),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_int</NAME>
#define gnome_config_set_int(path,new_value) \
	(_gnome_config_set_int((path),(new_value),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_float</NAME>
#define gnome_config_set_float(path,new_value) \
	(_gnome_config_set_float((path),(new_value),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_bool</NAME>
#define gnome_config_set_bool(path,new_value) \
	(_gnome_config_set_bool((path),(new_value),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_set_vector</NAME>
#define gnome_config_set_vector(path,argc,argv) \
	(_gnome_config_set_vector((path),(argc),(argv),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_string</NAME>
#define gnome_config_private_set_string(path,new_value) \
	(_gnome_config_set_string((path),(new_value),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_translated_string</NAME>
#define gnome_config_private_set_translated_string(path,new_value) \
	(_gnome_config_set_translated_string((path),(new_value),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_int</NAME>
#define gnome_config_private_set_int(path,new_value) \
	(_gnome_config_set_int((path),(new_value),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_float</NAME>
#define gnome_config_private_set_float(path,new_value) \
	(_gnome_config_set_float((path),(new_value),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_bool</NAME>
#define gnome_config_private_set_bool(path,new_value) \
	(_gnome_config_set_bool((path),(new_value),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_set_vector</NAME>
#define gnome_config_private_set_vector(path,argc,argv) \
	(_gnome_config_set_vector((path),(argc),(argv),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_has_section</NAME>
#define gnome_config_has_section(path) \
	(_gnome_config_has_section((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_has_section</NAME>
#define gnome_config_private_has_section(path) \
	(_gnome_config_has_section((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_init_iterator</NAME>
#define gnome_config_init_iterator(path) \
	(_gnome_config_init_iterator((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_init_iterator</NAME>
#define gnome_config_private_init_iterator(path) \
	(_gnome_config_init_iterator((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_init_iterator_sections</NAME>
#define gnome_config_init_iterator_sections(path) \
	(_gnome_config_init_iterator_sections((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_init_iterator_sections</NAME>
#define gnome_config_private_init_iterator_sections(path) \
	(_gnome_config_init_iterator_sections((path),TRUE))
</MACRO>
<FUNCTION>
<NAME>gnome_config_iterator_next</NAME>
<RETURNS>void  *</RETURNS>
void *iterator_handle, char **key, char **value
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_drop_all</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_sync</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>gnome_config_sync_file</NAME>
#define gnome_config_sync_file(path) \
	(_gnome_config_sync_file((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_sync_file</NAME>
#define gnome_config_private_sync_file(path) \
	(_gnome_config_sync_file((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_drop_file</NAME>
#define gnome_config_drop_file(path) \
	(_gnome_config_drop_file((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_drop_file</NAME>
#define gnome_config_private_drop_file(path) \
	(_gnome_config_drop_file((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_clean_file</NAME>
#define gnome_config_clean_file(path) \
	(_gnome_config_clean_file((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_clean_file</NAME>
#define gnome_config_private_clean_file(path) \
	(_gnome_config_clean_file((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_clean_section</NAME>
#define gnome_config_clean_section(path) \
	(_gnome_config_clean_section((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_clean_section</NAME>
#define gnome_config_private_clean_section(path) \
	(_gnome_config_clean_section((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_clean_key</NAME>
#define gnome_config_clean_key(path) \
	(_gnome_config_clean_key((path),FALSE))
</MACRO>
<MACRO>
<NAME>gnome_config_private_clean_key</NAME>
#define gnome_config_private_clean_key(path) \
	(_gnome_config_clean_key((path),TRUE))
</MACRO>
<MACRO>
<NAME>gnome_config_get_real_path</NAME>
#define gnome_config_get_real_path(path) \
	(g_concat_dir_and_file (gnome_user_dir,(path)))
</MACRO>
<MACRO>
<NAME>gnome_config_private_get_real_path</NAME>
#define gnome_config_private_get_real_path(path) \
	(g_concat_dir_and_file (gnome_user_private_dir,(path)))
</MACRO>
<FUNCTION>
<NAME>gnome_config_push_prefix</NAME>
<RETURNS>void  </RETURNS>
const char *path
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_pop_prefix</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_make_vector</NAME>
<RETURNS>void  </RETURNS>
const char *string, int *argcp, char ***argvp
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_assemble_vector</NAME>
<RETURNS>char  *</RETURNS>
int argc, const char *const argv []
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_set_set_handler</NAME>
<RETURNS>void  </RETURNS>
void (*func)(void *),void *data
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_set_sync_handler</NAME>
<RETURNS>void  </RETURNS>
void (*func)(void *),void *data
</FUNCTION>
<MACRO>
<NAME>BEGIN_GNOME_DECLS</NAME>
#define BEGIN_GNOME_DECLS extern "C" {
</MACRO>
<MACRO>
<NAME>END_GNOME_DECLS</NAME>
#define END_GNOME_DECLS }
</MACRO>
<MACRO>
<NAME>BEGIN_GNOME_DECLS</NAME>
#define BEGIN_GNOME_DECLS
</MACRO>
<MACRO>
<NAME>END_GNOME_DECLS</NAME>
#define END_GNOME_DECLS
</MACRO>
<STRUCT>
<NAME>GnomeDesktopEntry</NAME>
typedef struct {
	char *name;		/* These contain the translated name/comment */
	char *comment;
	int exec_length;	/* Length of `exec' vector.  Does not
				   include the NULL terminator.  */
	char **exec;		/* Command to execute.  Must be NULL
				   terminated.  */
	char *tryexec;		/* Test program to execute */
	char *icon;		/* Icon name */
	char *docpath;		/* Path to the documentation */
	int   terminal;		/* flag: requires a terminal to run */
	char *type;		/* type of this dentry */
	char *location;		/* path of this dentry */
	char *geometry;		/* geometry for this icon */
	
	unsigned int multiple_args:1;
	unsigned int is_kde:1;  /* If this is a .kdelink file */
} GnomeDesktopEntry;
</STRUCT>
<FUNCTION>
<NAME>gnome_desktop_entry_load</NAME>
<RETURNS>GnomeDesktopEntry  *</RETURNS>
const char *file
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_load_flags</NAME>
<RETURNS>GnomeDesktopEntry  *</RETURNS>
const char *file, int clean_from_memory_after_load
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_load_flags_conditional</NAME>
<RETURNS>GnomeDesktopEntry  *</RETURNS>
const char *file, int clean_from_memory_after_load, int unconditional
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_load_unconditional</NAME>
<RETURNS>GnomeDesktopEntry  *</RETURNS>
const char *file
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_save</NAME>
<RETURNS>void  </RETURNS>
GnomeDesktopEntry *dentry
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_free</NAME>
<RETURNS>void  </RETURNS>
GnomeDesktopEntry *item
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_destroy</NAME>
<RETURNS>void  </RETURNS>
GnomeDesktopEntry *item
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_launch</NAME>
<RETURNS>void  </RETURNS>
GnomeDesktopEntry *item
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_launch_with_args</NAME>
<RETURNS>void  </RETURNS>
GnomeDesktopEntry *item, int the_argc, char *the_argv[]
</FUNCTION>
<FUNCTION>
<NAME>gnome_desktop_entry_copy</NAME>
<RETURNS>GnomeDesktopEntry  *</RETURNS>
GnomeDesktopEntry * source
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_async</NAME>
<RETURNS>int  </RETURNS>
const char *dir, int argc, char * const argv[]
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_async_fds</NAME>
<RETURNS>int  </RETURNS>
const char *dir, int argc, char * const argv[],gboolean close_fds
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_async_with_env</NAME>
<RETURNS>int  </RETURNS>
const char *dir,int argc, char * const argv[],int envc, char * const envv[]
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_async_with_env_fds</NAME>
<RETURNS>int  </RETURNS>
const char *dir, int argc,char * const argv[], int envc,char * const envv[], gboolean close_fds
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_shell</NAME>
<RETURNS>int  </RETURNS>
const char *dir, const char *commandline
</FUNCTION>
<FUNCTION>
<NAME>gnome_execute_shell_fds</NAME>
<RETURNS>int  </RETURNS>
const char *dir, const char *commandline,gboolean close_fds
</FUNCTION>
<FUNCTION>
<NAME>gnome_file_convert_fd</NAME>
<RETURNS>gint</RETURNS>
gint fd, gchar *fromtype, gchar *totype
</FUNCTION>
<FUNCTION>
<NAME>gnome_file_convert</NAME>
<RETURNS>gint</RETURNS>
const char *filename, const char *fromtype, const char *totype
</FUNCTION>
<STRUCT>
<NAME>GnomeHelpMenuEntry</NAME>
typedef struct {
    gchar *name;
    gchar *path;
} GnomeHelpMenuEntry;
</STRUCT>
<FUNCTION>
<NAME>gnome_help_file_find_file</NAME>
<RETURNS>gchar  *</RETURNS>
gchar *app, gchar *path
</FUNCTION>
<FUNCTION>
<NAME>gnome_help_file_path</NAME>
<RETURNS>gchar  *</RETURNS>
gchar *app, gchar *path
</FUNCTION>
<FUNCTION>
<NAME>gnome_help_display</NAME>
<RETURNS>void  </RETURNS>
void *ignore, GnomeHelpMenuEntry *ref
</FUNCTION>
<FUNCTION>
<NAME>gnome_help_pbox_display</NAME>
<RETURNS>void  </RETURNS>
void *ignore, gint page_num,GnomeHelpMenuEntry *ref
</FUNCTION>
<FUNCTION>
<NAME>gnome_help_pbox_goto</NAME>
<RETURNS>void  </RETURNS>
void *ignore, int ignore2, GnomeHelpMenuEntry *ref
</FUNCTION>
<FUNCTION>
<NAME>gnome_help_goto</NAME>
<RETURNS>void  </RETURNS>
void *ignore, gchar *file
</FUNCTION>
<STRUCT>
<NAME>GnomeHistoryEntry</NAME>
struct GnomeHistoryEntry
{
	char *filename;		/* Name of the visited file. */
	char *filetype;		/* MIME type of the visited file.  */
	char *creator;		/* What program created the file.  */
	char *desc;		/* Description of what choosing this
				   item would do.  This is some
				   explanatory text that might be
				   presented to the user.  */
};
</STRUCT>
<FUNCTION>
<NAME>gnome_history_recently_used</NAME>
<RETURNS>void</RETURNS>
char *filename, char *filetype,char *creator, char *desc
</FUNCTION>
<FUNCTION>
<NAME>gnome_history_get_recently_used</NAME>
<RETURNS>GList  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_history_free_recently_used_list</NAME>
<RETURNS>void</RETURNS>
GList *alist
</FUNCTION>
<MACRO>
<NAME>_</NAME>
#    define _(String) gettext (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#        define N_(String) gettext_noop (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#        define N_(String) (String)
</MACRO>
<MACRO>
<NAME>textdomain</NAME>
#    define textdomain(String) (String)
</MACRO>
<MACRO>
<NAME>gettext</NAME>
#    define gettext(String) (String)
</MACRO>
<MACRO>
<NAME>dgettext</NAME>
#    define dgettext(Domain,Message) (Message)
</MACRO>
<MACRO>
<NAME>dcgettext</NAME>
#    define dcgettext(Domain,Message,Type) (Message)
</MACRO>
<MACRO>
<NAME>bindtextdomain</NAME>
#    define bindtextdomain(Domain,Directory) (Domain)
</MACRO>
<MACRO>
<NAME>_</NAME>
#    define _(String) (String)
</MACRO>
<MACRO>
<NAME>N_</NAME>
#    define N_(String) (String)
</MACRO>
<FUNCTION>
<NAME>gnome_i18n_get_language</NAME>
<RETURNS>const char  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_i18n_get_language_list</NAME>
<RETURNS>GList       *</RETURNS>
const gchar *category_name
</FUNCTION>
<FUNCTION>
<NAME>gnome_i18n_set_preferred_language</NAME>
<RETURNS>void 	</RETURNS>
const char *val
</FUNCTION>
<FUNCTION>
<NAME>gnome_i18n_get_preferred_language</NAME>
<RETURNS>const char  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_i18n_init</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_type</NAME>
<RETURNS>const char   *</RETURNS>
const gchar* filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_type_or_default</NAME>
<RETURNS>const char   *</RETURNS>
const gchar *filename,const gchar *defaultv
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_type_of_file</NAME>
<RETURNS>const char   *</RETURNS>
const char *existing_filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_type_or_default_of_file</NAME>
<RETURNS>const char   *</RETURNS>
const char *existing_filename,const gchar *defaultv
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_type_from_magic</NAME>
<RETURNS>const char   *</RETURNS>
const gchar *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_uri_list_extract_filenames</NAME>
<RETURNS>GList        *</RETURNS>
const gchar* uri_list
</FUNCTION>
<FUNCTION>
<NAME>gnome_uri_list_extract_uris</NAME>
<RETURNS>GList        *</RETURNS>
const gchar* uri_list
</FUNCTION>
<FUNCTION>
<NAME>gnome_uri_list_free_strings</NAME>
<RETURNS>void  </RETURNS>
GList *list
</FUNCTION>
<FUNCTION>
<NAME>gnome_score_init</NAME>
<RETURNS>gint</RETURNS>
const gchar * gamename
</FUNCTION>
<FUNCTION>
<NAME>gnome_score_log</NAME>
<RETURNS>gint</RETURNS>
gfloat score,gchar *level,gboolean higher_to_lower_score_order
</FUNCTION>
<ENUM>
<NAME>GnomeTriggerType</NAME>
typedef enum {
	GTRIG_NONE,
	GTRIG_FUNCTION,
	GTRIG_COMMAND,
	GTRIG_MEDIAPLAY
}  GnomeTriggerType;
</ENUM>
<USER_FUNCTION>
<NAME>GnomeTriggerActionFunction</NAME>
<RETURNS>void </RETURNS>
char *msg, char *level, char *supinfo[]
</USER_FUNCTION>
<STRUCT>
<NAME>GnomeTrigger</NAME>
struct GnomeTrigger {
	GnomeTriggerType type;
	union {
		/*
		 * These will be passed the same info as
		 * gnome_triggers_do got
		 */
		GnomeTriggerActionFunction function;
		gchar *command;
		struct {
			gchar *file;
			int cache_id;
		} media;
	} u;
        gchar *level;
};
</STRUCT>
<STRUCT>
<NAME>GnomeTrigger</NAME>
</STRUCT>
<FUNCTION>
<NAME>gnome_triggers_init</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_triggers_readfile</NAME>
<RETURNS>gint  </RETURNS>
const char *infilename
</FUNCTION>
<FUNCTION>
<NAME>gnome_triggers_add_trigger</NAME>
<RETURNS>void  </RETURNS>
GnomeTrigger *nt, ...
</FUNCTION>
<FUNCTION>
<NAME>gnome_triggers_vadd_trigger</NAME>
<RETURNS>void  </RETURNS>
GnomeTrigger *nt,char *supinfo[]
</FUNCTION>
<FUNCTION>
<NAME>gnome_triggers_do</NAME>
<RETURNS>void  </RETURNS>
const char *msg,const char *level, ...
</FUNCTION>
<FUNCTION>
<NAME>gnome_triggers_vdo</NAME>
<RETURNS>void  </RETURNS>
const char *msg, const char *level,const char *supinfo[]
</FUNCTION>
<MACRO>
<NAME>PATH_SEP</NAME>
#define PATH_SEP '/'
</MACRO>
<MACRO>
<NAME>PATH_SEP_STR</NAME>
#define PATH_SEP_STR "/"
</MACRO>
<FUNCTION>
<NAME>gnome_libdir_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_datadir_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_sound_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_pixmap_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_config_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_unconditional_libdir_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_unconditional_datadir_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_unconditional_sound_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_unconditional_pixmap_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_unconditional_config_file</NAME>
<RETURNS>char  *</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>g_file_test</NAME>
<RETURNS>int  </RETURNS>
const char *filename, int test
</FUNCTION>
<FUNCTION>
<NAME>g_file_exists</NAME>
<RETURNS>int  </RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_is_program_in_path</NAME>
<RETURNS>gchar  *</RETURNS>
const gchar *program
</FUNCTION>
<MACRO>
<NAME>g_copy_strings</NAME>
#define g_copy_strings g_strconcat
</MACRO>
<FUNCTION>
<NAME>g_unix_error_string</NAME>
<RETURNS>const char  *</RETURNS>
int error_num
</FUNCTION>
<FUNCTION>
<NAME>g_concat_dir_and_file</NAME>
<RETURNS>char  *</RETURNS>
const char *dir, const char *file
</FUNCTION>
<MACRO>
<NAME>g_filename_index</NAME>
#define g_filename_index(path) (g_basename(path)-(path))
</MACRO>
<MACRO>
<NAME>g_filename_pointer</NAME>
#define g_filename_pointer g_basename
</MACRO>
<FUNCTION>
<NAME>g_extension_pointer</NAME>
<RETURNS>const char  *</RETURNS>
const char * path
</FUNCTION>
<FUNCTION>
<NAME>g_copy_vector</NAME>
<RETURNS>char  **</RETURNS>
char ** vec
</FUNCTION>
<MACRO>
<NAME>g_flatten_vector</NAME>
#define g_flatten_vector g_strjoinv
</MACRO>
<MACRO>
<NAME>gnome_util_user_home</NAME>
#define gnome_util_user_home() g_get_home_dir()
</MACRO>
<MACRO>
<NAME>gnome_util_prepend_user_home</NAME>
#define gnome_util_prepend_user_home(x) (g_concat_dir_and_file(gnome_util_user_home(), (x)))
</MACRO>
<MACRO>
<NAME>gnome_util_home_file</NAME>
#define gnome_util_home_file(afile) (g_strconcat(gnome_util_user_home(), "/.gnome/", (afile), NULL))
</MACRO>
<FUNCTION>
<NAME>gnome_util_user_shell</NAME>
<RETURNS>char  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>g_is_image_filename</NAME>
<RETURNS>gboolean  </RETURNS>
const char * path
</FUNCTION>
<VARIABLE>
<NAME>gnome_user_home_dir</NAME>
extern char *gnome_user_home_dir;
</VARIABLE>
<VARIABLE>
<NAME>gnome_user_dir</NAME>
extern char *gnome_user_dir;
</VARIABLE>
<VARIABLE>
<NAME>gnome_user_private_dir</NAME>
extern char *gnome_user_private_dir;
</VARIABLE>
<VARIABLE>
<NAME>gnome_user_accels_dir</NAME>
extern char *gnome_user_accels_dir;
</VARIABLE>
<VARIABLE>
<NAME>gnome_do_not_create_directories</NAME>
extern char gnome_do_not_create_directories;
</VARIABLE>
<FUNCTION>
<NAME>gnomelib_init</NAME>
<RETURNS>void  </RETURNS>
const char *app_id, const char *app_version
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_get_value</NAME>
<RETURNS>const char  *</RETURNS>
const char *mime_type, char *key
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_get_keys</NAME>
<RETURNS>GList       *</RETURNS>
const char *mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_program</NAME>
<RETURNS>const char  *</RETURNS>
const char* mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_description</NAME>
<RETURNS>const char  *</RETURNS>
const char* mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_nametemplate</NAME>
<RETURNS>const char  *</RETURNS>
const char* mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_test</NAME>
<RETURNS>const char  *</RETURNS>
const char* mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_composetyped</NAME>
<RETURNS>const char  *</RETURNS>
const char* mime_type
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_copiousoutput</NAME>
<RETURNS>gboolean  </RETURNS>
const char* mime_type, char *key
</FUNCTION>
<FUNCTION>
<NAME>gnome_mime_needsterminal</NAME>
<RETURNS>gboolean  </RETURNS>
const char* mime_type, char *key
</FUNCTION>
<FUNCTION>
<NAME>gnome_remote_get_command</NAME>
<RETURNS>void  </RETURNS>
const char *host, gint *argcp, char ***argvp
</FUNCTION>
<FUNCTION>
<NAME>gnome_remote_set_command</NAME>
<RETURNS>void  </RETURNS>
const char *host, gint argc, const char * const argv[]
</FUNCTION>
<ENUM>
<NAME>GnomeMetadataError_t</NAME>
typedef enum
{
	GNOME_METADATA_OK = 0,		   /* No error. */
	GNOME_METADATA_IO_ERROR,	   /* IO or other low-level
					      communications/storage
					      error.  */
	GNOME_METADATA_NOT_FOUND	   /* Information not found.  */
} GnomeMetadataError_t;
</ENUM>
<FUNCTION>
<NAME>gnome_metadata_set</NAME>
<RETURNS>int  </RETURNS>
const char *file, const char *name,int size, const char *data
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_remove</NAME>
<RETURNS>int  </RETURNS>
const char *file, const char *name
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_list</NAME>
<RETURNS>char  **</RETURNS>
const char *file
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_get</NAME>
<RETURNS>int  </RETURNS>
const char *file, const char *name,int *size, char **buffer
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_get_fast</NAME>
<RETURNS>int  </RETURNS>
const char *file, const char *name,int *size, char **buffer
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_rename</NAME>
<RETURNS>int  </RETURNS>
const char *from, const char *to
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_copy</NAME>
<RETURNS>int  </RETURNS>
const char *from, const char *to
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_delete</NAME>
<RETURNS>int  </RETURNS>
const char *file
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_regex_add</NAME>
<RETURNS>void  </RETURNS>
const char *regex, const char *key,int size, const char *data
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_regex_remove</NAME>
<RETURNS>void  </RETURNS>
const char *regex, const char *key
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_type_add</NAME>
<RETURNS>void  </RETURNS>
const char *type, const char *key,int size, const char *data
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_type_remove</NAME>
<RETURNS>void  </RETURNS>
const char *type, const char *key
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_lock</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_metadata_unlock</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GnomeRegexCache</NAME>
typedef struct {
	int size;		/* Total number of cache slots.  */
	int next;		/* Next available slot.  */
	char **regexs;		/* Regular expression strings.  */
	regex_t *patterns;	/* Compiled expressions.  */
	/* FIXME: probably should cache compilation flags along with
	   regex and use those to determine caching.  For now we
	   assume that the flags never change.  Another option would
	   be to put the flag info into this structure and just not
	   let the user ever change it.  */
} GnomeRegexCache;
</STRUCT>
<FUNCTION>
<NAME>gnome_regex_cache_new</NAME>
<RETURNS>GnomeRegexCache  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_regex_cache_destroy</NAME>
<RETURNS>void  </RETURNS>
GnomeRegexCache *rxc
</FUNCTION>
<FUNCTION>
<NAME>gnome_regex_cache_set_size</NAME>
<RETURNS>void  </RETURNS>
GnomeRegexCache *rxc, int new_size
</FUNCTION>
<FUNCTION>
<NAME>gnome_regex_cache_compile</NAME>
<RETURNS>regex_t  *</RETURNS>
GnomeRegexCache *rxc, const char *pattern,int flags
</FUNCTION>
<VARIABLE>
<NAME>gnome_sound_connection</NAME>
extern int gnome_sound_connection;
</VARIABLE>
<FUNCTION>
<NAME>gnome_sound_init</NAME>
<RETURNS>void  </RETURNS>
const char *hostname
</FUNCTION>
<FUNCTION>
<NAME>gnome_sound_shutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_sound_sample_load</NAME>
<RETURNS>int  </RETURNS>
const char *sample_name, const char *filename
</FUNCTION>
<FUNCTION>
<NAME>gnome_sound_play</NAME>
<RETURNS>void  </RETURNS>
const char * filename
</FUNCTION>
<STRUCT>
<NAME>GnomePaper</NAME>
</STRUCT>
<STRUCT>
<NAME>GnomeUnit</NAME>
</STRUCT>
<TYPEDEF>
<NAME>Paper</NAME>
typedef GnomePaper Paper;
</TYPEDEF>
<TYPEDEF>
<NAME>Unit</NAME>
typedef GnomeUnit Unit;
</TYPEDEF>
<FUNCTION>
<NAME>gnome_paper_name_list</NAME>
<RETURNS>GList *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_with_name</NAME>
<RETURNS>const GnomePaper  *</RETURNS>
const gchar *papername
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_with_size</NAME>
<RETURNS>const GnomePaper  *</RETURNS>
double pswidth, double psheight
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_name</NAME>
<RETURNS>const gchar 	 *</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_pswidth</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_psheight</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_lmargin</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_tmargin</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_rmargin</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_bmargin</NAME>
<RETURNS>gdouble 	</RETURNS>
const GnomePaper *paper
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_name_default</NAME>
<RETURNS>const gchar 	 *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_unit_name_list</NAME>
<RETURNS>GList *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gnome_unit_with_name</NAME>
<RETURNS>const GnomeUnit 	 *</RETURNS>
const gchar *unitname
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_convert</NAME>
<RETURNS>gdouble 	</RETURNS>
double psvalue, const GnomeUnit *unit
</FUNCTION>
<FUNCTION>
<NAME>gnome_paper_convert_to_points</NAME>
<RETURNS>double  </RETURNS>
double othervalue, const GnomeUnit *unit
</FUNCTION>
<FUNCTION>
<NAME>gnome_url_show</NAME>
<RETURNS>void  </RETURNS>
const char *url
</FUNCTION>
<FUNCTION>
<NAME>gnomelib_register_popt_table</NAME>
<RETURNS>void  </RETURNS>
const struct poptOption *options,const char *description
</FUNCTION>
<FUNCTION>
<NAME>gnomelib_parse_args</NAME>
<RETURNS>poptContext  </RETURNS>
int argc, char *argv[],int popt_flags
</FUNCTION>
<VARIABLE>
<NAME>program_invocation_short_name</NAME>
extern char *program_invocation_short_name;
</VARIABLE>
<VARIABLE>
<NAME>program_invocation_name</NAME>
extern char *program_invocation_name;
</VARIABLE>
