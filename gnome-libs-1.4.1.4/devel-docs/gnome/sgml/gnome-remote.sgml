<refentry id="gnome-gnome-remote">
<refmeta>
<refentrytitle>gnome-remote</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-remote</refname><refpurpose>User preference routines for executing commands on a remote host</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;gnome.h&gt;


void        <link linkend="gnome-remote-get-command">gnome_remote_get_command</link>        (const char *host,
                                             <link linkend="gint">gint</link> *argcp,
                                             char ***argvp);
void        <link linkend="gnome-remote-set-command">gnome_remote_set_command</link>        (const char *host,
                                             <link linkend="gint">gint</link> argc,
                                             const char *const argv[]);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
These routines are used to select and manage the user preferences for
remote command execution.  
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-remote-get-command">gnome_remote_get_command ()</title>
<programlisting>void        gnome_remote_get_command        (const char *host,
                                             <link linkend="gint">gint</link> *argcp,
                                             char ***argvp);</programlisting>
<para>
Given a host, this function will return the user's desired
`rsh'-like command to use to contact that host.  This lets the user
choose how to log in on a host-by-host basis.  If <parameter>host</parameter> is <literal>NULL</literal>,
then the user's default remote shell command is chosen.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>host</parameter>&nbsp;:</entry>
<entry> Host where command should be run
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Result parameter; number of elements in rsh command
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Result parameter; the actual rsh command to use
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-remote-set-command">gnome_remote_set_command ()</title>
<programlisting>void        gnome_remote_set_command        (const char *host,
                                             <link linkend="gint">gint</link> argc,
                                             const char *const argv[]);</programlisting>
<para>
This sets the appropriate options in the config database so that
subsequent calls to <link linkend="gnome-remote-get-command">gnome_remote_get_command</link>() will return <parameter>argv</parameter>.
If <parameter>host</parameter> is <literal>NULL</literal>, then the user's default remote shell is set.
If <parameter>argc</parameter> is <literal>0</literal>, then this instance of the command is deleted.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>host</parameter>&nbsp;:</entry>
<entry> Name of host
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of elements in argument vector
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> Command line to use to contact host
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
