<refentry id="gnome-gnome-config">
<refmeta>
<refentrytitle>gnome-config</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnome-config</refname><refpurpose>
Simple access to configuration values (50% done)</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>

#include &lt;gnome.h&gt;


#define     <link linkend="gnome-config-get-string-with-default">gnome_config_get_string_with_default</link>(path,def)
#define     <link linkend="gnome-config-get-translated-string-with-default">gnome_config_get_translated_string_with_default</link>(path,def)
#define     <link linkend="gnome-config-get-int-with-default">gnome_config_get_int_with_default</link>(path,def)
#define     <link linkend="gnome-config-get-float-with-default">gnome_config_get_float_with_default</link>(path,def)
#define     <link linkend="gnome-config-get-bool-with-default">gnome_config_get_bool_with_default</link>(path,def)
#define     <link linkend="gnome-config-get-vector-with-default">gnome_config_get_vector_with_default</link>(path, argcp, argvp, def)
#define     <link linkend="gnome-config-private-get-string-with-default">gnome_config_private_get_string_with_default</link>(path,def)
#define     <link linkend="gnome-config-private-get-translated-string-with-default">gnome_config_private_get_translated_string_with_default</link>(path,def)
#define     <link linkend="gnome-config-private-get-int-with-default">gnome_config_private_get_int_with_default</link>(path,def)
#define     <link linkend="gnome-config-private-get-float-with-default">gnome_config_private_get_float_with_default</link>(path,def)
#define     <link linkend="gnome-config-private-get-bool-with-default">gnome_config_private_get_bool_with_default</link>(path,def)
#define     <link linkend="gnome-config-private-get-vector-with-default">gnome_config_private_get_vector_with_default</link>(path, argcp, argvp, def)
#define     <link linkend="gnome-config-get-string">gnome_config_get_string</link>         (path)
#define     <link linkend="gnome-config-get-translated-string">gnome_config_get_translated_string</link>(path)
#define     <link linkend="gnome-config-get-int">gnome_config_get_int</link>            (path)
#define     <link linkend="gnome-config-get-float">gnome_config_get_float</link>          (path)
#define     <link linkend="gnome-config-get-bool">gnome_config_get_bool</link>           (path)
#define     <link linkend="gnome-config-get-vector">gnome_config_get_vector</link>         (path, argcp, argvp)
#define     <link linkend="gnome-config-private-get-string">gnome_config_private_get_string</link> (path)
#define     <link linkend="gnome-config-private-get-translated-string">gnome_config_private_get_translated_string</link>(path)
#define     <link linkend="gnome-config-private-get-int">gnome_config_private_get_int</link>    (path)
#define     <link linkend="gnome-config-private-get-float">gnome_config_private_get_float</link>  (path)
#define     <link linkend="gnome-config-private-get-bool">gnome_config_private_get_bool</link>   (path)
#define     <link linkend="gnome-config-private-get-vector">gnome_config_private_get_vector</link> (path, argcp, argvp)
#define     <link linkend="gnome-config-set-string">gnome_config_set_string</link>         (path,new_value)
#define     <link linkend="gnome-config-set-translated-string">gnome_config_set_translated_string</link>(path,value)
#define     <link linkend="gnome-config-set-int">gnome_config_set_int</link>            (path,new_value)
#define     <link linkend="gnome-config-set-float">gnome_config_set_float</link>          (path,new_value)
#define     <link linkend="gnome-config-set-bool">gnome_config_set_bool</link>           (path,new_value)
#define     <link linkend="gnome-config-set-vector">gnome_config_set_vector</link>         (path,argc,argv)
#define     <link linkend="gnome-config-private-set-string">gnome_config_private_set_string</link> (path,new_value)
#define     <link linkend="gnome-config-private-set-translated-string">gnome_config_private_set_translated_string</link>(path,new_value)
#define     <link linkend="gnome-config-private-set-int">gnome_config_private_set_int</link>    (path,new_value)
#define     <link linkend="gnome-config-private-set-float">gnome_config_private_set_float</link>  (path,new_value)
#define     <link linkend="gnome-config-private-set-bool">gnome_config_private_set_bool</link>   (path,new_value)
#define     <link linkend="gnome-config-private-set-vector">gnome_config_private_set_vector</link> (path,argc,argv)
#define     <link linkend="gnome-config-has-section">gnome_config_has_section</link>        (path)
#define     <link linkend="gnome-config-private-has-section">gnome_config_private_has_section</link>(path)
#define     <link linkend="gnome-config-init-iterator">gnome_config_init_iterator</link>      (path)
#define     <link linkend="gnome-config-private-init-iterator">gnome_config_private_init_iterator</link>(path)
#define     <link linkend="gnome-config-init-iterator-sections">gnome_config_init_iterator_sections</link>(path)
#define     <link linkend="gnome-config-private-init-iterator-sections">gnome_config_private_init_iterator_sections</link>(path)
void*       <link linkend="gnome-config-iterator-next">gnome_config_iterator_next</link>      (void *iterator_handle,
                                             char **key,
                                             char **value);
void        <link linkend="gnome-config-drop-all">gnome_config_drop_all</link>           (void);
void        <link linkend="gnome-config-sync">gnome_config_sync</link>               (void);
#define     <link linkend="gnome-config-sync-file">gnome_config_sync_file</link>          (path)
#define     <link linkend="gnome-config-private-sync-file">gnome_config_private_sync_file</link>  (path)
#define     <link linkend="gnome-config-drop-file">gnome_config_drop_file</link>          (path)
#define     <link linkend="gnome-config-private-drop-file">gnome_config_private_drop_file</link>  (path)
#define     <link linkend="gnome-config-clean-file">gnome_config_clean_file</link>         (path)
#define     <link linkend="gnome-config-private-clean-file">gnome_config_private_clean_file</link> (path)
#define     <link linkend="gnome-config-clean-section">gnome_config_clean_section</link>      (path)
#define     <link linkend="gnome-config-private-clean-section">gnome_config_private_clean_section</link>(path)
#define     <link linkend="gnome-config-clean-key">gnome_config_clean_key</link>          (path)
#define     <link linkend="gnome-config-private-clean-key">gnome_config_private_clean_key</link>  (path)
#define     <link linkend="gnome-config-get-real-path">gnome_config_get_real_path</link>      (path)
#define     <link linkend="gnome-config-private-get-real-path">gnome_config_private_get_real_path</link>(path)
void        <link linkend="gnome-config-push-prefix">gnome_config_push_prefix</link>        (const char *path);
void        <link linkend="gnome-config-pop-prefix">gnome_config_pop_prefix</link>         (void);
void        <link linkend="gnome-config-make-vector">gnome_config_make_vector</link>        (const char *string,
                                             int *argcp,
                                             char ***argvp);
char*       <link linkend="gnome-config-assemble-vector">gnome_config_assemble_vector</link>    (int argc,
                                             const char *const argv[]);
void        <link linkend="gnome-config-set-set-handler">gnome_config_set_set_handler</link>    (void (*func) (void *),
                                             void *data);
void        <link linkend="gnome-config-set-sync-handler">gnome_config_set_sync_handler</link>   (void (*func) (void *),
                                             void *data);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>

<para>gnome-config routines provide a simple way of retrieving and
storing configuration values (the routines provide handling of default
values to simplify the code).</para>

  
  <formalpara>
   <title>Definitions</title>

  </formalpara>
  <para>
    <itemizedlist>
      <listitem><para><emphasis>config path:</emphasis> a string that
        specifies which item to retrieve from the configuration
        database.  The config path is composed of three elements: the
        first one is the filename where the information is stored, the
        second component is the section and the third one is the key
        inside the section</para>

        <para>For example, a config path of "/myapp/toolbox/showit"
        could be used to retrieve the setting for whether 'myapp'
        should display its toolbox or not.  In this example "myapp" is
        the file name (which is stored in
        <filename>~/.gnome</filename> directory), "toolbox" is the
        section and "showit" is the key.</para>

        <para>If you want to access an absolute file instead of a
        <filename>~/.gnome</filename>-relative file, then you need to
        surround the filename with equal signs, for example, to access
        the key "mykey" from the section "mysection" in a
        configuration file located in
        <filename>/gnome/var/myconfig</filename> you need to use this
        path: "=/gnome/var/myconfig=/mysection/mykey".</para></listitem>

      <listitem><para><emphasis>default:</emphasis> when retrieving a
        config item, specifies the value to be used if the item is not
        found.</para></listitem>

      <listitem><para><emphasis>private configuration data</emphasis>
        - Normally, config item data is located in files under the
        ~user/.gnome directory in a .ini-like format. These files are
        world-readable. Items that have security or privacy
        implications are stored and retrieved using the "private"
        versions of the gnome-config routines, and the data for these
        items is stored in files under the ~user/.gnome_private
        directory, which is not accessable by anyone except that user
        and the system administrator.</para></listitem>

      <listitem><para>"translated" strings - GNOME's multilingual
       	support means that multiple languages must be supported for
       	configuration items.  The
       	gnome_config_*<link linkend="get-translated-string">get_translated_string</link>() and
       	gnome_config_*<link linkend="set-translated-string">set_translated_string</link>() routines allow you to
       	specify which language a string item should be accessed for.
       	</para></listitem>

      <listitem><para>"section" - a group of config items and other
      config sections</para></listitem>
    </itemizedlist>
   </para>


<formalpara>
  <title>How Config Items are Read</title>

</formalpara>
<para>
    GNOME has a versatile method of storing config items.  When a
    config item is written by a program, it is written to a file under
    the <filename>~/.gnome</filename> hierarchy.  However, when config
    items are read, the process is a little more complicated.  There
    are a number of places that are searched.  If the config item is
    not found in one, then the next place is checked, finally falling
    back to the default value provided by the application.  The
    locations are as follows:
    <itemizedlist>
      <listitem><para><filename>$(sysconfdir)/gnome/config-override</filename>
        - a system administrator would put config items in this directory
        that they don't want to be configurable.</para></listitem>
      <listitem><para><filename>~/.gnome</filename> - this is where the
        user's config items are written to and is the next place that is
        searched</para></listitem>
      <listitem><para><filename>$(sysconfdir)/gnome/config</filename>
        - this directory would hold system wide default configuration values.
        </para></listitem>
    </itemizedlist>
  </para>

  <para>
    Possible uses for this are setting system wide defaults such as
    proxy servers for the system (either using
    <filename>config-override</filename> to enforce such a policy or
    the <filename>config</filename> directory to suggest such a
    default).  It is also possible to configure the application
    through its graphical interface, and then copy the configuration
    file accross to the appropriate system-wide directory.
    The <filename>config-override</filename> directory should be used
    sparingly, as it could annoy or confuse some users.  Note also
    that some applications will not read the config items every time
    they are needed, so putting defaults into the
    <filename>config-override</filename> directory will not always
    completely enforce a setting.
</para>


<para>There are two types of routines</para> 

<para>FIXME: Finish this.  Explain the different types of routines,
explain the _private versions, explain the vector use, etc</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gnome-config-get-string-with-default">gnome_config_get_string_with_default()</title>
<programlisting>#define     gnome_config_get_string_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string.
The returned value should be <link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-translated-string-with-default">gnome_config_get_translated_string_with_default()</title>
<programlisting>#define     gnome_config_get_translated_string_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string appropriate for the current language. The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-int-with-default">gnome_config_get_int_with_default()</title>
<programlisting>#define     gnome_config_get_int_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as an integer.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-float-with-default">gnome_config_get_float_with_default()</title>
<programlisting>#define     gnome_config_get_float_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a floating-point number.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-bool-with-default">gnome_config_get_bool_with_default()</title>
<programlisting>#define     gnome_config_get_bool_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a boolean.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-vector-with-default">gnome_config_get_vector_with_default()</title>
<programlisting>#define     gnome_config_get_vector_with_default(path, argcp, argvp, def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string array.
The returned value should be <link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Number of elements in the vector
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Vector of strings
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-string-with-default">gnome_config_private_get_string_with_default()</title>
<programlisting>#define     gnome_config_private_get_string_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string.
The returned value should be <link linkend="g-free">g_free</link>()'d when no longer needed.  The
item is retrieved from the user's private configuration storage
area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-translated-string-with-default">gnome_config_private_get_translated_string_with_default()</title>
<programlisting>#define     gnome_config_private_get_translated_string_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string appropriate for the current language. The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-int-with-default">gnome_config_private_get_int_with_default()</title>
<programlisting>#define     gnome_config_private_get_int_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as an integer.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-float-with-default">gnome_config_private_get_float_with_default()</title>
<programlisting>#define     gnome_config_private_get_float_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a floating-point number.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-bool-with-default">gnome_config_private_get_bool_with_default()</title>
<programlisting>#define     gnome_config_private_get_bool_with_default(path,def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a boolean.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-vector-with-default">gnome_config_private_get_vector_with_default()</title>
<programlisting>#define     gnome_config_private_get_vector_with_default(path, argcp, argvp, def)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string array.
The returned value should be <link linkend="g-free">g_free</link>()'d when no longer needed.  The
item is retrieved from the user's private configuration storage
area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Number of elements in the vector
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Vector of strings
</entry></row>
<row><entry align="right"><parameter>def</parameter>&nbsp;:</entry>
<entry> A pointer to a flag that will be set if the default value for the item
is returned.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-string">gnome_config_get_string()</title>
<programlisting>#define     gnome_config_get_string(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string.
The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-translated-string">gnome_config_get_translated_string()</title>
<programlisting>#define     gnome_config_get_translated_string(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string
appropriate for the current language. The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-int">gnome_config_get_int()</title>
<programlisting>#define     gnome_config_get_int(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as an integer.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-float">gnome_config_get_float()</title>
<programlisting>#define     gnome_config_get_float(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a floating-point
number.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-bool">gnome_config_get_bool()</title>
<programlisting>#define     gnome_config_get_bool(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a boolean.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-vector">gnome_config_get_vector()</title>
<programlisting>#define     gnome_config_get_vector(path, argcp, argvp)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string array.
The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item.
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Number of elements in the vector
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Vector of strings
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-string">gnome_config_private_get_string()</title>
<programlisting>#define     gnome_config_private_get_string(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a
string. The returned value should be <link linkend="g-free">g_free</link>()'d when no longer
needed.  The item is retrieved from the user's private
configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-translated-string">gnome_config_private_get_translated_string()</title>
<programlisting>#define     gnome_config_private_get_translated_string(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a string appropriate for the current language. The returned value should be
<link linkend="g-free">g_free</link>()'d when no longer needed.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-int">gnome_config_private_get_int()</title>
<programlisting>#define     gnome_config_private_get_int(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as an integer.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-float">gnome_config_private_get_float()</title>
<programlisting>#define     gnome_config_private_get_float(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a floating-point number.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-bool">gnome_config_private_get_bool()</title>
<programlisting>#define     gnome_config_private_get_bool(path)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a boolean.
The item is retrieved from the user's private configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-vector">gnome_config_private_get_vector()</title>
<programlisting>#define     gnome_config_private_get_vector(path, argcp, argvp)</programlisting>
<para>
Retrieves &amp; returns the value of a configuration item as a
string. The returned value should be <link linkend="g-free">g_free</link>()'d when no longer
needed.  The item is retrieved from the user's private
configuration storage area.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to an item in the user-private namespace.
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Number of elements in the vector
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Vector of strings
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-string">gnome_config_set_string()</title>
<programlisting>#define     gnome_config_set_string(path,new_value)</programlisting>
<para>
Stores the string value <parameter>new_value</parameter> in the file/section/key
defined by the <parameter>path</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry> a string value to set.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-translated-string">gnome_config_set_translated_string()</title>
<programlisting>#define     gnome_config_set_translated_string(path,value)</programlisting>
<para>
Stores the string value <parameter>new_value</parameter> in the file/section/key defined
by the <parameter>path</parameter> on the proper section for the current language set by
by the user.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> a string value to set.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-int">gnome_config_set_int()</title>
<programlisting>#define     gnome_config_set_int(path,new_value)</programlisting>
<para>
Stores the integer value <parameter>new_value</parameter> in the file/section/key
defined by the <parameter>path</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry> a int value to set.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-float">gnome_config_set_float()</title>
<programlisting>#define     gnome_config_set_float(path,new_value)</programlisting>
<para>
Stores the double value <parameter>new_value</parameter> in the file/section/key
defined by the <parameter>path</parameter></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry> a double value to set.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-bool">gnome_config_set_bool()</title>
<programlisting>#define     gnome_config_set_bool(path,new_value)</programlisting>
<para>
Stores boolean value <parameter>new_value</parameter> in the file/section/key defined by
<parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry> a boolean value to set
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-vector">gnome_config_set_vector()</title>
<programlisting>#define     gnome_config_set_vector(path,argc,argv)</programlisting>
<para>
Stores vector <parameter>argv</parameter> in the file/section/key defined by
<parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> the number of elements in <parameter>argv</parameter>
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> a string array holding the data to store.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-string">gnome_config_private_set_string()</title>
<programlisting>#define     gnome_config_private_set_string(path,new_value)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-translated-string">gnome_config_private_set_translated_string()</title>
<programlisting>#define     gnome_config_private_set_translated_string(path,new_value)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-int">gnome_config_private_set_int()</title>
<programlisting>#define     gnome_config_private_set_int(path,new_value)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-float">gnome_config_private_set_float()</title>
<programlisting>#define     gnome_config_private_set_float(path,new_value)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-bool">gnome_config_private_set_bool()</title>
<programlisting>#define     gnome_config_private_set_bool(path,new_value)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>new_value</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-set-vector">gnome_config_private_set_vector()</title>
<programlisting>#define     gnome_config_private_set_vector(path,argc,argv)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-has-section">gnome_config_has_section()</title>
<programlisting>#define     gnome_config_has_section(path)</programlisting>
<para>
Queries the gnome configuration file for the presence
of the section specified in <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to a section
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-has-section">gnome_config_private_has_section()</title>
<programlisting>#define     gnome_config_private_has_section(path)</programlisting>
<para>
Queries the private gnome configuration file for the presence
of the section specified in <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path to a section
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-init-iterator">gnome_config_init_iterator()</title>
<programlisting>#define     gnome_config_init_iterator(path)</programlisting>
<para>
Creates an iterator handle that can be used to
iterate over the keys in a section in a gnome configuration
file.  <parameter>path</parameter> must refer to a section.  The returned value
can be used as an iterator for #<link linkend="gnome-config-iterator-next">gnome_config_iterator_next</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path for a section.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-init-iterator">gnome_config_private_init_iterator()</title>
<programlisting>#define     gnome_config_private_init_iterator(path)</programlisting>
<para>
Creates an iterator handle that can be used to
iterate over the keys in a section in a private gnome configuration
file.  <parameter>path</parameter> must refer to a section.  The returned value
can be used as an iterator for #<link linkend="gnome-config-iterator-next">gnome_config_iterator_next</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path for a section.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-init-iterator-sections">gnome_config_init_iterator_sections()</title>
<programlisting>#define     gnome_config_init_iterator_sections(path)</programlisting>
<para>
Creates an iterator handle that can be used to iterate over the
sections in a gnome configuration file.  <parameter>path</parameter> must refer to a
gnome configuration file.  The returned value can be used as an
iterator for #<link linkend="gnome-config-iterator-next">gnome_config_iterator_next</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path for a file.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-init-iterator-sections">gnome_config_private_init_iterator_sections()</title>
<programlisting>#define     gnome_config_private_init_iterator_sections(path)</programlisting>
<para>
Creates an iterator handle that can be used to iterate over the
sections in a private gnome configuration file.  <parameter>path</parameter> must refer to a
gnome configuration file.  The returned value can be used as an
iterator for #<link linkend="gnome-config-iterator-next">gnome_config_iterator_next</link>().</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome configuration path for a file
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-iterator-next">gnome_config_iterator_next ()</title>
<programlisting>void*       gnome_config_iterator_next      (void *iterator_handle,
                                             char **key,
                                             char **value);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>iterator_handle</parameter>&nbsp;:</entry>
<entry> A gnome configu iterator handle, returned from any
iteration start routine or this routine.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>   Address where the key gets stored.
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> Address where the value gets stored.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-drop-all">gnome_config_drop_all ()</title>
<programlisting>void        gnome_config_drop_all           (void);</programlisting>
<para>
Drops any information cached in memory that was fetched with
gnome config.  Any pending information that has not been
written to disk is discarded.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-config-sync">gnome_config_sync ()</title>
<programlisting>void        gnome_config_sync               (void);</programlisting>
<para>
Writes all of the information modified by gnome-config to the
disk.
</para>
<para>
Note: the gnome_config code does not write anything to the
configuration files until this routine is actually invoked.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-config-sync-file">gnome_config_sync_file()</title>
<programlisting>#define     gnome_config_sync_file(path)</programlisting>
<para>
Writes all of the information modified by gnome-config to the
disk for the given file.
</para>
<para>
Note: the gnome_config code does not write anything to the
configuration files until this routine or gnome_config_sync 
is actually invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-sync-file">gnome_config_private_sync_file()</title>
<programlisting>#define     gnome_config_private_sync_file(path)</programlisting>
<para>
Writes all of the information modified by gnome-config to the
disk for the given private file.
</para>
<para>
Note: the gnome_config code does not write anything to the
configuration files until this routine or gnome_config_sync 
is actually invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-drop-file">gnome_config_drop_file()</title>
<programlisting>#define     gnome_config_drop_file(path)</programlisting>
<para>
Releases any memory resources that were allocated from accessing
the configuration file in <parameter>path</parameter>.  Changes will take place after
<link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-drop-file">gnome_config_private_drop_file()</title>
<programlisting>#define     gnome_config_private_drop_file(path)</programlisting>
<para>
Releases any memory resources that were allocated from accessing the
private configuration file in <parameter>path</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-clean-file">gnome_config_clean_file()</title>
<programlisting>#define     gnome_config_clean_file(path)</programlisting>
<para>
Cleans up the configuration file specified by <parameter>path</parameter> from any
configuration information.
</para>
<para>
Changes will take place after <link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-clean-file">gnome_config_private_clean_file()</title>
<programlisting>#define     gnome_config_private_clean_file(path)</programlisting>
<para>
Cleans up the private configuration file specified by <parameter>path</parameter> from
any configuration information.
</para>
<para>
Changes will take place after <link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> A gnome-config path
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-clean-section">gnome_config_clean_section()</title>
<programlisting>#define     gnome_config_clean_section(path)</programlisting>
<para>
Cleans up the section specified by <parameter>path</parameter> from any
configuration information.  Changes will only take place
after <link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a section.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-clean-section">gnome_config_private_clean_section()</title>
<programlisting>#define     gnome_config_private_clean_section(path)</programlisting>
<para>
Cleans up the section specified by <parameter>path</parameter> in a private file from any
configuration information.  Changes will only take place after
<link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a section.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-clean-key">gnome_config_clean_key()</title>
<programlisting>#define     gnome_config_clean_key(path)</programlisting>
<para>
Removes the definition for the key on a gnome configuration file.
</para>
<para>
Changes will take place after <link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-clean-key">gnome_config_private_clean_key()</title>
<programlisting>#define     gnome_config_private_clean_key(path)</programlisting>
<para>
Removes the definition for the key on a private gnome configuration
file.
</para>
<para>
Changes will take place after <link linkend="gnome-config-sync">gnome_config_sync</link> has been invoked.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path to a key.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-get-real-path">gnome_config_get_real_path()</title>
<programlisting>#define     gnome_config_get_real_path(path)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-private-get-real-path">gnome_config_private_get_real_path()</title>
<programlisting>#define     gnome_config_private_get_real_path(path)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-push-prefix">gnome_config_push_prefix ()</title>
<programlisting>void        gnome_config_push_prefix        (const char *path);</programlisting>
<para>
<parameter>path</parameter> is a prefix that will be prepended automatically to any
non-absolute configuration path in gnome config.
</para>
<para>
This is used to simplify application loading code.
</para>
<para>
Library code will usually have to set the prefix before doing
any gnome-configuration access, since the application might
be using their own prefix.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> a gnome configuration path prefix
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-pop-prefix">gnome_config_pop_prefix ()</title>
<programlisting>void        gnome_config_pop_prefix         (void);</programlisting>
<para>
Call this routine to remove the current configuration prefix from the stack.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnome-config-make-vector">gnome_config_make_vector ()</title>
<programlisting>void        gnome_config_make_vector        (const char *string,
                                             int *argcp,
                                             char ***argvp);</programlisting>
<para>
Creates a new vector from a string as it stored in the config file,
breaks the string on spaces except if the space is escaped with a
backslash.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> The stringified vector to decode into 'argcp' and 'argvp'
</entry></row>
<row><entry align="right"><parameter>argcp</parameter>&nbsp;:</entry>
<entry> Returns the number of elements in 'argvp'
</entry></row>
<row><entry align="right"><parameter>argvp</parameter>&nbsp;:</entry>
<entry> Returns the array of strings found in 'rr'.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-assemble-vector">gnome_config_assemble_vector ()</title>
<programlisting>char*       gnome_config_assemble_vector    (int argc,
                                             const char *const argv[]);</programlisting>
<para>
This routine returns the the strings in the array contactenated by
spaces.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>argc</parameter>&nbsp;:</entry>
<entry> Number of elements in the <parameter>argv</parameter> string array.
</entry></row>
<row><entry align="right"><parameter>argv</parameter>&nbsp;:</entry>
<entry> An array of strings.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="g-malloc">g_malloc</link>()ed string with the concatenation results.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-set-handler">gnome_config_set_set_handler ()</title>
<programlisting>void        gnome_config_set_set_handler    (void (*func) (void *),
                                             void *data);</programlisting>
<para>
Internal Obsolete.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>func</parameter>&nbsp;:</entry>
<entry> Obsolete
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> Obsolete
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="gnome-config-set-sync-handler">gnome_config_set_sync_handler ()</title>
<programlisting>void        gnome_config_set_sync_handler   (void (*func) (void *),
                                             void *data);</programlisting>
<para>
Internal routine</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>func</parameter>&nbsp;:</entry>
<entry> obsolete
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> obsolete
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
