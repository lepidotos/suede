; -*- scheme -*-

(include "gnome-enums.defs")

;; gnome-dialog.h
(define-object GnomeDialog (GtkWindow)
  (fields
   (GtkWidget vbox)))

(define-func gnome_dialog_new
  GtkWidget
  ((string title)
   (string b1 (= "NULL")) ; hack hack hack
   (string b2 (= "NULL"))
   (string b3 (= "NULL"))
   (string b4 (= "NULL"))
   (string b5 (= "NULL"))
   (string b6 (= "NULL"))
   (string b7 (= "NULL"))
   (string b8 (= "NULL"))
   (string b9 (= "NULL"))
   (string b10 (= "NULL"))
   (string b11 (= "NULL"))))

(define-func gnome_dialog_set_parent
  none
  ((GnomeDialog dialog)
   (GtkWindow parent)))

; gnome_dialog_button_connect
(define-func gnome_dialog_run
  int
  ((GnomeDialog dialog)))

(define-func gnome_dialog_run_and_close
  int
  ((GnomeDialog dialog)))

(define-func gnome_dialog_set_default
  none
  ((GnomeDialog dialog)
   (int button)))

(define-func gnome_dialog_set_sensitive
  none
  ((GnomeDialog dialog)
   (int button)
   (bool setting)))

(define-func gnome_dialog_set_accelerator
  none
  ((GnomeDialog dialog)
   (int button)
   (uint accelerator_key)
   (GdkModifierType accelerator_mods)))

(define-func gnome_dialog_close
  none
  ((GnomeDialog dialog)))

(define-func gnome_dialog_close_hides
  none
  ((GnomeDialog dialog)
   (bool just_hide)))

(define-func gnome_dialog_set_close
  none
  ((GnomeDialog dialog)
   (bool click_closes)))

(define-func gnome_dialog_editable_enters
  none
  ((GnomeDialog dialog)
   (GtkEditable editable)))

(define-func gnome_dialog_append_buttons
  none
  ((GnomeDialog dialog)
   (string b1 (= "NULL")) ; hack hack hack
   (string b2 (= "NULL"))
   (string b3 (= "NULL"))
   (string b4 (= "NULL"))
   (string b5 (= "NULL"))
   (string b6 (= "NULL"))
   (string b7 (= "NULL"))
   (string b8 (= "NULL"))
   (string b9 (= "NULL"))
   (string b10 (= "NULL"))
   (string b11 (= "NULL"))))

(define-func gnome_dialog_append_button
  none
  ((GnomeDialog dialog)
   (string name)))

(define-func gnome_dialog_append_button_with_pixmap
  none
  ((GnomeDialog dialog)
   (string name)
   (string pixmap)))

;; gnome-about.h
(define-object GnomeAbout (GnomeDialog))

;gnome_about_new -- has a string vector argument

;; gnome-pixmap.h
(define-object GnomePixmap (GtkWidget))

(define-func gnome_pixmap_new_from_file
  GtkWidget
  ((string filename)))

(define-func gnome_pixmap_new_from_file_at_size
  GtkWidget
  ((string filename)
   (int width) (int height)))

(define-func gnome_pixmap_new_from_gnome_pixmap
  GtkWidget
  ((GnomePixmap gpixmap)))

(define-func gnome_pixmap_new_from_imlib
  GtkWidget
  ((GdkImlibImage image)))

(define-func gnome_pixmap_new_from_imlib_at_size
  GtkWidget
  ((GdkImlibImage image)
   (int width) (int height)))

(define-func gnome_pixmap_load_file
  none
  ((GnomePixmap gpixmap)
   (string filename)))

(define-func gnome_pixmap_load_file_at_size
  none
  ((GnomePixmap gpixmap)
   (string filename)
   (int width) (int height)))

(define-func gnome_pixmap_load_imlib
  none
  ((GnomePixmap gpixmap)
   (GdkImlibImage image)))

(define-func gnome_pixmap_load_imlib_at_size
  none
  ((GnomePixmap gpixmap)
   (GdkImlibImage image)
   (int width) (int height)))

;; gnome-animator.h
(define-object GnomeAnimator (GtkWidget))

(define-func gnome_animator_new_with_size
  GtkWidget
  ((uint width)
   (uint height)))

(define-func gnome_animator_set_loop_type
  none
  ((GnomeAnimator animator)
   (GnomeAnimatorLoopType loop_type)))

(define-func gnome_animator_get_loop_type
  GnomeAnimatorLoopType
  ((GnomeAnimator animator)))

(define-func gnome_animator_set_playback_direction
  none
  ((GnomeAnimator animator)
   (int playback_direction)))

(define-func gnome_animator_get_playback_direction
  int
  ((GnomeAnimator animator)))

(define-func gnome_animator_append_frame_from_imlib_at_size
  bool
  ((GnomeAnimator animator)
   (GdkImlibImage image)
   (int x_offset) (int y_offset)
   (uint interval)
   (uint width) (uint height)))

(define-func gnome_animator_append_frame_from_imlib
  bool
  ((GnomeAnimator animator)
   (GdkImlibImage image)
   (int x_offset) (int y_offset)
   (uint interval)))

(define-func gnome_animator_append_frame_from_file_at_size
  bool
  ((GnomeAnimator animator)
   (string name)
   (int x_offset) (int y_offset)
   (uint interval)
   (uint width) (uint height)))

(define-func gnome_animator_append_frame_from_file
  bool
  ((GnomeAnimator animator)
   (string name)
   (int x_offset) (int y_offset)
   (uint interval)))

(define-func gnome_animator_append_frames_from_imlib_at_size
  bool
  ((GnomeAnimator animator)
   (GdkImlibImage image)
   (int x_offset) (int y_offset)
   (uint interval)
   (int x_unit)
   (uint width) (uint height)))

(define-func gnome_animator_append_frames_from_imlib
  bool
  ((GnomeAnimator animator)
   (GdkImlibImage image)
   (int x_offset) (int y_offset)
   (uint interval)
   (int x_unit)))

(define-func gnome_animator_append_frames_from_file_at_size
  bool
  ((GnomeAnimator animator)
   (string name)
   (int x_offset) (int y_offset)
   (uint interval)
   (int x_unit)
   (uint width) (uint height)))

(define-func gnome_animator_append_frames_from_file
  bool
  ((GnomeAnimator animator)
   (string name)
   (int x_offset) (int y_offset)
   (uint interval)
   (int x_unit)))

(define-func gnome_animator_append_frame_from_gnome_pixmap
  bool
  ((GnomeAnimator animator)
   (GnomePixmap pixmap)
   (int x_offset) (int y_offset)
   (uint interval)))

(define-func gnome_animator_start
  none
  ((GnomeAnimator animator)))

(define-func gnome_animator_stop
  none
  ((GnomeAnimator animator)))

(define-func gnome_animator_advance
  bool
  ((GnomeAnimator animator)
   (int num)))

(define-func gnome_animator_goto_frame
  none
  ((GnomeAnimator animator)
   (uint num_frame)))

(define-func gnome_animator_get_current_frame_number
  uint
  ((GnomeAnimator animator)))

(define-func gnome_animator_get_status
  GnomeAnimatorStatus
  ((GnomeAnimator animator)))

(define-func gnome_animator_set_playback_speed
  none
  ((GnomeAnimator animator)
   (double speed)))

(define-func gnome_animator_get_playback_speed
  double
  ((GnomeAnimator animator)))


;; gnome-app.h

(define-object GnomeApp (GtkWindow))

; forward declarations ...
(define-object GnomeDockItem (GtkBin))
(define-object GnomeDock (GtkContainer))

(define-func gnome_app_new
  GtkWidget
  ((string appname)
   (string title)))

(define-func gnome_app_set_menus
  none
  ((GnomeApp app)
   (GtkMenuBar menubar)))

(define-func gnome_app_set_toolbar
  none
  ((GnomeApp app)
   (GtkToolbar toolbar)))

(define-func gnome_app_set_statusbar
  none
  ((GnomeApp app)
   (GtkWidget statusbar)))

(define-func gnome_app_set_statusbar_custom
  none
  ((GnomeApp app)
   (GtkWidget container)
   (GtkWidget statusbar)))

(define-func gnome_app_set_contents
  none
  ((GnomeApp app)
   (GtkWidget contents)))

(define-func gnome_app_add_toolbar
  none
  ((GnomeApp app)
   (GtkToolbar toolbar)
   (string name)
   (GnomeDockItemBehavior behavior)
   (GnomeDockPlacement placement)
   (int band_num)
   (int band_position)
   (int offset)))

(define-func gnome_app_add_docked
  none
  ((GnomeApp app)
   (GtkWidget widget)
   (string name)
   (GnomeDockItemBehavior behavior)
   (GnomeDockPlacement placement)
   (int band_num)
   (int band_position)
   (int offset)))

(define-func gnome_app_add_dock_item
  none
  ((GnomeApp app)
   (GnomeDockItem item)
   (GnomeDockPlacement placement)
   (int band_num)
   (int band_position)
   (int offset)))

(define-func gnome_app_enable_layout_config
  none
  ((GnomeApp app)
   (bool enable)))

(define-func gnome_app_get_dock
  GnomeDock
  ((GnomeApp app)))

(define-func gnome_app_get_dock_item_by_name
  GnomeDockItem
  ((GnomeApp app)
   (string name)))


;; other gnome-app stuff
(define-func gnome_app_remove_menus
  none
  ((GnomeApp app)
   (string path)
   (int items)))

(define-func gnome_app_remove_menu_range
  none
  ((GnomeApp app)
   (string path)
   (int start)
   (int items)))

; the gnome-app-util stuff ...
; ignore return value for simplicity
(define-func gnome_app_message
  none
  ((GnomeApp app)
   (string message)))

(define-func gnome_app_flash
  none
  ((GnomeApp app)
   (string flash)))

(define-func gnome_app_error
  none
  ((GnomeApp app)
   (string error)))

(define-func gnome_app_warning
  none
  ((GnomeApp app)
   (string warning)))

;gnome_app_question
;gnome_app_question_modal
;gnome_app_ok_cancel
;gnome_app_ok_cancel_modal
;gnome_app_request_string
;gnome_app_request_password


;; gnome-appbar.h
(define-object GnomeAppBar (GtkHBox))

(define-func gnome_appbar_new
  GtkWidget
  ((bool has_progress)
   (bool has_status)
   (GnomePreferencesType interactivity)))

(define-func GNOME_APPBAR_INTERACTIVE
  bool
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_set_status
  none
  ((GnomeAppBar appbar)
   (string status)))

(define-func gnome_appbar_set_default
  none
  ((GnomeAppBar appbar)
   (string default_status)))

(define-func gnome_appbar_push
  none
  ((GnomeAppBar appbar)
   (string status)))

(define-func gnome_appbar_pop
  none
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_clear_stack
  none
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_set_progress
  none
  ((GnomeAppBar appbar)
   (float percentage)))

(define-func gnome_appbar_get_progress
  GtkProgress
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_refresh
  none
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_set_prompt
  none
  ((GnomeAppBar appbar)
   (string prompt)
   (bool modal)))

(define-func gnome_appbar_clear_prompt
  none
  ((GnomeAppBar appbar)))

(define-func gnome_appbar_get_response
  string
  ((GnomeAppBar appbar)))


;; gnome-calculator.h
(define-object GnomeCalculator (GtkVBox)
  (fields
   (double result)))

(define-func gnome_calculator_new
  GtkWidget
  ())

(define-func gnome_calculator_clear
  none
  ((GnomeCalculator calc)
   (bool reset)))

(define-func gnome_calculator_set
  none
  ((GnomeCalculator calc)
   (double result)))


;; gnome-canvas.h

(define-object GnomeCanvas (GtkLayout))
(define-object GnomeCanvasItem (GtkObject))
(define-object GnomeCanvasGroup (GnomeCanvasItem))

;gnome_canvas_item_new
;gnome_canvas_item_set
(define-func gnome_canvas_item_move
  none
  ((GnomeCanvasItem item)
   (double dx) (double dy)))

; XXXX -- why are these defined ??
;(define-func gnome_canvas_item_scale
;  none
;  ((GnomeCanvasItem item)
;   (double x) (double y)
;   (double scale_x) (double scale_y)))

;(define-func gnome_canvas_item_rotate
;  none
;  ((GnomeCanvasItem item)
;   (double x) (double y)
;   (double angle)))

(define-func gnome_canvas_item_raise
  none
  ((GnomeCanvasItem item)
   (int positions)))

(define-func gnome_canvas_item_lower
  none
  ((GnomeCanvasItem item)
   (int positions)))

(define-func gnome_canvas_item_raise_to_top
  none
  ((GnomeCanvasItem item)))

(define-func gnome_canvas_item_lower_to_bottom
  none
  ((GnomeCanvasItem item)))

(define-func gnome_canvas_item_show
  none
  ((GnomeCanvasItem item)))

(define-func gnome_canvas_item_hide
  none
  ((GnomeCanvasItem item)))

(define-func gnome_canvas_item_grab
  int
  ((GnomeCanvasItem item)
   (GdkEventMask mask)
   (GdkCursor cursor)
   (uint etime)))

(define-func gnome_canvas_item_ungrab
  none
  ((GnomeCanvasItem item)
   (uint etime)))

; gnome_canvas_item_{w2i,i2w}
(define-func gnome_canvas_item_reparent
  none
  ((GnomeCanvasItem item)
   (GnomeCanvasGroup new_group)))

(define-func gnome_canvas_item_grab_focus
  none
  ((GnomeCanvasItem item)))

; gnome_canvas_item_get_bounds

(define-func gnome_canvas_new
  GtkWidget
  ())

(define-func gnome_canvas_root
  GnomeCanvasGroup
  ((GnomeCanvas canvas)))

(define-func gnome_canvas_set_scroll_region
  none
  ((GnomeCanvas canvas)
   (double x1) (double y1)
   (double x2) (double y2)))
; gnome_canvas_get_scroll_region

(define-func gnome_canvas_set_pixels_per_unit
  none
  ((GnomeCanvas canvas)
   (double n)))

(define-func gnome_canvas_scroll_to
  none
  ((GnomeCanvas canvas)
   (int cx) (int cy)))
; gnome_canvas_get_scroll_offsets

(define-func gnome_canvas_update_now
  none
  ((GnomeCanvas canvas)))

;(define-func gnome_canvas_get_item_at
;  GnomeCanvasItem
;  ((GnomeCanvas canvas)
;   (double x) (double y)))

(define-func gnome_canvas_request_redraw
  none
  ((GnomeCanvas canvas)
   (int x1) (int y1)
   (int x2) (int y2)))

; gnome_canvas_{w2c,c2w}
; gnome_canvas_{window_to_world,world_to_window}

; gnome_canvas_get_color

(define-func gnome_canvas_set_stipple_origin
  none
  ((GnomeCanvas canvas)
   (GdkGC gc)))

;; The canvas items -- their attributes are set with by gnome_canvas_item_new
(define-object GnomeCanvasImage   (GnomeCanvasItem))
(define-object GnomeCanvasLine    (GnomeCanvasItem))
(define-object GnomeCanvasPolygon (GnomeCanvasItem))
(define-object GnomeCanvasRE      (GnomeCanvasItem))
(define-object GnomeCanvasRect    (GnomeCanvasItem))
(define-object GnomeCanvasEllipse (GnomeCanvasItem))
(define-object GnomeCanvasText    (GnomeCanvasItem))
(define-object GnomeCanvasWidget  (GnomeCanvasItem))

;; gnome-client.h

(define-object GnomeClient (GtkObject))

(define-func gnome_client_disable_master_connection
  none
  ())

(define-func gnome_master_client
  GnomeClient
  ())

(define-func gnome_cloned_client
  GnomeClient
  ())

(define-func gnome_client_new
  GnomeClient
  ())

(define-func gnome_client_new_without_connection
  GnomeClient
  ())

(define-func gnome_client_connect
  none
  ((GnomeClient client)))

(define-func gnome_client_disconnect
  none
  ((GnomeClient client)))

(define-func gnome_client_set_id
  none
  ((GnomeClient client)
   (string client_id)))

(define-func gnome_client_get_id
  static_string
  ((GnomeClient client)))

(define-func gnome_client_get_previous_id
  static_string
  ((GnomeClient client)))

(define-func gnome_client_get_config_prefix
  static_string
  ((GnomeClient client)))

(define-func gnome_client_get_global_config_prefix
  static_string
  ((GnomeClient client)))

; gnome_client_set_clone_command
(define-func gnome_client_set_current_directory
  none
  ((GnomeClient client)
   (string dir)))
; gnome_client_set_discard_command
(define-func gnome_client_set_environment
  none
  ((GnomeClient client)
   (string name) (string value)))
(define-func gnome_client_set_process_id
  none
  ((GnomeClient client)
   (int pid)))
(define-func gnome_client_set_program
  none
  ((GnomeClient client)
   (string program)))
; gnome_client_set_restart_command
; gnome_client_set_resign_command

(define-func gnome_client_set_restart_style
  none
  ((GnomeClient client)
   (GnomeRestartStyle style)))

(define-func gnome_client_set_priority
  none
  ((GnomeClient client)
   (uint priority)))

; gnome_client_set_shutdown_command
(define-func gnome_client_set_user_id
  none
  ((GnomeClient client)
   (string user_id)))

(define-func gnome_client_request_phase_2
  none
  ((GnomeClient client)))

; gnome_client_request_interaction
(define-func gnome_interaction_key_return
  none
  ((int key)
   (bool cancel_shutdown)))

(define-func gnome_client_request_save
  none
  ((GnomeClient client)
   (GnomeSaveStyle save_style)
   (bool shutdown)
   (GnomeInteractStyle interact_style)
   (bool fast)
   (bool global)))

(define-func gnome_client_flush
  none
  ((GnomeClient client)))

(define-func gnome_client_get_flags
  int ;GnomeClientFlags
  ((GnomeClient client)))

;; gnome-color-picker.h

(define-object GnomeColorPicker (GtkButton))

(define-func gnome_color_picker_new
  GtkWidget
  ())

(define-func gnome_color_picker_set_d
  none
  ((GnomeColorPicker cp)
   (double r) (double g) (double b) (double a)))
; gnome_color_picker_get_d

(define-func gnome_color_picker_set_i8
  none
  ((GnomeColorPicker cp)
   (uint r) (uint g) (uint b) (uint a)))
; gnome_color_picker_get_i8

(define-func gnome_color_picker_set_i16
  none
  ((GnomeColorPicker cp)
   (uint r) (uint g) (uint b) (uint a)))
; gnome_color_picker_get_i16

(define-func gnome_color_picker_set_dither
  none
  ((GnomeColorPicker cp)
   (bool dither)))

(define-func gnome_color_picker_set_use_alpha
  none
  ((GnomeColorPicker cp)
   (bool use_alpha)))

(define-func gnome_color_picker_set_title
  none
  ((GnomeColorPicker cp)
   (string title)))

;; gnome-dateedit.h
(define-object GnomeDateEdit (GnomeHBox))

(define-func gnome_date_edit_new
  GtkWidget
  ((uint the_time)
   (bool show_time)
   (bool use_24_format)))

(define-func gnome_date_edit_new_flags
  GtkWidget
  ((uint the_time)
   (GnomeDateEditFlags flags)))

(define-func gnome_date_edit_set_time
  none
  ((GnomeDateEdit gde)
   (uint the_time)))

(define-func gnome_date_edit_set_popup_range
  none
  ((GnomeDateEdit gde)
   (int low_hour)
   (int up_hour)))

(define-func gnome_date_edit_get_date
  uint
  ((GnomeDateEdit gde)))

(define-func gnome_date_edit_set_flags
  none
  ((GnomeDateEdit gde)
   (GnomeDateEditFlags flags)))

(define-func gnome_date_edit_get_flags
  GnomeDateEditFlags
  ((GnomeDateEdit gde)))

;; gnome-dentry-edit.h
(define-object GnomeDEntryEdit (GtkObject))

(define-func gnome_dentry_edit_new
  GtkObject
  ())

(define-func gnome_dentry_edit_new_notebook
  GtkObject
  ((GtkNotebook notebook)))

(define-func gnome_dentry_edit_child1
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_edit_child2
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_edit_clear
  none
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_edit_load_file
  none
  ((GnomeDEntryEdit dee)
   (string filename)))

; put some interp version to save dentry's

(define-func gnome_dentry_edit_get_icon
  string
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_edit_get_name
  string
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_name_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_comment_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_exec_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_tryexec_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_doc_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))

(define-func gnome_dentry_get_icon_entry
  GtkWidget
  ((GnomeDEntryEdit dee)))


;; gnome-dialog-util.h
(define-func gnome_ok_dialog
  GtkWidget
  ((string message)))
(define-func gnome_ok_dialog_parented
  GtkWidget
  ((string message)
   (GtkWindow parent)))

(define-func gnome_error_dialog
  GtkWidget
  ((string message)))
(define-func gnome_error_dialog_parented
  GtkWidget
  ((string message)
   (GtkWindow parent)))

(define-func gnome_warning_dialog
  GtkWidget
  ((string message)))
(define-func gnome_warning_dialog_parented
  GtkWidget
  ((string message)
   (GtkWindow parent)))

;gnome_question_dialog
;gnome_question_dialog_parented
;gnome_ok_cancel_dialog
;gnome_ok_cancel_dialog_parented
;gnome_request_dialog


;; gnome-dock-item.h
(define-func gnome_dock_item_new
  GtkWidget
  ((string name)
   (GnomeDockItemBehavior behavior)))

(define-func gnome_dock_item_get_child
  GtkWidget
  ((GnomeDockItem item)))

(define-func gnome_dock_item_get_name
  string
  ((GnomeDockItem item)))

(define-func gnome_dock_item_set_shadow_type
  none
  ((GnomeDockItem item)
   (GtkShadowType type)))

(define-func gnome_dock_item_get_shadow_type
  GtkShadowType
  ((GnomeDockItem item)))

(define-func gnome_dock_item_set_orientation
  bool
  ((GnomeDockItem item)
   (GtkOrientation orientation)))

(define-func gnome_dock_item_get_orientation
  GtkOrientation
  ((GnomeDockItem item)))

(define-func gnome_dock_item_get_behavior
  GnomeDockItemBehavior
  ((GnomeDockItem item)))


;; gnome-dock-band.h
(define-object GnomeDockBand (GtkContainer))

(define-func gnome_dock_band_new
  GtkWidget
  ())

(define-func gnome_dock_band_set_orientation
  none
  ((GnomeDockBand band)
   (GtkOrientation orientation)))

(define-func gnome_dock_band_get_orientation
  GtkOrientation
  ((GnomeDockBand band)))

(define-func gnome_dock_band_insert
  bool
  ((GnomeDockBand band)
   (GtkWidget child)
   (uint offset)
   (int position)))

(define-func gnome_dock_band_prepend
  bool
  ((GnomeDockBand band)
   (GtkWidget child)
   (uint offset)))

(define-func gnome_dock_band_append
  bool
  ((GnomeDockBand band)
   (GtkWidget child)
   (uint offset)))

(define-func gnome_dock_band_set_child_offset
  none
  ((GnomeDockBand band)
   (GtkWidget child)
   (uint offset)))

(define-func gnome_dock_band_get_child_offset
  uint
  ((GnomeDockBand band)
   (GtkWidget child)))

; gnome_dock_band_move_child
(define-func gnome_dock_band_get_num_children
  uint
  ((GnomeDockBand band)))

(define-func gnome_dock_band_drag_begin
  none
  ((GnomeDockBand band)
   (GnomeDockItem item)))

(define-func gnome_dock_band_drag_to
  none
  ((GnomeDockBand band)
   (GnomeDockItem item)
   (int x) (int y)))

(define-func gnome_dock_band_drag_end
  none
  ((GnomeDockBand band)
   (GnomeDockItem item)))


;; gnome-dock.h
(define-func gnome_dock_new
  GtkWidget
  ())

(define-func gnome_dock_allow_floating_items
  none
  ((GnomeDock dock)
   (bool enable)))

(define-func gnome_dock_add_item
  none
  ((GnomeDock dock)
   (GnomeDockItem item)
   (GnomeDockPlacement placement)
   (uint band_num)
   (int position)
   (uint offset)
   (bool in_new_band)))

(define-func gnome_dock_add_floating_item
  none
  ((GnomeDock dock)
   (GnomeDockItem item)
   (int x) (int y)
   (GtkOrientation orientation)))

(define-func gnome_dock_set_client_area
  none
  ((GnomeDock dock)
   (GtkWidget widget)))

(define-func gnome_dock_get_client_area
  GtkWidget
  ((GnomeDock dock)))

;gnome_dock_get_item_by_name


;; gnome-entry.h
(define-object GnomeEntry (GtkCombo))

(define-func gnome_entry_new
  GtkWidget
  ((string history_id)))

(define-func gnome_entry_gtk_entry
  GtkWidget
  ((GnomeEntry gentry)))

(define-func gnome_entry_set_history_id
  none
  ((GnomeEntry gentry)
   (string history_id)))

(define-func gnome_entry_prepend_history
  none
  ((GnomeEntry gentry)
   (int save)
   (string text)))

(define-func gnome_entry_append_history
  none
  ((GnomeEntry gentry)
   (int save)
   (string text)))

(define-func gnome_entry_load_history
  none
  ((GnomeEntry gentry)))

(define-func gnome_entry_save_history
  none
  ((GnomeEntry gentry)))


;; gnome-file-entry.h
(define-object GnomeFileEntry (GtkHBox))

(define-func gnome_file_entry_new
  GtkWidget
  ((string history_id)
   (string browse_dialog_title)))

(define-func gnome_file_entry_gnome_entry
  GtkWidget
  ((GnomeFileEntry fentry)))

(define-func gnome_file_entry_gtk_entry
  GtkWidget
  ((GnomeFileEntry fentry)))

(define-func gnome_file_entry_set_title
  none
  ((GnomeFileEntry fentry)
   (string browse_dialog_title)))

(define-func gnome_file_entry_set_default_path
  none
  ((GnomeFileEntry fentry)
   (string path)))

(define-func gnome_file_entry_set_directory
  none
  ((GnomeFileEntry fentry)
   (bool directory_entry)))

(define-func gnome_file_entry_set_modal
  none
  ((GnomeFileEntry fentry)
   (bool is_modal)))
  

;; gnome-font-picker.h
(define-object GnomeFontPicker (GtkButton))

(define-func gnome_font_picker_new
  GtkWidget
  ())

(define-func gnome_font_picker_set_title
  none
  ((GnomeFontPicker gfp)
   (string title)))

(define-func gnome_font_picker_get_mode
  GnomeFontPickerMode
  ((GnomeFontPicker gfp)))

(define-func gnome_font_picker_set_mode
  none
  ((GnomeFontPicker gfp)
   (GnomeFontPickerMode mode)))

(define-func gnome_font_picker_fi_set_use_font_in_label
  none
  ((GnomeFontPicker gfp)
   (bool use_font_in_label)
   (int size)))

(define-func gnome_font_picker_fi_set_show_size
  none
  ((GnomeFontPicker gfp)
   (bool show_size)))

(define-func gnome_font_picker_uw_set_widget
  none
  ((GnomeFontPicker gfp)
   (GtkWidget widget)))

(define-func gnome_font_picker_get_font_name
  static_string
  ((GnomeFontPicker gfp)))

(define-func gnome_font_picker_get_font
  GdkFont
  ((GnomeFontPicker gfp)))

(define-func gnome_font_picker_set_font_name
  bool
  ((GnomeFontPicker gfp)
   (string fontname)))

(define-func gnome_font_picker_get_preview_text
  static_string
  ((GnomeFontPicker gfp)))

(define-func gnome_font_picker_set_preview_text
  none
  ((GnomeFontPicker gfp)
   (string text)))

;; I have left out the GnomeFontSelector, since GtkFontSelector is better.

;; gnome-guru.h
(define-object GnomeGuru (GtkVBox))

(define-func gnome_guru_new
  GtkWidget
  ((string name (= "NULL"))
   (GtkWidget graphic (= "NULL"))
   (GnomeDialog dialog (= "NULL"))))

(define-func gnome_guru_append_page
  none
  ((GnomeGuru guru)
   (string name)
   (GtkWidget page)))

(define-func gnome_guru_next_set_sensitive
  none
  ((GnomeGuru guru)
   (bool sensitivity)))

(define-func gnome_guru_back_set_sensitive
  none
  ((GnomeGuru guru)
   (bool sensitivity)))

(define-func gnome_guru_current_page
  GtkWidget
  ((GnomeGuru guru)))


;; gnome-href.h
(define-object GnomeHRef (GtkButton))

(define-func gnome_href_new
  GtkWidget
  ((string url)
   (string label (= "NULL"))))

(define-func gnome_href_set_url
  none
  ((GnomeHRef href)
   (string url)))

(define-func gnome_href_get_url
  static_string
  ((GnomeHRef href)))

(define-func gnome_href_set_label
  none
  ((GnomeHRef href)
   (string label)))

(define-func gnome_href_get_label
  static_string
  ((GnomeHRef href)))


;; gnome-icon-entry.h
(define-object GnomeIconEntry (GtkVBox))

(define-func gnome_icon_entry_new
  GtkWidget
  ((string history_id)
   (string browse_dialog_title)))

(define-func gnome_icon_entry_set_pixmap_subdir
  none
  ((GnomeIconEntry ientry)
   (string subdir)))

(define-func gnome_icon_entry_set_icon
  none
  ((GnomeIconEntry ientry)
   (string filename)))

(define-func gnome_icon_entry_gnome_file_entry
  GtkWidget
  ((GnomeIconEntry ientry)))

(define-func gnome_icon_entry_gnome_entry
  GtkWidget
  ((GnomeIconEntry ientry)))

(define-func gnome_icon_entry_gtk_entry
  GtkWidget
  ((GnomeIconEntry ientry)))

(define-func gnome_icon_entry_get_filename
  string
  ((GnomeIconEntry ientry)))


;; gnome-icon-list.h
(define-object GnomeIconList (GnomeCanvas))

(define-func gnome_icon_list_new
  GtkWidget
  ((uint icon_width)
   (GtkAdjustment adj (null-ok) (= "NULL"))
   (bool is_editable (= "FALSE"))))

(define-func gnome_icon_list_set_hadjustment
  none
  ((GnomeIconList gil)
   (GtkAdjustment hadj)))

(define-func gnome_icon_list_set_vadjustment
  none
  ((GnomeIconList gil)
   (GtkAdjustment vadj)))

(define-func gnome_icon_list_freeze
  none
  ((GnomeIconList gil)))

(define-func gnome_icon_list_thaw
  none
  ((GnomeIconList gil)))

(define-func gnome_icon_list_insert
  none
  ((GnomeIconList gil)
   (int pos)
   (string icon_filename)
   (string text)))

(define-func gnome_icon_list_insert_imlib
  none
  ((GnomeIconList gil)
   (int pos)
   (GdkImlibImage image)
   (string text)))

(define-func gnome_icon_list_append
  int
  ((GnomeIconList gil)
   (string icon_filename)
   (string text)))

(define-func gnome_icon_list_append_imlib
  int
  ((GnomeIconList gil)
   (GdkImlibImage image)
   (string text)))

(define-func gnome_icon_list_clear
  none
  ((GnomeIconList gil)))

(define-func gnome_icon_list_remove
  none
  ((GnomeIconList gil)
   (int pos)))

(define-func gnome_icon_list_set_selection_mode
  none
  ((GnomeIconList gil)
   (GtkSelectionMode mode)))

(define-func gnome_icon_list_select_icon
  none
  ((GnomeIconList gil)
   (int pos)))

(define-func gnome_icon_list_unselect_icon
  none
  ((GnomeIconList gil)
   (int pos)))

(define-func gnome_icon_list_unselect_all
  none
  ((GnomeIconList gil)
   (GdkEvent event)
   (string keep (= "NULL")))) ; never pass this parameter (it is really void*)

(define-func gnome_icon_list_set_icon_width
  none
  ((GnomeIconList gil)
   (int width)))

(define-func gnome_icon_list_set_row_spacing
  none
  ((GnomeIconList gil)
   (int pixels)))

(define-func gnome_icon_list_set_col_spacing
  none
  ((GnomeIconList gil)
   (int pixels)))

(define-func gnome_icon_list_set_text_spacing
  none
  ((GnomeIconList gil)
   (int pixels)))

(define-func gnome_icon_list_set_icon_border
  none
  ((GnomeIconList gil)
   (int pixels)))

(define-func gnome_icon_list_set_separators
  none
  ((GnomeIconList gil)
   (string separators)))

; gnome_icon_list_set_icon_data
; gnome_icon_list_find_icon_from_data
; gnome_icon_list_get_icon_data

(define-func gnome_icon_list_moveto
  none
  ((GnomeIconList gil)
   (int pos)
   (double yalign)))

(define-func gnome_icon_list_icon_is_visible
  GtkVisibility
  ((GnomeIconList gil)
   (int pos)))

(define-func gnome_icon_list_get_icon_at
  int
  ((GnomeIconList gil)
   (int x) (int y)))

(define-func gnome_icon_list_get_items_per_line
  int
  ((GnomeIconList gil)))


;; gnome-icon-item.h
(define-object GnomeIconTextItem (GnomeCanvasItem))

(define-func gnome_icon_text_item_setxy
  none
  ((GnomeIconTextItem iti)
   (int x) (int y)))

(define-func gnome_icon_text_item_select
  none
  ((GnomeIconTextItem iti)
   (int sel)))

(define-func gnome_icon_text_item_get_text
  static_string
  ((GnomeIconTextItem iti)))

(define-func gnome_icon_text_item_stop_editing
  none
  ((GnomeIconTextItem iti)
   (bool accept)))


;; gnome-icon-sel.h
(define-object GnomeIconSelection (GtkVBox))

(define-func gnome_icon_selection_new
  GtkWidget
  ())

(define-func gnome_icon_selection_add_defaults
  none
  ((GnomeIconSelection gis)))

(define-func gnome_icon_selection_add_directory
  none
  ((GnomeIconSelection gis)
   (string dir)))

(define-func gnome_icon_selection_show_icons
  none
  ((GnomeIconSelection gis)))

(define-func gnome_icon_selection_clear
  none
  ((GnomeIconSelection gis)
   (bool not_shown)))

(define-func gnome_icon_selection_get_icon
  static_string
  ((GnomeIconSelection gis)
   (bool full_path)))

(define-func gnome_icon_selection_select_icon
  none
  ((GnomeIconSelection gis)
   (string filename)))


;; gnome-less.h
(define-object GnomeLess (GtkVBox))

(define-func gnome_less_new
  GtkWidget
  ())

(define-func gnome_less_clear
  none
  ((GnomeLess less)))

(define-func gnome_less_show_file
  bool
  ((GnomeLess less)
   (string path)))

(define-func gnome_less_show_command
  bool
  ((GnomeLess less)
   (string command_line)))

(define-func gnome_less_show_string
  none
  ((GnomeLess less)
   (string str)))

(define-func gnome_less_show_filestream
  bool
  ((GnomeLess less)
   (FILE fp)))
; gnome_less_show_fd

(define-func gnome_less_write_file
  bool
  ((GnomeLess less)
   (string filename)))
; gnome_less_write_fd

(define-func gnome_less_set_font
  none
  ((GnomeLess less)
   (GdkFont font)))

(define-func gnome_less_set_fixed_font
  none
  ((GnomeLess less)
   (bool fixed)))

(define-func gnome_less_reshow
  none
  ((GnomeLess less)))


;; gnome-mdi-child.h
(define-object GnomeMDIChild (GtkObject))

;; can only create instances of subclasses.
;(define-func gnome_mdi_child_new
;  GnomeMDIChild
;  ())

(define-func gnome_mdi_child_add_view
  GtkWidget
  ((GnomeMDIChild mdic)))

(define-func gnome_mdi_child_remove_view
  none
  ((GnomeMDIChild mdic)
   (GtkWidget view)))

(define-func gnome_mdi_child_set_name
  none
  ((GnomeMDIChild mdic)
   (string name)))

; gnome_mdi_child_set_menu_template

;; gnome-mdi-generic-child.h
(define-object GnomeMDIGenericChild (GnomeMDIChild))

(define-func gnome_mdi_generic_child_new
  GnomeMDIGenericChild
  ((string name)))
;gnome_mdi_generic_child_set_view_creator
;gnome_mdi_generic_child_set_menu_creator
;gnome_mdi_generic_child_set_config_func
;gnome_mdi_generic_child_set_label_func

;; gnome-mdi.h
(define-object GnomeMDI (GtkObject))

(define-func gnome_mdi_new
  GtkObject
  ((string appname)
   (string title)))

(define-func gnome_mdi_set_mode
  none
  ((GnomeMDI mdi)
   (GnomeMDIMode mode)))

; gnome_mdi_set_menu_teplate
; gnome_mdi_set_toolbar_template
(define-func gnome_mdi_set_child_menu_path
  none
  ((GnomeMDI mdi)
   (string path)))

(define-func gnome_mdi_set_child_list_path
  none
  ((GnomeMDI mdi)
   (string path)))

(define-func gnome_mdi_add_view
  int
  ((GnomeMDI mdi)
   (GnomeMDIChild child)))

(define-func gnome_mdi_add_toplevel_view
  int
  ((GnomeMDI mdi)
   (GnomeMDIChild child)))

(define-func gnome_mdi_remove_view
  int
  ((GnomeMDI mdi)
   (GtkWidget view)
   (int force)))

(define-func gnome_mdi_get_active_view
  GtkWidget
  ((GnomeMDI mdi)))

(define-func gnome_mdi_set_active_view
  none
  ((GnomeMDI mdi)
   (GtkWidget view)))

(define-func gnome_mdi_add_child
  int
  ((GnomeMDI mdi)
   (GnomeMDIChild child)))

(define-func gnome_mdi_remove_child
  int
  ((GnomeMDI mdi)
   (GnomeMDIChild child)
   (int force)))

(define-func gnome_mdi_remove_all
  int
  ((GnomeMDI mdi)
   (int force)))

(define-func gnome_mdi_open_toplevel
  none
  ((GnomeMDI mdi)))

(define-func gnome_mdi_update_child
  none
  ((GnomeMDI mdi)
   (GnomeMDIChild child)))

(define-func gnome_mdi_get_active_child
  GnomeMDIChild
  ((GnomeMDI mdi)))

(define-func gnome_mdi_find_child
  GnomeMDIChild
  ((GnomeMDI mdi)
   (string name)))

(define-func gnome_mdi_get_active_window
  GnomeApp
  ((GnomeMDI mdi)))

(define-func gnome_mdi_register
  none
  ((GnomeMDI mdi)
   (GtkObject obj)))

(define-func gnome_mdi_unregister
  none
  ((GnomeMDI mdi)
   (GtkObject obj)))

(define-func gnome_mdi_get_app_from_view
  GnomeApp
  ((GtkWidget view)))

(define-func gnome_mdi_get_child_from_view
  GnomeMDIChild
  ((GtkWidget view)))

(define-func gnome_mdi_get_view_from_window
  GtkWidget
  ((GnomeMDI mdi)
   (GnomeApp app_win)))


;; gnome-messagebox.h
(define-object GnomeMessageBox (GnomeDialog))

(define-func gnome_message_box_new
  GtkWidget
  ((string message)
   (string messagebox_type)
   (string b1 (= "NULL")) ; hack hack hack
   (string b2 (= "NULL"))
   (string b3 (= "NULL"))
   (string b4 (= "NULL"))
   (string b5 (= "NULL"))
   (string b6 (= "NULL"))
   (string b7 (= "NULL"))
   (string b8 (= "NULL"))
   (string b9 (= "NULL"))
   (string b10 (= "NULL"))
   (string b11 (= "NULL"))))


;; gnome-number-entry.h
(define-object GnomeNumberEntry (GtkHBox))

(define-func gnome_number_entry_new
  GtkWidget
  ((string history_id)
   (string calc_dialog_title)))

(define-func gnome_number_entry_gnome_entry
  GtkWidget
  ((GnomeNumberEntry nentry)))

(define-func gnome_number_entry_gtk_entry
  GtkWidget
  ((GnomeNumberEntry nentry)))

(define-func gnome_number_entry_set_title
  none
  ((GnomeNumberEntry nentry)
   (string calc_dialog_title)))

(define-func gnome_number_entry_get_number
  double
  ((GnomeNumberEntry nentry)))


;; gnome-pixmap-entry.h
(define-object GnomePixmapEntry (GtkVBox))

(define-func gnome_pixmap_entry_new
  GtkWidget
  ((string history_id)
   (string browse_dialog_title)
   (bool do_preview)))

(define-func gnome_pixmap_entry_set_pixmap_subdir
  none
  ((GnomePixmapEntry pentry)
   (string subdir)))

(define-func gnome_pixmap_entry_gnome_file_entry
  GtkWidget
  ((GnomePixmapEntry pentry)))

(define-func gnome_pixmap_entry_gnome_entry
  GtkWidget
  ((GnomePixmapEntry pentry)))

(define-func gnome_pixmap_entry_gtk_entry
  GtkWidget
  ((GnomePixmapEntry pentry)))

(define-func gnome_pixmap_entry_set_preview
  none
  ((GnomePixmapEntry pentry)
   (bool do_preview)))

(define-func gnome_pixmap_entry_set_preview_size
  none
  ((GnomePixmapEntry pentry)
   (int preview_w) (int preview_h)))

(define-func gnome_pixmap_entry_get_filename
  string
  ((GnomePixmapEntry pentry)))


;; gnome-paper-selector.h
(define-object GnomePaperSelector (GtkVBox))

(define-func gnome_paper_selector_new
  GtkWidget
  ())

(define-func gnome_paper_selector_get_name
  static_string
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_width
  float
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_height
  float
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_left_margin
  float
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_right_margin
  float
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_top_margin
  float
  ((GnomePaperSelector gspaper)))

(define-func gnome_paper_selector_get_bottom_margin
  float
  ((GnomePaperSelector gspaper)))


;; gnome-popup-help.h
(define-func gnome_widget_add_help
  none
  ((GtkWidget widget)
   (string help)))
; gnome_widget_add_help_with_uidata

;; gnome-popup-menu.h
; This code is so broken when using interpreters I won't try to wrap it.
; It overwrites parts of the GnomeUIInfo structures you give it (very bad).


;; gnome-propertybox.h
(define-object GnomePropertyBox (GnomeDialog))

(define-func gnome_property_box_new
  GtkWidget
  ())

(define-func gnome_property_box_changed
  none
  ((GnomePropertyBox property_box)))

(define-func gnome_property_box_set_modified
  none
  ((GnomePropertyBox property_box)
   (bool modified)))

(define-func gnome_property_box_append_page
  int
  ((GnomePropertyBox property_box)
   (GtkWidget child)
   (GtkWidget tab_label)))


;; gnome-scores.h
(define-object GnomeScores (GnomeDialog))

(define-func gnome_scores_display
  none
  ((string title)
   (string app_name)
   (string level)
   (int pos)))
	   
; gnome_scores_new

(define-func gnome_scores_set_logo_label
  none
  ((GnomeScores gs)
   (string text)
   (string font)
   (GdkColor colour)))

(define-func gnome_scores_set_logo_pixmap
  none
  ((GnomeScores gs)
   (string logo)))

(define-func gnome_scores_set_logo_widget
  none
  ((GnomeScores gs)
   (GtkWidget w)))

(define-func gnome_scores_set_color
  none
  ((GnomeScores gs)
   (uint pos)
   (GdkColor colour)))

(define-func gnome_scores_set_def_color
  none
  ((GnomeScores gs)
   (GdkColor colour)))
; gnome_scores_set_colors

(define-func gnome_scores_set_logo_label_title
  none
  ((GnomeScores gs)
   (string logo)))

(define-func gnome_scores_set_current_player
  none
  ((GnomeScores gs)
   (int index)))


;; gnome-spell.h
(define-object GnomeSpell (GtkVBox))

(define-func gnome_spell_new
  GtkWidget
  ())

(define-func gnome_spell_check
  int
  ((GnomeSpell spell)
   (string str)))

(define-func gnome_spell_accept
  none
  ((GnomeSpell spell)
   (string word)))

(define-func gnome_spell_insert
  none
  ((GnomeSpell spell)
   (string word)
   (int lowercase)))

(define-func gnome_spell_next
  none
  ((GnomeSpell spell)))

(define-func gnome_spell_kill
  none
  ((GnomeSpell spell)))

;; gnome-stock.h
(define-object GnomeStock (GnomePixmap))

(define-func gnome_stock_new
  GtkWidget
  ())

(define-func gnome_stock_new_with_icon
  GtkWidget
  ((string icon)))

(define-func gnome_stock_set_icon
  bool
  ((GnomeStock stock)
   (string icon)))

(define-func gnome_pixmap_button
  GtkWidget
  ((GtkWidget pixmap)
   (string text)))

(define-func gnome_stock_button
  GtkWidget
  ((string type)))

(define-func gnome_stock_or_ordinary_button
  GtkWidget
  ((string type)))

(define-func gnome_stock_menu_item
  GtkWidget
  ((string type)
   (string text)))

; gnome_stock_menu_accel

(define-func gnome_stock_transparent_window
  GtkWidget
  ((string icon)
   (string subtype)))


;; gtk-clock.h
(define-object GtkClock (GtkLabel))

(define-func gtk_clock_new
  GtkWidget
  ((GtkClockType type)))

(define-func gtk_clock_set_format
  none
  ((GtkClock gclock)
   (string fmt)))

(define-func gtk_clock_set_seconds
  none
  ((GtkClock gclock)
   (uint seconds)))

(define-func gtk_clock_set_update_interval
  none
  ((GtkClock gclock)
   (int seconds)))

(define-func gtk_clock_start
  none
  ((GtkClock gclock)))

(define-func gtk_clock_stop
  none
  ((GtkClock gclock)))


;; gtk-ted.h
(define-object GtkTed (GtkTable))

(define-func gtk_ted_set_app_name
  none
  ((string appname)))

(define-func gtk_ted_new
  GtkWidget
  ((string dialog_name)))

(define-func gtk_ted_new_layout
  GtkWidget
  ((string dialog_name)
   (string layout)))

(define-func gtk_ted_prepare
  none
  ((GtkTed ted)))

(define-func gtk_ted_add
  none
  ((GtkTed ted)
   (GtkWidget widget)
   (string name)))


;; gtkcauldron.h
; gtk_dialog_cauldron


;; gtkdial.h
(define-object GtkDial (GtkWidget))

(define-func gtk_dial_new
  GtkWidget
  ((GtkAdjustment adjustment (null-ok) (= "NULL"))))

(define-func gtk_dial_get_adjustment
  GtkAdjustment
  ((GtkDial dial)))

(define-func gtk_dial_set_update_policy
  none
  ((GtkDial dial)
   (GtkUpdateType policy)))

(define-func gtk_dial_set_adjustment
  none
  ((GtkDial dial)
   (GtkAdjustment adjustment)))

(define-func gtk_dial_set_percentage
  none
  ((GtkDial dial)
   (float percent)))

(define-func gtk_dial_get_percentage
  float
  ((GtkDial dial)))

(define-func gtk_dial_set_value
  none
  ((GtkDial dial)
   (float value)))

(define-func gtk_dial_get_value
  float
  ((GtkDial dial)))

(define-func gtk_dial_set_view_only
  none
  ((GtkDial dial)
   (bool view_only)))


;; gnome-druid-page.h

(define-object GnomeDruidPage (GtkBin))

(define-func gnome_druid_page_next
  bool
  ((GnomeDruidPage druid_page)))

(define-func gnome_druid_page_prepare
  none
  ((GnomeDruidPage druid_page)))

(define-func gnome_druid_page_back
  bool
  ((GnomeDruidPage druid_page)))

(define-func gnome_druid_page_cancel
  bool
  ((GnomeDruidPage druid_page)))

(define-func gnome_druid_page_finish
  none
  ((GnomeDruidPage druid_page)))


;; gnome-druid-page-start.h

(define-object GnomeDruidPageStart (GnomeDruidPage))

(define-func gnome_druid_page_start_new
  GtkWidget
  ())
(define-func gnome_druid_page_start_new_with_vals
  GtkWidget
  ((string title (null-ok))
   (string text (null-ok))
   (GdkImlibImage logo (null-ok))
   (GdkImlibImage watermark (null-ok))))
(define-func gnome_druid_page_start_set_bg_color
  none
  ((GnomeDruidPageStart page)
   (GdkColor colour)))
(define-func gnome_druid_page_start_set_textbox_color
  none
  ((GnomeDruidPageStart page)
   (GdkColor colour)))
(define-func gnome_druid_page_start_set_logo_bg_color
  none
  ((GnomeDruidPageStart page)
   (GdkColor colour)))
(define-func gnome_druid_page_start_set_title_color
  none
  ((GnomeDruidPageStart page)
   (GdkColor colour)))
(define-func gnome_druid_page_start_set_text_color
  none
  ((GnomeDruidPageStart page)
   (GdkColor colour)))
(define-func gnome_druid_page_start_set_text
  none
  ((GnomeDruidPageStart page)
   (string text)))
(define-func gnome_druid_page_start_set_title
  none
  ((GnomeDruidPageStart page)
   (string title)))
(define-func gnome_druid_page_start_set_logo
  none
  ((GnomeDruidPageStart page)
   (GdkImlibImage image)))
(define-func gnome_druid_page_start_set_watermark
  none
  ((GnomeDruidPageStart page)
   (GdkImlibImage image)))


;; gnome-druid-page-finish.h

(define-object GnomeDruidPageFinish (GnomeDruidPage))

(define-func gnome_druid_page_finish_new
  GtkWidget
  ())
(define-func gnome_druid_page_finish_new_with_vals
  GtkWidget
  ((string title (null-ok))
   (string text (null-ok))
   (GdkImlibImage logo (null-ok))
   (GdkImlibImage watermark (null-ok))))
(define-func gnome_druid_page_finish_set_bg_color
  none
  ((GnomeDruidPageFinish page)
   (GdkColor colour)))
(define-func gnome_druid_page_finish_set_textbox_color
  none
  ((GnomeDruidPageFinish page)
   (GdkColor colour)))
(define-func gnome_druid_page_finish_set_logo_bg_color
  none
  ((GnomeDruidPageFinish page)
   (GdkColor colour)))
(define-func gnome_druid_page_finish_set_title_color
  none
  ((GnomeDruidPageFinish page)
   (GdkColor colour)))
(define-func gnome_druid_page_finish_set_text_color
  none
  ((GnomeDruidPageFinish page)
   (GdkColor colour)))
(define-func gnome_druid_page_finish_set_text
  none
  ((GnomeDruidPageFinish page)
   (string text)))
(define-func gnome_druid_page_finish_set_title
  none
  ((GnomeDruidPageFinish page)
   (string title)))
(define-func gnome_druid_page_finish_set_logo
  none
  ((GnomeDruidPageFinish page)
   (GdkImlibImage image)))
(define-func gnome_druid_page_finish_set_watermark
  none
  ((GnomeDruidPageFinish page)
   (GdkImlibImage image)))


;; gnome-druid-page-standard.h

(define-object GnomeDruidPageStandard (GnomeDruidPage)
  (fields (GtkWidget vbox)))
(define-func gnome_druid_page_standard_new
  GtkWidget
  ())
(define-func gnome_druid_page_standard_new_with_vals
  GtkWidget
  ((string title)
   (GdkImlibImage logo)))
(define-func gnome_druid_page_standard_set_bg_color
  none
  ((GnomeDruidPageStandard page)
   (GdkColor colour)))
(define-func gnome_druid_page_standard_set_logo_bg_color
  none
  ((GnomeDruidPageStandard page)
   (GdkColor colour)))
(define-func gnome_druid_page_standard_set_title_color
  none
  ((GnomeDruidPageStandard page)
   (GdkColor colour)))
(define-func gnome_druid_page_standard_set_title
  none
  ((GnomeDruidPageStandard page)
   (string title)))
(define-func gnome_druid_page_standard_set_logo
  none
  ((GnomeDruidPageStandard page)
   (GdkImlibImage image)))


;; gnome-druid.h

(define-object GnomeDruid (GtkContainer))

(define-func gnome_druid_new
  GtkWidget
  ())
(define-func gnome_druid_set_buttons_sensitive
  none
  ((GnomeDruid druid)
   (bool back_sensitive)
   (bool next_sensitive)
   (bool cancel_sensitive)))
(define-func gnome_druid_set_show_finish
  none
  ((GnomeDruid druid)
   (bool show_finish)))
(define-func gnome_druid_prepend_page
  none
  ((GnomeDruid druid)
   (GnomeDruidPage page)))
(define-func gnome_druid_insert_page
  none
  ((GnomeDruid druid)
   (GnomeDruidPage back_page)
   (GnomeDruidPage page)))
(define-func gnome_druid_append_page
  none
  ((GnomeDruid druid)
   (GnomeDruidPage page)))
(define-func gnome_druid_set_page
  none
  ((GnomeDruid druid)
   (GnomeDruidPage page)))
