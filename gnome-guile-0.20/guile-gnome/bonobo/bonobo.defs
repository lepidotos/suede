;; -*- scheme -*-

(import "../gnorba.defs")
(import "gtk-1.2.defs")

(options
 (includes  "#include <bonobo.h>"
	    ""
	    "GtkType bonobo_uihandler_get_type (void) { bonobo_ui_handler_get_type (); }")
 (init-func "bonobo_init_glue")
 (libs "libguilebonobo"))

;;<bonobo/bonobo-object.h>

(define-object BonoboObject (GtkObject))
;(define-boxed BonoboObject
;  (copy bonobo_object_ref)
;  (free bonobo_object_unref))

(define-func bonobo_object_construct
  BonoboObject
  ((BonoboObject object)
   (CORBA_Object corba_object)))

;(define-func bonobo_object_from_servant
;  BonoboObject
;  ((PortableServer_Servant)))

(define-func bonobo_object_add_interface
  none
  ((BonoboObject object)
   (BonoboObject newobj)))

(define-func bonobo_query_local_interface
  BonoboObject
  ((BonoboObject object)
   (string repo_id)))

(define-func bonobo_query_interface
  CORBA_Object
  ((BonoboObject object)
   (string repod_id)))

(define-func bonobo_object_corba_objref
  CORBA_Object
  ((BonoboObject object)))

;;(define-object GnomeBonoboWidget (GtkBin))


;(define-func gnome_bonobo_widget_get_server
;  GnomeObjectClient
;  ((GnomeBonoboWidget bw)))

   ;;GnomeBonoboWidget for Controls.



;(define-func gnome_bonobo_widget_new_control_from_objref
;  GtkWidget
;  ((GNOME_Control control)))

;(define-func gnome_bonob_widget_get_control_frame
;  GnomeControlFrame
;  ((GnomeBonoboWidget bw)))

  ;;Gnome Bonobo Widget for subdocuments

;(define-func gnome_bonobo_widget_new_subdoc
;  GtkWidget
;  ((string object_desc)
;   (GnomeUIHandler uih)))

;(define-func gnome_bonobo_widget_get_container
;  GnomeContainer
;  ((GnomeBonoboWidget bw)))

;(define-func gnome_bonobo_widget_get_client_site
;  GnomeClientSite
;  ((GnomeBonoboWidget bw)))

;(define-func gnome_bonobo_widget_get_view_frame
;  GnomeViewFrame
;  ((GnomeBonoboWidget bw)))

;(define-func gnome_bonobo_widget_get_uig
;  GnomeUIHandler
;  ((GnomeBonoboWidget bw)))

;;<bonobo/gnome-main.h>

(define-func bonobo_init
  bool
  ((CORBA_ORB orb)
   (PortableServer_POA poa)
   (PortableServer_POAManager manager)))

(define-func bonobo_main
  none
  ())

(define-func bonobo_activate
  bool
  ())

(define-func bonobo_setup_x_error_handler
  none
  ())

(define-func bonob_orb
  CORBA_ORB
  ())

(define-func bonobo_poa
  PortableServer_POA
  ())

(define-func bonobo_poa_manager
  PortableServer_POAManager
  ())

;;<bonobo/gnome-object.h>

;(define-object GnomeObjectServant(POA_GNOME_Unknown))

;(define-object GnomeObject (GtkObject))

;(define-func gnome_object_get_servant
;  PortableServer_Servant
;  ((GnomeObject object)))

;(define-func gnome_object_activate_servant
;  CORBA_Object 
;  ((GnomeObject object)
;   (null servant)))

;(define-func gnome_object_add_interface 
;  none
;  ((GnomeObject obj)
;   (GnomeObject newobj)))

;(define-func gnome_object_query_interface
;  CORBA_Object
;  ((GnomeObject object)
;   (string repo_id)))

;(define-func gnome_object_corba_objref
;  CORBA_Object
;  ((GnomeObject object)))

  ;;nome Object Life Cycle

;(define-func gnome_object_ref
;  none
;  ((GnomeObject object)))

;(define-func gnome_object_unref
;  none
;  ((GnomeObject object)))

;(define-func gnome_object_destroy
;  none
;  ((GnomeObject object)))

;(define-func gnome_object_get_epv
;  POA_GNOME_Unknown__epv 
;  ())

 ;; Error checking

;(define-func gnome_object_check_env
;  none
;  ((GNomeObject object)
;   (CORBA_Object corba_object)
;   (CORBA_Environment ev)))

 ;; Others

;(define-func gnome_unkonwn_ping
;  bool
;  ((GNOME_Unknown object)))

 ;;CORBA default vector methods we provide

;(define PortableServer_ServantBase__epv gnome_object_base_epv)
;(define POA_GNOME_Unknown__epv gnome_object_epv)
;(define POA_GNOME_Unknown__vepv gnome_object_vepv)


;;<bonobo/gnome-property.h>
;;<bonobo/bonobo-ui-handler.h>

;;(define-object BonoboUIHandler (BonoboObject))

;;(define-func bonobo_ui_handler_new
;;  BonoboUIHandler
;;  ())

;;<bonobo/bonobo-widget.h>
(define-func bonobo_widget_new_control
  GtkWidget
  ((string goad_id)
   (CORBA_Object uih)))



