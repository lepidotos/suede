AC_INIT(src)

dnl ==========================================================================
dnl
dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!
dnl
dnl ==========================================================================

BONOBO_REQUIRED=1.0.9
EEL_REQUIRED=1.0.2
ESOUND_REQUIRED=0.2.22
GCONF_REQUIRED=0.12
GDK_PIXBUF_REQUIRED=0.10.0
GLIB_REQUIRED=1.2.9
GNOME_LIBS_REQUIRED=1.2.11
GNOME_REQUIRED=1.2.8
GNOME_VFS_REQUIRED=1.0.3
GTK_REQUIRED=1.2.9
IMLIB_REQUIRED=1.9.8
LIBRSVG_REQUIRED=1.0.1
LIBXML_REQUIRED=1.8.10
MEDUSA_REQUIRED=0.5.1
OAF_REQUIRED=0.6.5
ORBIT_REQUIRED=0.5.7
POPT_REQUIRED=1.5
SCROLLKEEPER_REQUIRED=0.1.4

AC_SUBST(EEL_REQUIRED)
AC_SUBST(ESOUND_REQUIRED)
AC_SUBST(GNOME_VFS_REQUIRED)
AC_SUBST(IMLIB_REQUIRED)
AC_SUBST(LIBRSVG_REQUIRED)
AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(MEDUSA_REQUIRED)
AC_SUBST(ORBIT_REQUIRED)
AC_SUBST(POPT_REQUIRED)
AC_SUBST(SCROLLKEEPER_REQUIRED)

dnl ===========================================================================

AM_INIT_AUTOMAKE(nautilus, 1.0.6)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

AM_PROG_XML_I18N_TOOLS

AM_SANITY_CHECK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_ISC_POSIX
AM_PATH_ESD

AM_PATH_ORBIT

dnl ====================================
dnl = Begin profiling support
dnl ====================================
ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
[  --enable-profiler		Enable profiler],
ENABLE_PROFILER=1
AC_DEFINE(ENABLE_PROFILER))

if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES"
	LDFLAGS="/gnome/PROFILE/lib/libprofiler.so -lpthread"
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")
dnl ====================================
dnl = End profiling support
dnl ====================================

dnl ====================================
dnl = Check for different mount systems
dnl ====================================
AC_CHECK_FUNCS(setmntent endmntent hasmntopt)
AC_CHECK_HEADERS(mntent.h sys/mnttab.h sys/vfstab.h sys/cdio.h)

dnl ====================================
dnl = Method for changing environment
dnl ====================================
AC_CHECK_FUNCS(setenv unsetenv putenv)

dnl =============
dnl Check for FAM 
dnl =============
FAM_MISSING_WARNING="Nautilus depends on FAM to provide notification when files are altered (either through filesystem polling, or a kernel notification mechanism). If Nautilus is built without FAM support, directories viewed with Nautilus will not remain in synch with the actual filesystem when they are altered by external processes. Particularly if you are a distributor please compile Nautilus with FAM support. FAM is available from http://oss.sgi.com/projects/fam/. A patch to add Linux Kernel 2.4 directory notify support to FAM (highly desirable) is available from http://people.redhat.com/alexl/files/"
FAM_LIBS=
AC_CHECK_LIB(fam, FAMOpen,
  AC_CHECK_HEADERS(fam.h,
    [AC_DEFINE(HAVE_LIBFAM)
     FAM_LIBS="-lfam"],
    AC_MSG_WARN(*** FAM support will not be built (header files not found) $FAM_MISSING_WARNING ***)),
  AC_MSG_WARN(*** FAM support will not be built (FAM library not found) $FAM_MISSING_WARNING ***))
AC_SUBST(FAM_LIBS)

dnl ====================================
dnl = Use x86 optimized music routines?
dnl ====================================
_system_is_x86="no"
AC_CHECK_HEADER( asm/vm86.h, _system_is_x86="yes" )
AM_CONDITIONAL(X86_OPTIMIZED, test "x$_system_is_x86" = "xyes")

dnl ====================================
dnl = mozilla embedded component support
dnl =
dnl = The following voodoo does detection of mozilla libraries needed by
dnl = the nautilus mozilla component.
dnl =
dnl = The nautilus mozilla component is only built if these libraries are found
dnl =
dnl = --disable-mozilla-component can be used to disable building of the
dnl = mozilla component even if the mozilla development libraries are 
dnl = detected.
dnl ====================================
mozilla_component_enabled="yes"

AC_ARG_ENABLE(mozilla-component,
              [  --disable-mozilla-component       Disable the mozilla component],
              mozilla_component_enabled="$enableval")

dnl Dont build the mozilla component for profiled builds because the C++ compiler
dnl used for mozilla rpms is not binary compatible with the one used for profiling.
if test "x$ENABLE_PROFILER" = "x1"
then
	mozilla_component_enabled="no"
fi

found_mozilla=false

if test "x$mozilla_component_enabled" = "xyes"
then 

_mozilla_lib_place=/usr/lib/mozilla
AC_ARG_WITH(mozilla-lib-place,
	[  --with-mozilla-lib-place              Set mozilla 'lib' place ],
	[ _mozilla_lib_place="$withval" ])

_mozilla_include_place=/usr/include/mozilla
AC_ARG_WITH(mozilla-include-place,
	[  --with-mozilla-include-place              Set mozilla 'include' place ],
	[ _mozilla_include_place="$withval" ])

_mozilla_nspr_include_place=$_mozilla_include_place/nspr
AC_ARG_WITH(mozilla-nspr-include-place,
	[  --with-mozilla-nspr-include-place              Set mozilla nspr directory 'include' place ],
	[ _mozilla_nspr_include_place="$withval" ])

dnl Save flags and compiler
_save_cflags="$CFLAGS"
_save_ldflags="$LDFLAGS"
_save_cc="$CC"

dnl Hack flags to find the mozilla stuff
CFLAGS="$_save_cflags -I$_mozilla_include_place -I$_mozilla_include_place/nspr"
LDFLAGS="$_save_ldflags -L$_mozilla_lib_place"

_mozilla_nspr_libs=
AC_CHECK_LIB(nspr4, PR_Init, [_mozilla_nspr_libs="-lnspr4"])
LDFLAGS="$LDFLAGS $_mozilla_nspr_libs"

_mozilla_plc_libs=
AC_CHECK_LIB(plc4, PL_strcmp, [_mozilla_plc_libs="-lplc4"])

_mozilla_plds_libs=
AC_CHECK_LIB(plds4, PL_NewHashTable, [_mozilla_plds_libs="-lplds4"])

_mozilla_all_nspr_flags="$_mozilla_nspr_libs $_mozilla_plc_libs $_mozilla_plds_libs"

dnl Now check for the evil c++ ones "by hand"
CC="g++"

LDFLAGS="$_save_ldflags -L$_mozilla_lib_place $_mozilla_all_nspr_flags -lxpcom"
AC_MSG_CHECKING(for xpcom)
AC_CACHE_VAL(have_xpcom,
 [AC_TRY_COMPILE([extern "C" int NS_RegistryGetFactory(void**);]
                 [],
                 [NS_RegistryGetFactory(0); return 0;],
                 [have_xpcom=true],
                 [have_xpcom=false])])
if test "$have_xpcom" = "true" ; then
  _mozilla_xpcom_libs="-lxpcom"
  AC_MSG_RESULT(yes)
else
  _mozilla_xpcom_libs=
  AC_MSG_RESULT(no)
fi  

dnl The next two are pure evil
CC="$_save_cc"

dnl gtk superwin library
LDFLAGS="$_save_ldflags -L$_mozilla_lib_place $_mozilla_all_nspr_flags -lgtksuperwin"
_mozilla_gtk_super_win_libs=
AC_CHECK_LIB(gtksuperwin, gdk_superwin_get_type, [_mozilla_gtk_super_win_libs="-lgtksuperwin"])

dnl gtk moz embed library
LDFLAGS="$_save_ldflags -L$_mozilla_lib_place $_mozilla_all_nspr_flags -lgtkembedmoz $_mozilla_xpcom_libs"
_mozilla_gtk_moz_embed_libs=
AC_CHECK_LIB(gtkembedmoz, gtk_moz_embed_get_type, [_mozilla_gtk_moz_embed_libs="-lgtkembedmoz"])

dnl Restore the flags and compiler
CFLAGS="$_save_cflags"
LDFLAGS="$_save_ldflags"
CC="$_save_cc"

dnl Now make sure all the libraries are good
AC_MSG_CHECKING(for Mozilla)

if test -n "$_mozilla_nspr_libs" -a \
	-n "$_mozilla_plc_libs" -a \
	-n "$_mozilla_plds_libs" -a \
	-n "$_mozilla_xpcom_libs" -a \
	-n "$_mozilla_gtk_super_win_libs" -a \
	-n "$_mozilla_gtk_moz_embed_libs"
then
	AC_MSG_RESULT(yes)
	AC_PROG_CXX
	found_mozilla=true

	MOZILLA_COMPONENT_RPATH_FLAGS=-Wl,-rpath=$_mozilla_lib_place
	MOZILLA_COMPONENT_LDFLAGS=-L$_mozilla_lib_place
	MOZILLA_COMPONENT_LIBS="$_mozilla_gtk_moz_embed_libs \
				$_mozilla_gtk_super_win_libs \
				$_mozilla_xpcom_libs \
				$_mozilla_nspr_libs \
				$_mozilla_plc_libs \
				$_mozilla_plds_libs"
	AC_SUBST(MOZILLA_COMPONENT_RPATH_FLAGS)
	AC_SUBST(MOZILLA_COMPONENT_LDFLAGS)
	AC_SUBST(MOZILLA_COMPONENT_LIBS)
else
	AC_MSG_RESULT(no)
	found_mozilla=false
fi

fi

AM_CONDITIONAL(BUILD_MOZILLA_COMPONENT, test "x$found_mozilla" = "xtrue")

if test "x$found_mozilla" = "xtrue"
then
	grep -w gtk_moz_embed_set_profile_path $_mozilla_include_place/gtkembedmoz/gtkmozembed.h > /dev/null 2>&1
	if test $? -eq 0
	then
		MOZILLA_PROFILES_CFLAGS="-DMOZILLA_HAVE_PROFILES_SUPPORT"
		AC_SUBST(MOZILLA_PROFILES_CFLAGS)

		MOZILLA_COMPONENT_CFLAGS="-I$_mozilla_include_place -I$_mozilla_nspr_include_place -fno-rtti -fno-exceptions"
		for component in xpcom gfx widget gtkembedmoz dom \
		    webbrwsr docshell content layout pref uconv string; do
			MOZILLA_COMPONENT_CFLAGS="$MOZILLA_COMPONENT_CFLAGS -I$_mozilla_include_place/$component"
		done
		AC_SUBST(MOZILLA_COMPONENT_CFLAGS)
	else
		AC_MSG_ERROR([
*** Mozilla 0.9.5 or greater is required to build the
*** Nautilus Mozilla component.])
	fi

dnl The DEBUG check is a most evil hack.  The problem im trying to solve
dnl is that we dont know whether the mozilla binaries we are using are built
dnl in debug mode or not (DEBUG).  We need to know this so that we set
dnl appropiate compile flags in the mozilla component.  Otherwise we get 
dnl undefined symbols.  Specifically, the undefined symbols are some
dnl destrcutors (nsCOMPtr_base::~nsCOMPtr_base) which are implemented only
dnl if the debug flag DEBUG is set a certain way.

	_xpcom_lib=$_mozilla_lib_place/libxpcom.so
	_symbol="nsCOMPtr_base::~nsCOMPtr_base"
	_num_symbols=`nm $_xpcom_lib 2> /dev/null | wc -l`

	MOZILLA_COMPONENT_DEBUG_FLAGS=
	if test $_num_symbols -ne 0
	then
		nm --demangle $_xpcom_lib | grep $_symbol > /dev/null 2>&1
		if test $? -eq 1
		then
			MOZILLA_COMPONENT_DEBUG_FLAGS="-DDEBUG"
		fi
	fi
	AC_SUBST(MOZILLA_COMPONENT_DEBUG_FLAGS)
fi

dnl ====================================
dnl = End mozilla hacks
dnl ====================================

dnl ====================================
dnl = Bzip2, for the help converters
dnl ====================================
BZ_LIBS=
AC_CHECK_LIB(bz2, bzread, [AC_DEFINE(HAVE_LIBBZ2)
			  BZ_LIBS="-lbz2"])
dnl <= Check for bzip2 > 1.0.0
    AC_CHECK_LIB(bz2, BZ2_bzread, [AC_DEFINE(HAVE_LIBBZ2)
		      	  BZ_LIBS="-lbz2"
    dnl <= define the wrapper-functions to get the Bzip2 stuff working .. =>	
	   AC_DEFINE(bzread,BZ2_bzread)
	   AC_DEFINE(bzopen,BZ2_bzopen)
	   AC_DEFINE(bzdopen,BZ2_bzdopen)
	   AC_DEFINE(bzwrite,BZ2_bzwrite)
	   AC_DEFINE(bzerror,BZ2_bzerror)
	   AC_DEFINE(bzclose,BZ2_bzclose)
	   AC_DEFINE(bzflush,BZ2_bzflush)
	   AC_DEFINE(bzCompress,BZ2_bzCompress)
	   AC_DEFINE(bzCompressInit,BZ2_bzCompressInit)
	   AC_DEFINE(bzDecompress,BZ2_bzDecompress)
	   AC_DEFINE(bzDecompressInit,BZ2_bzDecompressInit)	
	   ])
    dnl =>
AC_SUBST(BZ_LIBS)

dnl ====================================
dnl = cdda module support
dnl ====================================

AM_CONDITIONAL(HAVE_CDDA, false);
AC_CHECK_HEADERS(cdda_interface.h cdda_paranoia.h, [
	CDDA_LIBS="$CDDA_LIBS -lcdda_paranoia, -lcdda_interface";
		AM_CONDITIONAL(HAVE_CDDA, true);
	])

dnl ====================================
dnl Tests for iconv
dnl ====================================

AC_ARG_WITH(libiconv, [ --with-libiconv     Use the libiconv library ],,with_libiconv=maybe)

found_iconv=no

if test "x$with_libiconv" != "xyes" ; then
   # 
   # Check in the C library 
   #
   AC_CHECK_FUNC(iconv_open, with_libiconv=no; found_iconv=yes)
fi

if test "x$with_libiconv" != "xno" ; then
   #
   # Check for libiconv
   #
   AC_CHECK_LIB(iconv, libiconv_open, with_libiconv=yes; found_iconv=yes)
fi

if test "x$found_iconv" = "xno" ; then
   AC_MSG_ERROR([*** No iconv() implementation found in C library or libiconv])
fi

if test "x$with_libiconv" = "xyes" ; then
  ICONV_LIBS="-liconv"
fi
AC_SUBST(ICONV_LIBS)
	
dnl ====================================
dnl Gnome libraries.
dnl ====================================

AM_PATH_GLIB($GLIB_REQUIRED,,
AC_MSG_ERROR([
*** GLIB $GLIB_REQUIRED or better is required. The latest version of GLIB
*** is always available from ftp://ftp.gtk.org/.]))

AC_SUBST(GLIB_REQUIRED)

AM_PATH_GTK($GTK_REQUIRED,,
AC_MSG_ERROR([
*** Gtk+ $GTK_REQUIRED or better is required. The latest version of GTK
*** is always available from ftp://ftp.gtk.org/.]))

AC_SUBST(GTK_REQUIRED)

AM_PATH_GNOME($GNOME_REQUIRED,,AC_MSG_ERROR([*** GNOME $GNOME_REQUIRED or better is required.]), vfs xml bonobo bonobox bonobox_print idl gnomeui gtk gdk_pixbuf gnomecanvaspixbuf eel librsvg)

AC_SUBST(GNOME_REQUIRED)

AC_PATH_PROG(GNOME_CONFIG,gnome-config,no)
if test x$GNOME_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find gnome-config. Please install the GNOME package)
fi

NAUTILUS_VERSION_INSIST(gnome-libs, $GNOME_CONFIG --version | awk '{print $2}', >=, GNOME_LIBS_REQUIRED)

NAUTILUS_VERSION_INSIST(bonobo, $GNOME_CONFIG --modversion bonobo | awk -F- '{print $2}', >=, BONOBO_REQUIRED)

AC_SUBST(GNOMECANVASPIXBUF_LIBS)
AC_SUBST(GNOMECANVASPIXBUF_CFLAGS)
AC_SUBST(BONOBO_CFLAGS)
AC_SUBST(BONOBO_LIBS)
AC_SUBST(BONOBOX_CFLAGS)
AC_SUBST(BONOBOX_LIBS)
AC_SUBST(BONOBO_PRINT_CFLAGS)
AC_SUBST(BONOBO_PRINT_LIBS)
AC_SUBST(VFS_CFLAGS)
AC_SUBST(VFS_LIBS)
AC_SUBST(LIBRSVG_LIBS)
AC_SUBST(LIBRSVG_CFLAGS)
AC_SUBST(EEL_LIBS)
AC_SUBST(EEL_CFLAGS)

dnl   Rediscover CFLAGS for GTK, because gnome-config won't know
dnl   all the necessary flags if GTK has been upgraded more recently than
dnl   it has. See bugzilla.gnome.org bug 47315.

AC_PATH_PROG(GTK_CONFIG,gtk-config,false)
AC_MSG_CHECKING(for gtk-config cflags)
GTK_CFLAGS=`$GTK_CONFIG --cflags`
AC_MSG_RESULT($GTK_CFLAGS)
GNOMEUI_CFLAGS="$GNOMEUI_CFLAGS $GTK_CFLAGS"
AC_SUBST(GNOMEUI_CFLAGS)

IDL_CFLAGS="${IDL_CFLAGS} -I\$(top_srcdir) -I\$(top_builddir)"

echo "IDL_CFLAGS: $IDL_CFLAGS"

AC_SUBST(IDL_CFLAGS)

AM_PATH_OAF($OAF_REQUIRED)
AC_SUBST(OAF_REQUIRED)

AM_PATH_GCONF($GCONF_REQUIRED,,,gconf-gtk)
AC_SUBST(GCONF_REQUIRED)

AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml-config please install the gnome-xml package)
fi

XML_VERSION="`$XML_CONFIG --version`"
case "$XML_VERSION" in
	1.*)
		:
  	;;

	*)
		AC_ERROR(Nautilus needs gnome-xml version 1.x not $XML_VERSION)
	;;
esac

XML_LIBS=`$XML_CONFIG --libs`
XML_CFLAGS=`$XML_CONFIG --cflags`
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)

#BUILD_GNOME_DB2HTML3=yes
if test x$BUILD_GNOME_DB2HTML3 = xyes; then
	AC_PATH_PROG(XML2_CONFIG,xml2-config,no)
	if test x$XML2_CONFIG = xno; then
  	    AC_MSG_ERROR(Couldn't find xml2-config please install the libxml2 package)
	fi

	XML2_LIBS=`$XML2_CONFIG --libs`
	XML2_CFLAGS=`$XML2_CONFIG --cflags`
	AC_SUBST(XML2_LIBS)
	AC_SUBST(XML2_CFLAGS)

	AC_PATH_PROG(XSLT_CONFIG,xslt-config,no)
	if test x$XSLT_CONFIG = xno; then
	  AC_MSG_ERROR(Couldn't find xslt-config please install the libxslt package)
	fi

	XSLT_LIBS=`$XSLT_CONFIG --libs`
	XSLT_CFLAGS=`$XSLT_CONFIG --cflags`
	AC_SUBST(XSLT_LIBS)
	AC_SUBST(XSLT_CFLAGS)

	GNOME_DB2HTML3_FLAG=-DUSE_GNOME_DB2HTML3
	AC_SUBST(GNOME_DB2HTML3_FLAG)
fi

dnl ====================================
dnl = Begin tests for scrollkeeper
dnl ====================================

AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find scrollkeeper-config, please install the scrollkeeper packaga)
fi

dnl =======================
dnl = End tests for scrollkeeper
dnl =======================

dnl ====================================
dnl = Test whether jw is installed for doc build
dnl ====================================
AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)
dnl ====================================
dnl = End tests for jw
dnl ====================================

dnl ====================================
dnl = begin applet checks
dnl ====================================
AC_MSG_CHECKING(for applets)
APPLETS_CFLAGS=
APPLETS_LIBS=
HAVE_APPLETS="no"

gnome-config | grep applets > /dev/null 2>&1

if test $? -eq 0
then
	HAVE_APPLETS="yes"
	APPLETS_CFLAGS=`gnome-config --cflags applets`
	APPLETS_LIBS=`gnome-config --libs applets`	
	AC_MSG_RESULT(yes)
else
	HAVE_APPLETS="no"
	AC_MSG_RESULT(no)
fi

AM_CONDITIONAL(HAVE_APPLETS, test "x$HAVE_APPLETS" = "xyes")

AC_SUBST(HAVE_APPLETS)
AC_SUBST(APPLETS_CFLAGS)
AC_SUBST(APPLETS_LIBS)
dnl ====================================
dnl = begin applet checks
dnl ====================================

dnl ====================================
dnl = begin gdk-pixbuf checks
dnl ====================================
AM_PATH_GDK_PIXBUF($GDK_PIXBUF_REQUIRED,,
AC_MSG_ERROR([*** gdk_pixbuf $GDK_PIXBUF_REQUIRED or better is required.]))

AC_SUBST(GDK_PIXBUF_REQUIRED)
dnl ====================================
dnl = end gdk-pixbuf checks
dnl ====================================

dnl ====================================
dnl = zlib for help converters
dnl ====================================
AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz
AC_SUBST(Z_LIBS)], AC_MSG_ERROR([*** zlib is required]))

dnl ====================================
dnl = Begin tests for medusa
dnl ====================================
AC_MSG_CHECKING(for Medusa)

case "`medusa-config --libs 2>/dev/null | cut -d ' ' -f1`" in
'')
	MEDUSA_CFLAGS=""
	MEDUSA_LIBS=""
	AC_MSG_RESULT(no)
;;
 
*)
	MEDUSA_CFLAGS=`medusa-config --cflags`
	MEDUSA_LIBS=`medusa-config --libs`
	AC_DEFINE(HAVE_MEDUSA)
	AC_MSG_RESULT(yes)
;;
esac

AC_SUBST(MEDUSA_CFLAGS)
AC_SUBST(MEDUSA_LIBS)
dnl =======================
dnl = End tests for medusa
dnl =======================

dnl ====================================
dnl = Begin tests for libpng
dnl ====================================
  if test -z "$LIBPNG"; then
    AC_CHECK_LIB(png, png_read_info,
      AC_CHECK_HEADER(png.h,
        png_ok=yes,
        png_ok=no),
      AC_MSG_ERROR(*** (PNG library not found) ***), -lz -lm)
    if test "$png_ok" = yes; then
      AC_MSG_CHECKING([for png_structp in png.h])
      AC_TRY_COMPILE([#include <png.h>],
        [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
        png_ok=yes,
        png_ok=no)
      AC_MSG_RESULT($png_ok)
      if test "$png_ok" = yes; then
        PNG='png'; LIBPNG='-lpng -lz'
      else
        AC_MSG_WARN(*** PNG loader will not be built (PNG library is too old) ***)
      fi
    else
     AC_MSG_WARN(*** PNG loader will not be built (PNG header file not found) ***)
    fi
  fi

AC_SUBST(LIBPNG)
dnl =======================
dnl = End tests for libpng
dnl =======================

dnl ====================================
dnl = Begin tests for libjpeg
dnl ====================================
  if test -z "$LIBJPEG"; then
    AC_CHECK_LIB(jpeg, jpeg_start_decompress,
      AC_CHECK_HEADER(jpeglib.h,
        jpeg_ok=yes,
        jpeg_ok=no),
      AC_MSG_WARN(*** (jpeg library not found) ***), -lm)
    if test "$jpeg_ok" = yes; then
      JPEG='jpeg'; LIBJPEG='-ljpeg'
      AC_DEFINE(HAVE_LIBJPEG)
    else
     AC_MSG_WARN(*** JPEG loader will not be built (jpeg header file not found) ***)
    fi
  fi

AC_SUBST(LIBJPEG)
dnl =======================
dnl = End tests for libjpeg
dnl =======================

dnl Checks for i18n
ALL_LINGUAS="az ca cs da de el en_GB es fi fr ga gl hu it ja ko lt lv nl nn no pl pt pt_BR ro ru sk sl sv ta tr uk zh_TW"
AM_GNOME_GETTEXT
# AM_GNOME_GETTEXT above substs $DATADIRNAME
# this is the directory where the *.{mo,gmo} files are installed
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align -Wsign-compare \
	-Werror \
	$CFLAGS"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$option $CFLAGS"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi

dnl
dnl Define the build message (used in the Nautilus about box)
dnl CVSVERSION overrides
dnl

NAUTILUS_BUILD_MESSAGE=""
AC_ARG_WITH(build-message, [  --with-build-message=MESSAGE		Build (about box) message], NAUTILUS_BUILD_MESSAGE=$withval)

if test -n "$is_cvs_version"
then
	NAUTILUS_BUILD_MESSAGE="Development Build"
fi

AC_DEFINE_UNQUOTED(NAUTILUS_BUILD_MESSAGE, "$NAUTILUS_BUILD_MESSAGE")

NAUTILUS_SOURCE_DIRECTORY=`(cd $srcdir && pwd)`
AC_DEFINE_UNQUOTED(NAUTILUS_SOURCE_DIRECTORY, "$NAUTILUS_SOURCE_DIRECTORY")

dnl
dnl Define the build timestamp if given in the environment.
dnl
if test -n "$EAZEL_BUILD_TIMESTAMP"
then
  AC_DEFINE_UNQUOTED(EAZEL_BUILD_TIMESTAMP,"$EAZEL_BUILD_TIMESTAMP")
fi

dnl Flags for libraries that Nautilus depends on
NAUTILUS_DEPENDENCY_CFLAGS="`$GNOME_CONFIG --cflags bonobo bonobox bonobox_print gnomecanvaspixbuf xml vfs eel`"
NAUTILUS_DEPENDENCY_LIBS="`$GNOME_CONFIG --libs bonobo bonobox bonobox_print gnomecanvaspixbuf xml vfs eel`"
AC_SUBST(NAUTILUS_DEPENDENCY_CFLAGS)
AC_SUBST(NAUTILUS_DEPENDENCY_LIBS)

dnl Flags for modules that depend on Nautilus
NAUTILUS_LIBDIR='-L${libdir}'
NAUTILUS_INCLUDEDIR="-I${includedir} ${NAUTILUS_DEPENDENCY_CFLAGS}"
NAUTILUS_LIBS="-lnautilus ${NAUTILUS_DEPENDENCY_LIBS}"
AC_SUBST(NAUTILUS_LIBDIR)
AC_SUBST(NAUTILUS_INCLUDEDIR)
AC_SUBST(NAUTILUS_LIBS)

dnl Flags for libraries that private parts of Nautilus depend on (like components)
NAUTILUS_PRIVATE_CFLAGS="${NAUTILUS_DEPENDENCY_CFLAGS}"
NAUTILUS_PRIVATE_LIBS="${NAUTILUS_DEPENDENCY_LIBS}"
AC_SUBST(NAUTILUS_PRIVATE_CFLAGS)
AC_SUBST(NAUTILUS_PRIVATE_LIBS)

AC_OUTPUT([
nautilus.spec
Makefile
helper-utilities/Makefile
helper-utilities/error-dialog/Makefile
helper-utilities/xml-migrate/Makefile
helper-scripts/Makefile
icons/Makefile
icons/crux_eggplant/Makefile
icons/crux_eggplant/backgrounds/Makefile
icons/crux_eggplant/sidebar_tab_pieces/Makefile
icons/crux_eggplant/throbber/Makefile
icons/crux_teal/Makefile
icons/crux_teal/backgrounds/Makefile
icons/crux_teal/sidebar_tab_pieces/Makefile
icons/crux_teal/throbber/Makefile
icons/gnome/Makefile
icons/gnome/throbber/Makefile
icons/gnome/sidebar_tab_pieces/Makefile
icons/sidebar_tab_pieces/Makefile
icons/sierra/Makefile
icons/tahoe/Makefile
icons/throbber/Makefile
data/Makefile
data/patterns/Makefile
data/emblems/Makefile
data/linksets/Makefile
cut-n-paste-code/Makefile
cut-n-paste-code/widgets/Makefile
cut-n-paste-code/widgets/e-paned/Makefile
cut-n-paste-code/widgets/gimphwrapbox/Makefile
libnautilus/Makefile
libnautilus-adapter/Makefile
libnautilus-private/Makefile
src/Makefile
src/file-manager/Makefile
components/Makefile
components/adapter/Makefile
components/hardware/Makefile
components/hardware/icons/Makefile
components/history/Makefile
components/help/Makefile
components/help/converters/Makefile
components/help/converters/gnome-db2html2/Makefile
components/help/converters/gnome-db2html3/Makefile
components/help/converters/gnome-db2html3/docbook/Makefile
components/help/converters/gnome-db2html3/docbook/common/Makefile
components/help/converters/gnome-db2html3/docbook/html/Makefile
components/help/converters/gnome-db2html3/docbook/lib/Makefile
components/help/converters/gnome-db2html3/gnome-customization/Makefile
components/help/converters/gnome-info2html2/Makefile
components/help/converters/gnome-man2html2/Makefile
components/image-viewer/Makefile
components/music/Makefile
components/news/Makefile
components/notes/Makefile
components/sample/Makefile
components/mozilla/Makefile
components/text/Makefile
components/text/services/Makefile
components/throbber/Makefile
components/loser/Makefile
components/loser/content/Makefile
components/loser/sidebar/Makefile
components/tree/Makefile
po/Makefile.in
test/Makefile
user-guide/Makefile
user-guide/gnufdl/Makefile
user-guide/gnugpl/Makefile
help/Makefile
help/nautilus-user-manual/Makefile
help/nautilus-user-manual/C/Makefile
help/nautilus-user-manual/es/Makefile
help/nautilus-user-manual/ko/Makefile
help/nautilus-quick-reference/Makefile
help/nautilus-quick-reference/C/Makefile
help/nautilus-quick-reference/no/Makefile
help/nautilus-quick-reference/es/Makefile
help/nautilus-quick-reference/sv/Makefile
help/nautilus-quick-reference/ko/Makefile
help/nautilus-release-notes/Makefile
help/nautilus-release-notes/C/Makefile
help/nautilus-screenshot-guidelines/Makefile
help/nautilus-screenshot-guidelines/C/Makefile
applets/Makefile
applets/launcher/Makefile
applets/preferences-applet/Makefile
omf-install/Makefile
])

dnl <= Configuration summary =>

echo "Nautilus configuration summary:"
echo ""

dnl <= CFLAGS and LDFLAGS =>
echo "CFLAGS : $CFLAGS"
echo "LDFLAGS : $LDFLAGS"
echo ""

dnl <= Mozilla component integrated? =>
case $found_mozilla in
  t*)
	echo "Mozilla component                 : YES"
	echo "   mozilla libraries              : $_mozilla_lib_place"
	echo "   mozilla includes               : $_mozilla_include_place"
	echo "   MOZILLA_PROFILES_CFLAGS        : $MOZILLA_PROFILES_CFLAGS"
	echo "   MOZILLA_COMPONENT_RPATH_FLAGS  : $MOZILLA_COMPONENT_RPATH_FLAGS"
	echo "   MOZILLA_COMPONENT_DEBUG_FLAGS  : $MOZILLA_COMPONENT_DEBUG_FLAGS"
	;;
  *)
	echo "Mozilla component                 : NO"
	;;
esac

dnl <= Profile support? =>
case "X$ENABLE_PROFILER" in
  X1)
	echo "Enable profiler                   : YES"
	;;
  *)
	echo "Enable profiler                   : NO"
	;;
esac

dnl <= Snapshot things =>
echo "EAZEL_BUILD_TIMESTAMP             : $EAZEL_BUILD_TIMESTAMP"
echo "NAUTILUS_BUILD_MESSAGE            : $NAUTILUS_BUILD_MESSAGE"
echo "NAUTILUS_SOURCE_DIRECTORY         : $NAUTILUS_SOURCE_DIRECTORY"
echo "HAVE_APPLETS                      : $HAVE_APPLETS"

dnl <= Nautilus =>
echo "NAUTILUS_LIBDIR     : $NAUTILUS_LIBDIR"
echo "NAUTILUS_INCLUDEDIR : $NAUTILUS_INCLUDEDIR"
echo "NAUTILUS_LIBS       : $NAUTILUS_LIBS"

dnl <= End of configuration summary =>
