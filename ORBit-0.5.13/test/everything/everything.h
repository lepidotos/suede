/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef everything_H
#define everything_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#ifndef test_CONST_CHAR
#define test_CONST_CHAR 't'
#endif				/* !test_CONST_CHAR */

#ifndef test_CONST_SHORT
#define test_CONST_SHORT 4660
#endif				/* !test_CONST_SHORT */

#ifndef test_CONST_LONG
#define test_CONST_LONG 305419896
#endif				/* !test_CONST_LONG */

#ifndef test_CONST_LONGLONG
#define test_CONST_LONGLONG 305419896
#endif				/* !test_CONST_LONGLONG */

#ifndef test_CONST_STRING
#define test_CONST_STRING "ConstString"
#endif				/* !test_CONST_STRING */

#ifndef test_CONST_FLOAT
#define test_CONST_FLOAT 1234.560000
#endif				/* !test_CONST_FLOAT */

#ifndef test_CONST_DOUBLE
#define test_CONST_DOUBLE 1234.567800
#endif				/* !test_CONST_DOUBLE */

#ifndef test_CONST_BOOLEAN
#define test_CONST_BOOLEAN CORBA_TRUE
#endif				/* !test_CONST_BOOLEAN */

#if !defined(_test_Colour_defined)
#define _test_Colour_defined 1
   typedef enum
   {
      test_red,
      test_green,
      test_blue
   }
   test_Colour;
#if !defined(TC_IMPL_TC_test_Colour_0)
#define TC_IMPL_TC_test_Colour_0 'e'
#define TC_IMPL_TC_test_Colour_1 'v'
#define TC_IMPL_TC_test_Colour_2 'e'
#define TC_IMPL_TC_test_Colour_3 'r'
#define TC_IMPL_TC_test_Colour_4 'y'
#define TC_IMPL_TC_test_Colour_5 't'
#define TC_IMPL_TC_test_Colour_6 'h'
#define TC_IMPL_TC_test_Colour_7 'i'
#define TC_IMPL_TC_test_Colour_8 'n'
#define TC_IMPL_TC_test_Colour_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_Colour_struct;
#define TC_test_Colour ((CORBA_TypeCode)&TC_test_Colour_struct)
#endif
#endif
#ifndef test_FAVORITE_COLOUR
#define test_FAVORITE_COLOUR test_red
#endif				/* !test_FAVORITE_COLOUR */

#if !defined(ORBIT_DECL_test_BasicServer) && !defined(_test_BasicServer_defined)
#define ORBIT_DECL_test_BasicServer 1
#define _test_BasicServer_defined 1
#define test_BasicServer__free CORBA_Object__free
   typedef CORBA_Object test_BasicServer;
   extern CORBA_unsigned_long test_BasicServer__classid;
#if !defined(TC_IMPL_TC_test_BasicServer_0)
#define TC_IMPL_TC_test_BasicServer_0 'e'
#define TC_IMPL_TC_test_BasicServer_1 'v'
#define TC_IMPL_TC_test_BasicServer_2 'e'
#define TC_IMPL_TC_test_BasicServer_3 'r'
#define TC_IMPL_TC_test_BasicServer_4 'y'
#define TC_IMPL_TC_test_BasicServer_5 't'
#define TC_IMPL_TC_test_BasicServer_6 'h'
#define TC_IMPL_TC_test_BasicServer_7 'i'
#define TC_IMPL_TC_test_BasicServer_8 'n'
#define TC_IMPL_TC_test_BasicServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BasicServer_struct;
#define TC_test_BasicServer ((CORBA_TypeCode)&TC_test_BasicServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_StructServer) && !defined(_test_StructServer_defined)
#define ORBIT_DECL_test_StructServer 1
#define _test_StructServer_defined 1
#define test_StructServer__free CORBA_Object__free
   typedef CORBA_Object test_StructServer;
   extern CORBA_unsigned_long test_StructServer__classid;
#if !defined(TC_IMPL_TC_test_StructServer_0)
#define TC_IMPL_TC_test_StructServer_0 'e'
#define TC_IMPL_TC_test_StructServer_1 'v'
#define TC_IMPL_TC_test_StructServer_2 'e'
#define TC_IMPL_TC_test_StructServer_3 'r'
#define TC_IMPL_TC_test_StructServer_4 'y'
#define TC_IMPL_TC_test_StructServer_5 't'
#define TC_IMPL_TC_test_StructServer_6 'h'
#define TC_IMPL_TC_test_StructServer_7 'i'
#define TC_IMPL_TC_test_StructServer_8 'n'
#define TC_IMPL_TC_test_StructServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StructServer_struct;
#define TC_test_StructServer ((CORBA_TypeCode)&TC_test_StructServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_SequenceServer) && !defined(_test_SequenceServer_defined)
#define ORBIT_DECL_test_SequenceServer 1
#define _test_SequenceServer_defined 1
#define test_SequenceServer__free CORBA_Object__free
   typedef CORBA_Object test_SequenceServer;
   extern CORBA_unsigned_long test_SequenceServer__classid;
#if !defined(TC_IMPL_TC_test_SequenceServer_0)
#define TC_IMPL_TC_test_SequenceServer_0 'e'
#define TC_IMPL_TC_test_SequenceServer_1 'v'
#define TC_IMPL_TC_test_SequenceServer_2 'e'
#define TC_IMPL_TC_test_SequenceServer_3 'r'
#define TC_IMPL_TC_test_SequenceServer_4 'y'
#define TC_IMPL_TC_test_SequenceServer_5 't'
#define TC_IMPL_TC_test_SequenceServer_6 'h'
#define TC_IMPL_TC_test_SequenceServer_7 'i'
#define TC_IMPL_TC_test_SequenceServer_8 'n'
#define TC_IMPL_TC_test_SequenceServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_SequenceServer_struct;
#define TC_test_SequenceServer ((CORBA_TypeCode)&TC_test_SequenceServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_UnionServer) && !defined(_test_UnionServer_defined)
#define ORBIT_DECL_test_UnionServer 1
#define _test_UnionServer_defined 1
#define test_UnionServer__free CORBA_Object__free
   typedef CORBA_Object test_UnionServer;
   extern CORBA_unsigned_long test_UnionServer__classid;
#if !defined(TC_IMPL_TC_test_UnionServer_0)
#define TC_IMPL_TC_test_UnionServer_0 'e'
#define TC_IMPL_TC_test_UnionServer_1 'v'
#define TC_IMPL_TC_test_UnionServer_2 'e'
#define TC_IMPL_TC_test_UnionServer_3 'r'
#define TC_IMPL_TC_test_UnionServer_4 'y'
#define TC_IMPL_TC_test_UnionServer_5 't'
#define TC_IMPL_TC_test_UnionServer_6 'h'
#define TC_IMPL_TC_test_UnionServer_7 'i'
#define TC_IMPL_TC_test_UnionServer_8 'n'
#define TC_IMPL_TC_test_UnionServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_UnionServer_struct;
#define TC_test_UnionServer ((CORBA_TypeCode)&TC_test_UnionServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_ArrayServer) && !defined(_test_ArrayServer_defined)
#define ORBIT_DECL_test_ArrayServer 1
#define _test_ArrayServer_defined 1
#define test_ArrayServer__free CORBA_Object__free
   typedef CORBA_Object test_ArrayServer;
   extern CORBA_unsigned_long test_ArrayServer__classid;
#if !defined(TC_IMPL_TC_test_ArrayServer_0)
#define TC_IMPL_TC_test_ArrayServer_0 'e'
#define TC_IMPL_TC_test_ArrayServer_1 'v'
#define TC_IMPL_TC_test_ArrayServer_2 'e'
#define TC_IMPL_TC_test_ArrayServer_3 'r'
#define TC_IMPL_TC_test_ArrayServer_4 'y'
#define TC_IMPL_TC_test_ArrayServer_5 't'
#define TC_IMPL_TC_test_ArrayServer_6 'h'
#define TC_IMPL_TC_test_ArrayServer_7 'i'
#define TC_IMPL_TC_test_ArrayServer_8 'n'
#define TC_IMPL_TC_test_ArrayServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_ArrayServer_struct;
#define TC_test_ArrayServer ((CORBA_TypeCode)&TC_test_ArrayServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_AnyServer) && !defined(_test_AnyServer_defined)
#define ORBIT_DECL_test_AnyServer 1
#define _test_AnyServer_defined 1
#define test_AnyServer__free CORBA_Object__free
   typedef CORBA_Object test_AnyServer;
   extern CORBA_unsigned_long test_AnyServer__classid;
#if !defined(TC_IMPL_TC_test_AnyServer_0)
#define TC_IMPL_TC_test_AnyServer_0 'e'
#define TC_IMPL_TC_test_AnyServer_1 'v'
#define TC_IMPL_TC_test_AnyServer_2 'e'
#define TC_IMPL_TC_test_AnyServer_3 'r'
#define TC_IMPL_TC_test_AnyServer_4 'y'
#define TC_IMPL_TC_test_AnyServer_5 't'
#define TC_IMPL_TC_test_AnyServer_6 'h'
#define TC_IMPL_TC_test_AnyServer_7 'i'
#define TC_IMPL_TC_test_AnyServer_8 'n'
#define TC_IMPL_TC_test_AnyServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_AnyServer_struct;
#define TC_test_AnyServer ((CORBA_TypeCode)&TC_test_AnyServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_BaseServer) && !defined(_test_BaseServer_defined)
#define ORBIT_DECL_test_BaseServer 1
#define _test_BaseServer_defined 1
#define test_BaseServer__free CORBA_Object__free
   typedef CORBA_Object test_BaseServer;
   extern CORBA_unsigned_long test_BaseServer__classid;
#if !defined(TC_IMPL_TC_test_BaseServer_0)
#define TC_IMPL_TC_test_BaseServer_0 'e'
#define TC_IMPL_TC_test_BaseServer_1 'v'
#define TC_IMPL_TC_test_BaseServer_2 'e'
#define TC_IMPL_TC_test_BaseServer_3 'r'
#define TC_IMPL_TC_test_BaseServer_4 'y'
#define TC_IMPL_TC_test_BaseServer_5 't'
#define TC_IMPL_TC_test_BaseServer_6 'h'
#define TC_IMPL_TC_test_BaseServer_7 'i'
#define TC_IMPL_TC_test_BaseServer_8 'n'
#define TC_IMPL_TC_test_BaseServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BaseServer_struct;
#define TC_test_BaseServer ((CORBA_TypeCode)&TC_test_BaseServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_B1) && !defined(_test_B1_defined)
#define ORBIT_DECL_test_B1 1
#define _test_B1_defined 1
#define test_B1__free CORBA_Object__free
   typedef CORBA_Object test_B1;
   extern CORBA_unsigned_long test_B1__classid;
#if !defined(TC_IMPL_TC_test_B1_0)
#define TC_IMPL_TC_test_B1_0 'e'
#define TC_IMPL_TC_test_B1_1 'v'
#define TC_IMPL_TC_test_B1_2 'e'
#define TC_IMPL_TC_test_B1_3 'r'
#define TC_IMPL_TC_test_B1_4 'y'
#define TC_IMPL_TC_test_B1_5 't'
#define TC_IMPL_TC_test_B1_6 'h'
#define TC_IMPL_TC_test_B1_7 'i'
#define TC_IMPL_TC_test_B1_8 'n'
#define TC_IMPL_TC_test_B1_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_B1_struct;
#define TC_test_B1 ((CORBA_TypeCode)&TC_test_B1_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_B2) && !defined(_test_B2_defined)
#define ORBIT_DECL_test_B2 1
#define _test_B2_defined 1
#define test_B2__free CORBA_Object__free
   typedef CORBA_Object test_B2;
   extern CORBA_unsigned_long test_B2__classid;
#if !defined(TC_IMPL_TC_test_B2_0)
#define TC_IMPL_TC_test_B2_0 'e'
#define TC_IMPL_TC_test_B2_1 'v'
#define TC_IMPL_TC_test_B2_2 'e'
#define TC_IMPL_TC_test_B2_3 'r'
#define TC_IMPL_TC_test_B2_4 'y'
#define TC_IMPL_TC_test_B2_5 't'
#define TC_IMPL_TC_test_B2_6 'h'
#define TC_IMPL_TC_test_B2_7 'i'
#define TC_IMPL_TC_test_B2_8 'n'
#define TC_IMPL_TC_test_B2_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_B2_struct;
#define TC_test_B2 ((CORBA_TypeCode)&TC_test_B2_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_DerivedServer) && !defined(_test_DerivedServer_defined)
#define ORBIT_DECL_test_DerivedServer 1
#define _test_DerivedServer_defined 1
#define test_DerivedServer__free CORBA_Object__free
   typedef CORBA_Object test_DerivedServer;
   extern CORBA_unsigned_long test_DerivedServer__classid;
#if !defined(TC_IMPL_TC_test_DerivedServer_0)
#define TC_IMPL_TC_test_DerivedServer_0 'e'
#define TC_IMPL_TC_test_DerivedServer_1 'v'
#define TC_IMPL_TC_test_DerivedServer_2 'e'
#define TC_IMPL_TC_test_DerivedServer_3 'r'
#define TC_IMPL_TC_test_DerivedServer_4 'y'
#define TC_IMPL_TC_test_DerivedServer_5 't'
#define TC_IMPL_TC_test_DerivedServer_6 'h'
#define TC_IMPL_TC_test_DerivedServer_7 'i'
#define TC_IMPL_TC_test_DerivedServer_8 'n'
#define TC_IMPL_TC_test_DerivedServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_DerivedServer_struct;
#define TC_test_DerivedServer ((CORBA_TypeCode)&TC_test_DerivedServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_TransientObj) && !defined(_test_TransientObj_defined)
#define ORBIT_DECL_test_TransientObj 1
#define _test_TransientObj_defined 1
#define test_TransientObj__free CORBA_Object__free
   typedef CORBA_Object test_TransientObj;
   extern CORBA_unsigned_long test_TransientObj__classid;
#if !defined(TC_IMPL_TC_test_TransientObj_0)
#define TC_IMPL_TC_test_TransientObj_0 'e'
#define TC_IMPL_TC_test_TransientObj_1 'v'
#define TC_IMPL_TC_test_TransientObj_2 'e'
#define TC_IMPL_TC_test_TransientObj_3 'r'
#define TC_IMPL_TC_test_TransientObj_4 'y'
#define TC_IMPL_TC_test_TransientObj_5 't'
#define TC_IMPL_TC_test_TransientObj_6 'h'
#define TC_IMPL_TC_test_TransientObj_7 'i'
#define TC_IMPL_TC_test_TransientObj_8 'n'
#define TC_IMPL_TC_test_TransientObj_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_TransientObj_struct;
#define TC_test_TransientObj ((CORBA_TypeCode)&TC_test_TransientObj_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_TestFactory) && !defined(_test_TestFactory_defined)
#define ORBIT_DECL_test_TestFactory 1
#define _test_TestFactory_defined 1
#define test_TestFactory__free CORBA_Object__free
   typedef CORBA_Object test_TestFactory;
   extern CORBA_unsigned_long test_TestFactory__classid;
#if !defined(TC_IMPL_TC_test_TestFactory_0)
#define TC_IMPL_TC_test_TestFactory_0 'e'
#define TC_IMPL_TC_test_TestFactory_1 'v'
#define TC_IMPL_TC_test_TestFactory_2 'e'
#define TC_IMPL_TC_test_TestFactory_3 'r'
#define TC_IMPL_TC_test_TestFactory_4 'y'
#define TC_IMPL_TC_test_TestFactory_5 't'
#define TC_IMPL_TC_test_TestFactory_6 'h'
#define TC_IMPL_TC_test_TestFactory_7 'i'
#define TC_IMPL_TC_test_TestFactory_8 'n'
#define TC_IMPL_TC_test_TestFactory_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_TestFactory_struct;
#define TC_test_TestFactory ((CORBA_TypeCode)&TC_test_TestFactory_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_TransientObj) && !defined(_test_TransientObj_defined)
#define ORBIT_DECL_test_TransientObj 1
#define _test_TransientObj_defined 1
#define test_TransientObj__free CORBA_Object__free
   typedef CORBA_Object test_TransientObj;
   extern CORBA_unsigned_long test_TransientObj__classid;
#if !defined(TC_IMPL_TC_test_TransientObj_0)
#define TC_IMPL_TC_test_TransientObj_0 'e'
#define TC_IMPL_TC_test_TransientObj_1 'v'
#define TC_IMPL_TC_test_TransientObj_2 'e'
#define TC_IMPL_TC_test_TransientObj_3 'r'
#define TC_IMPL_TC_test_TransientObj_4 'y'
#define TC_IMPL_TC_test_TransientObj_5 't'
#define TC_IMPL_TC_test_TransientObj_6 'h'
#define TC_IMPL_TC_test_TransientObj_7 'i'
#define TC_IMPL_TC_test_TransientObj_8 'n'
#define TC_IMPL_TC_test_TransientObj_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_TransientObj_struct;
#define TC_test_TransientObj ((CORBA_TypeCode)&TC_test_TransientObj_struct)
#endif
#endif
#if !defined(_test_FixedLengthStruct_defined)
#define _test_FixedLengthStruct_defined 1
   typedef struct
   {
      CORBA_short a;
   }
   test_FixedLengthStruct;

#if !defined(TC_IMPL_TC_test_FixedLengthStruct_0)
#define TC_IMPL_TC_test_FixedLengthStruct_0 'e'
#define TC_IMPL_TC_test_FixedLengthStruct_1 'v'
#define TC_IMPL_TC_test_FixedLengthStruct_2 'e'
#define TC_IMPL_TC_test_FixedLengthStruct_3 'r'
#define TC_IMPL_TC_test_FixedLengthStruct_4 'y'
#define TC_IMPL_TC_test_FixedLengthStruct_5 't'
#define TC_IMPL_TC_test_FixedLengthStruct_6 'h'
#define TC_IMPL_TC_test_FixedLengthStruct_7 'i'
#define TC_IMPL_TC_test_FixedLengthStruct_8 'n'
#define TC_IMPL_TC_test_FixedLengthStruct_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_FixedLengthStruct_struct;
#define TC_test_FixedLengthStruct ((CORBA_TypeCode)&TC_test_FixedLengthStruct_struct)
#endif
   extern test_FixedLengthStruct *test_FixedLengthStruct__alloc(void);
   extern gpointer test_FixedLengthStruct__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_VariableLengthStruct_defined)
#define _test_VariableLengthStruct_defined 1
   typedef struct
   {
      CORBA_char *a;
   }
   test_VariableLengthStruct;

#if !defined(TC_IMPL_TC_test_VariableLengthStruct_0)
#define TC_IMPL_TC_test_VariableLengthStruct_0 'e'
#define TC_IMPL_TC_test_VariableLengthStruct_1 'v'
#define TC_IMPL_TC_test_VariableLengthStruct_2 'e'
#define TC_IMPL_TC_test_VariableLengthStruct_3 'r'
#define TC_IMPL_TC_test_VariableLengthStruct_4 'y'
#define TC_IMPL_TC_test_VariableLengthStruct_5 't'
#define TC_IMPL_TC_test_VariableLengthStruct_6 'h'
#define TC_IMPL_TC_test_VariableLengthStruct_7 'i'
#define TC_IMPL_TC_test_VariableLengthStruct_8 'n'
#define TC_IMPL_TC_test_VariableLengthStruct_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_test_VariableLengthStruct_struct;
#define TC_test_VariableLengthStruct ((CORBA_TypeCode)&TC_test_VariableLengthStruct_struct)
#endif
   extern test_VariableLengthStruct *test_VariableLengthStruct__alloc(void);
   extern gpointer test_VariableLengthStruct__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_CompoundStruct_defined)
#define _test_CompoundStruct_defined 1
   typedef struct
   {
      test_VariableLengthStruct a;
   }
   test_CompoundStruct;

#if !defined(TC_IMPL_TC_test_CompoundStruct_0)
#define TC_IMPL_TC_test_CompoundStruct_0 'e'
#define TC_IMPL_TC_test_CompoundStruct_1 'v'
#define TC_IMPL_TC_test_CompoundStruct_2 'e'
#define TC_IMPL_TC_test_CompoundStruct_3 'r'
#define TC_IMPL_TC_test_CompoundStruct_4 'y'
#define TC_IMPL_TC_test_CompoundStruct_5 't'
#define TC_IMPL_TC_test_CompoundStruct_6 'h'
#define TC_IMPL_TC_test_CompoundStruct_7 'i'
#define TC_IMPL_TC_test_CompoundStruct_8 'n'
#define TC_IMPL_TC_test_CompoundStruct_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_CompoundStruct_struct;
#define TC_test_CompoundStruct ((CORBA_TypeCode)&TC_test_CompoundStruct_struct)
#endif
   extern test_CompoundStruct *test_CompoundStruct__alloc(void);
   extern gpointer test_CompoundStruct__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_test_StructServer) && !defined(_test_StructServer_defined)
#define ORBIT_DECL_test_StructServer 1
#define _test_StructServer_defined 1
#define test_StructServer__free CORBA_Object__free
   typedef CORBA_Object test_StructServer;
   extern CORBA_unsigned_long test_StructServer__classid;
#if !defined(TC_IMPL_TC_test_StructServer_0)
#define TC_IMPL_TC_test_StructServer_0 'e'
#define TC_IMPL_TC_test_StructServer_1 'v'
#define TC_IMPL_TC_test_StructServer_2 'e'
#define TC_IMPL_TC_test_StructServer_3 'r'
#define TC_IMPL_TC_test_StructServer_4 'y'
#define TC_IMPL_TC_test_StructServer_5 't'
#define TC_IMPL_TC_test_StructServer_6 'h'
#define TC_IMPL_TC_test_StructServer_7 'i'
#define TC_IMPL_TC_test_StructServer_8 'n'
#define TC_IMPL_TC_test_StructServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StructServer_struct;
#define TC_test_StructServer ((CORBA_TypeCode)&TC_test_StructServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'r'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'h'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'r'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'h'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_StrSeq_defined)
#define _test_StrSeq_defined 1
   typedef CORBA_sequence_CORBA_string test_StrSeq;
#if !defined(TC_IMPL_TC_test_StrSeq_0)
#define TC_IMPL_TC_test_StrSeq_0 'e'
#define TC_IMPL_TC_test_StrSeq_1 'v'
#define TC_IMPL_TC_test_StrSeq_2 'e'
#define TC_IMPL_TC_test_StrSeq_3 'r'
#define TC_IMPL_TC_test_StrSeq_4 'y'
#define TC_IMPL_TC_test_StrSeq_5 't'
#define TC_IMPL_TC_test_StrSeq_6 'h'
#define TC_IMPL_TC_test_StrSeq_7 'i'
#define TC_IMPL_TC_test_StrSeq_8 'n'
#define TC_IMPL_TC_test_StrSeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StrSeq_struct;
#define TC_test_StrSeq ((CORBA_TypeCode)&TC_test_StrSeq_struct)
#endif
   extern test_StrSeq *test_StrSeq__alloc(void);
   extern gpointer test_StrSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_test_CompoundStruct) && !defined(_CORBA_sequence_test_CompoundStruct_defined)
#define ORBIT_DECL_CORBA_sequence_test_CompoundStruct 1
#define _CORBA_sequence_test_CompoundStruct_defined 1
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_0 'e'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_1 'v'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_2 'e'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_3 'r'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_4 'y'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_5 't'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_6 'h'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_7 'i'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_8 'n'
#define ORBIT_IMPL_CORBA_sequence_test_CompoundStruct_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      test_CompoundStruct *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_test_CompoundStruct;
   test_CompoundStruct
      *CORBA_sequence_test_CompoundStruct_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_0)
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_0 'e'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_1 'v'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_2 'e'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_3 'r'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_4 'y'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_5 't'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_6 'h'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_7 'i'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_8 'n'
#define TC_IMPL_TC_CORBA_sequence_test_CompoundStruct_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_test_CompoundStruct_struct;
#define TC_CORBA_sequence_test_CompoundStruct ((CORBA_TypeCode)&TC_CORBA_sequence_test_CompoundStruct_struct)
#endif
   extern CORBA_sequence_test_CompoundStruct
      *CORBA_sequence_test_CompoundStruct__alloc(void);
   extern gpointer CORBA_sequence_test_CompoundStruct__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_BoundedStructSeq_defined)
#define _test_BoundedStructSeq_defined 1
   typedef CORBA_sequence_test_CompoundStruct test_BoundedStructSeq;
#if !defined(TC_IMPL_TC_test_BoundedStructSeq_0)
#define TC_IMPL_TC_test_BoundedStructSeq_0 'e'
#define TC_IMPL_TC_test_BoundedStructSeq_1 'v'
#define TC_IMPL_TC_test_BoundedStructSeq_2 'e'
#define TC_IMPL_TC_test_BoundedStructSeq_3 'r'
#define TC_IMPL_TC_test_BoundedStructSeq_4 'y'
#define TC_IMPL_TC_test_BoundedStructSeq_5 't'
#define TC_IMPL_TC_test_BoundedStructSeq_6 'h'
#define TC_IMPL_TC_test_BoundedStructSeq_7 'i'
#define TC_IMPL_TC_test_BoundedStructSeq_8 'n'
#define TC_IMPL_TC_test_BoundedStructSeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BoundedStructSeq_struct;
#define TC_test_BoundedStructSeq ((CORBA_TypeCode)&TC_test_BoundedStructSeq_struct)
#endif
   extern test_BoundedStructSeq *test_BoundedStructSeq__alloc(void);
   extern gpointer test_BoundedStructSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long) && !defined(_CORBA_sequence_CORBA_long_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define _CORBA_sequence_CORBA_long_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'r'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 'y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_6 'h'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_8 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_long *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_long;
   CORBA_long *CORBA_sequence_CORBA_long_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'r'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 'y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_6 'h'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_8 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
   extern CORBA_sequence_CORBA_long *CORBA_sequence_CORBA_long__alloc(void);
   extern gpointer CORBA_sequence_CORBA_long__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_BoundedLongSeq_defined)
#define _test_BoundedLongSeq_defined 1
   typedef CORBA_sequence_CORBA_long test_BoundedLongSeq;
#if !defined(TC_IMPL_TC_test_BoundedLongSeq_0)
#define TC_IMPL_TC_test_BoundedLongSeq_0 'e'
#define TC_IMPL_TC_test_BoundedLongSeq_1 'v'
#define TC_IMPL_TC_test_BoundedLongSeq_2 'e'
#define TC_IMPL_TC_test_BoundedLongSeq_3 'r'
#define TC_IMPL_TC_test_BoundedLongSeq_4 'y'
#define TC_IMPL_TC_test_BoundedLongSeq_5 't'
#define TC_IMPL_TC_test_BoundedLongSeq_6 'h'
#define TC_IMPL_TC_test_BoundedLongSeq_7 'i'
#define TC_IMPL_TC_test_BoundedLongSeq_8 'n'
#define TC_IMPL_TC_test_BoundedLongSeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BoundedLongSeq_struct;
#define TC_test_BoundedLongSeq ((CORBA_TypeCode)&TC_test_BoundedLongSeq_struct)
#endif
   extern test_BoundedLongSeq *test_BoundedLongSeq__alloc(void);
   extern gpointer test_BoundedLongSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long) && !defined(_CORBA_sequence_CORBA_long_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define _CORBA_sequence_CORBA_long_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'r'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 'y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_6 'h'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_8 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_long *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_long;
   CORBA_long *CORBA_sequence_CORBA_long_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'r'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 'y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_6 'h'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_8 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
   extern CORBA_sequence_CORBA_long *CORBA_sequence_CORBA_long__alloc(void);
   extern gpointer CORBA_sequence_CORBA_long__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_LongSeq_defined)
#define _test_LongSeq_defined 1
   typedef CORBA_sequence_CORBA_long test_LongSeq;
#if !defined(TC_IMPL_TC_test_LongSeq_0)
#define TC_IMPL_TC_test_LongSeq_0 'e'
#define TC_IMPL_TC_test_LongSeq_1 'v'
#define TC_IMPL_TC_test_LongSeq_2 'e'
#define TC_IMPL_TC_test_LongSeq_3 'r'
#define TC_IMPL_TC_test_LongSeq_4 'y'
#define TC_IMPL_TC_test_LongSeq_5 't'
#define TC_IMPL_TC_test_LongSeq_6 'h'
#define TC_IMPL_TC_test_LongSeq_7 'i'
#define TC_IMPL_TC_test_LongSeq_8 'n'
#define TC_IMPL_TC_test_LongSeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_LongSeq_struct;
#define TC_test_LongSeq ((CORBA_TypeCode)&TC_test_LongSeq_struct)
#endif
   extern test_LongSeq *test_LongSeq__alloc(void);
   extern gpointer test_LongSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_test_StrSeq) && !defined(_CORBA_sequence_test_StrSeq_defined)
#define ORBIT_DECL_CORBA_sequence_test_StrSeq 1
#define _CORBA_sequence_test_StrSeq_defined 1
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_0 'e'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_1 'v'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_2 'e'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_3 'r'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_4 'y'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_5 't'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_6 'h'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_7 'i'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_8 'n'
#define ORBIT_IMPL_CORBA_sequence_test_StrSeq_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      test_StrSeq *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_test_StrSeq;
   test_StrSeq *CORBA_sequence_test_StrSeq_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_test_StrSeq_0)
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_0 'e'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_1 'v'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_2 'e'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_3 'r'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_4 'y'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_5 't'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_6 'h'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_7 'i'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_8 'n'
#define TC_IMPL_TC_CORBA_sequence_test_StrSeq_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_test_StrSeq_struct;
#define TC_CORBA_sequence_test_StrSeq ((CORBA_TypeCode)&TC_CORBA_sequence_test_StrSeq_struct)
#endif
   extern CORBA_sequence_test_StrSeq *CORBA_sequence_test_StrSeq__alloc(void);
   extern gpointer CORBA_sequence_test_StrSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_StrSeqSeq_defined)
#define _test_StrSeqSeq_defined 1
   typedef CORBA_sequence_test_StrSeq test_StrSeqSeq;
#if !defined(TC_IMPL_TC_test_StrSeqSeq_0)
#define TC_IMPL_TC_test_StrSeqSeq_0 'e'
#define TC_IMPL_TC_test_StrSeqSeq_1 'v'
#define TC_IMPL_TC_test_StrSeqSeq_2 'e'
#define TC_IMPL_TC_test_StrSeqSeq_3 'r'
#define TC_IMPL_TC_test_StrSeqSeq_4 'y'
#define TC_IMPL_TC_test_StrSeqSeq_5 't'
#define TC_IMPL_TC_test_StrSeqSeq_6 'h'
#define TC_IMPL_TC_test_StrSeqSeq_7 'i'
#define TC_IMPL_TC_test_StrSeqSeq_8 'n'
#define TC_IMPL_TC_test_StrSeqSeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StrSeqSeq_struct;
#define TC_test_StrSeqSeq ((CORBA_TypeCode)&TC_test_StrSeqSeq_struct)
#endif
   extern test_StrSeqSeq *test_StrSeqSeq__alloc(void);
   extern gpointer test_StrSeqSeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_any) && !defined(_CORBA_sequence_CORBA_any_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_any 1
#define _CORBA_sequence_CORBA_any_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_0 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_1 'v'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_2 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_3 'r'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_4 'y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_5 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_6 'h'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_7 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_8 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_any_9 'g'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_any *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_any;
   CORBA_any *CORBA_sequence_CORBA_any_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_any_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_0 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_1 'v'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_2 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_3 'r'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_4 'y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_5 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_6 'h'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_7 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_8 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_any_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_any_struct;
#define TC_CORBA_sequence_CORBA_any ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_any_struct)
#endif
   extern CORBA_sequence_CORBA_any *CORBA_sequence_CORBA_any__alloc(void);
   extern gpointer CORBA_sequence_CORBA_any__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_test_AnySeq_defined)
#define _test_AnySeq_defined 1
   typedef CORBA_sequence_CORBA_any test_AnySeq;
#if !defined(TC_IMPL_TC_test_AnySeq_0)
#define TC_IMPL_TC_test_AnySeq_0 'e'
#define TC_IMPL_TC_test_AnySeq_1 'v'
#define TC_IMPL_TC_test_AnySeq_2 'e'
#define TC_IMPL_TC_test_AnySeq_3 'r'
#define TC_IMPL_TC_test_AnySeq_4 'y'
#define TC_IMPL_TC_test_AnySeq_5 't'
#define TC_IMPL_TC_test_AnySeq_6 'h'
#define TC_IMPL_TC_test_AnySeq_7 'i'
#define TC_IMPL_TC_test_AnySeq_8 'n'
#define TC_IMPL_TC_test_AnySeq_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_AnySeq_struct;
#define TC_test_AnySeq ((CORBA_TypeCode)&TC_test_AnySeq_struct)
#endif
   extern test_AnySeq *test_AnySeq__alloc(void);
   extern gpointer test_AnySeq__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_StructWithSequenceInIt_defined)
#define _test_StructWithSequenceInIt_defined 1
   typedef struct
   {
      test_StrSeqSeq theSeq;
   }
   test_StructWithSequenceInIt;

#if !defined(TC_IMPL_TC_test_StructWithSequenceInIt_0)
#define TC_IMPL_TC_test_StructWithSequenceInIt_0 'e'
#define TC_IMPL_TC_test_StructWithSequenceInIt_1 'v'
#define TC_IMPL_TC_test_StructWithSequenceInIt_2 'e'
#define TC_IMPL_TC_test_StructWithSequenceInIt_3 'r'
#define TC_IMPL_TC_test_StructWithSequenceInIt_4 'y'
#define TC_IMPL_TC_test_StructWithSequenceInIt_5 't'
#define TC_IMPL_TC_test_StructWithSequenceInIt_6 'h'
#define TC_IMPL_TC_test_StructWithSequenceInIt_7 'i'
#define TC_IMPL_TC_test_StructWithSequenceInIt_8 'n'
#define TC_IMPL_TC_test_StructWithSequenceInIt_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_test_StructWithSequenceInIt_struct;
#define TC_test_StructWithSequenceInIt ((CORBA_TypeCode)&TC_test_StructWithSequenceInIt_struct)
#endif
   extern test_StructWithSequenceInIt
      *test_StructWithSequenceInIt__alloc(void);
   extern gpointer test_StructWithSequenceInIt__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_test_SequenceServer) && !defined(_test_SequenceServer_defined)
#define ORBIT_DECL_test_SequenceServer 1
#define _test_SequenceServer_defined 1
#define test_SequenceServer__free CORBA_Object__free
   typedef CORBA_Object test_SequenceServer;
   extern CORBA_unsigned_long test_SequenceServer__classid;
#if !defined(TC_IMPL_TC_test_SequenceServer_0)
#define TC_IMPL_TC_test_SequenceServer_0 'e'
#define TC_IMPL_TC_test_SequenceServer_1 'v'
#define TC_IMPL_TC_test_SequenceServer_2 'e'
#define TC_IMPL_TC_test_SequenceServer_3 'r'
#define TC_IMPL_TC_test_SequenceServer_4 'y'
#define TC_IMPL_TC_test_SequenceServer_5 't'
#define TC_IMPL_TC_test_SequenceServer_6 'h'
#define TC_IMPL_TC_test_SequenceServer_7 'i'
#define TC_IMPL_TC_test_SequenceServer_8 'n'
#define TC_IMPL_TC_test_SequenceServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_SequenceServer_struct;
#define TC_test_SequenceServer ((CORBA_TypeCode)&TC_test_SequenceServer_struct)
#endif
#endif
#if !defined(_test_AnEnum_defined)
#define _test_AnEnum_defined 1
   typedef enum
   {
      test_ENUM_IN,
      test_ENUM_INOUT_IN,
      test_ENUM_INOUT_OUT,
      test_ENUM_OUT,
      test_ENUM_RETN
   }
   test_AnEnum;
#if !defined(TC_IMPL_TC_test_AnEnum_0)
#define TC_IMPL_TC_test_AnEnum_0 'e'
#define TC_IMPL_TC_test_AnEnum_1 'v'
#define TC_IMPL_TC_test_AnEnum_2 'e'
#define TC_IMPL_TC_test_AnEnum_3 'r'
#define TC_IMPL_TC_test_AnEnum_4 'y'
#define TC_IMPL_TC_test_AnEnum_5 't'
#define TC_IMPL_TC_test_AnEnum_6 'h'
#define TC_IMPL_TC_test_AnEnum_7 'i'
#define TC_IMPL_TC_test_AnEnum_8 'n'
#define TC_IMPL_TC_test_AnEnum_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_AnEnum_struct;
#define TC_test_AnEnum ((CORBA_TypeCode)&TC_test_AnEnum_struct)
#endif
#endif
#define ex_test_TestException "IDL:orbit/test/TestException:1.0"
   void _ORBIT_test_TestException_demarshal(GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev);
   void _ORBIT_test_TestException_marshal(GIOPSendBuffer * _ORBIT_send_buffer,
					  CORBA_Environment * ev);
#if !defined(_test_TestException_defined)
#define _test_TestException_defined 1
   typedef struct
   {
      CORBA_char *reason;
      CORBA_long number;
      test_LongSeq aseq;
      test_TestFactory factory;
   }
   test_TestException;

#if !defined(TC_IMPL_TC_test_TestException_0)
#define TC_IMPL_TC_test_TestException_0 'e'
#define TC_IMPL_TC_test_TestException_1 'v'
#define TC_IMPL_TC_test_TestException_2 'e'
#define TC_IMPL_TC_test_TestException_3 'r'
#define TC_IMPL_TC_test_TestException_4 'y'
#define TC_IMPL_TC_test_TestException_5 't'
#define TC_IMPL_TC_test_TestException_6 'h'
#define TC_IMPL_TC_test_TestException_7 'i'
#define TC_IMPL_TC_test_TestException_8 'n'
#define TC_IMPL_TC_test_TestException_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_TestException_struct;
#define TC_test_TestException ((CORBA_TypeCode)&TC_test_TestException_struct)
#endif
   extern test_TestException *test_TestException__alloc(void);
   extern gpointer test_TestException__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_LongArray_defined)
#define _test_LongArray_defined 1
   typedef CORBA_long test_LongArray[2];
   typedef CORBA_long test_LongArray_slice;
#if !defined(TC_IMPL_TC_test_LongArray_0)
#define TC_IMPL_TC_test_LongArray_0 'e'
#define TC_IMPL_TC_test_LongArray_1 'v'
#define TC_IMPL_TC_test_LongArray_2 'e'
#define TC_IMPL_TC_test_LongArray_3 'r'
#define TC_IMPL_TC_test_LongArray_4 'y'
#define TC_IMPL_TC_test_LongArray_5 't'
#define TC_IMPL_TC_test_LongArray_6 'h'
#define TC_IMPL_TC_test_LongArray_7 'i'
#define TC_IMPL_TC_test_LongArray_8 'n'
#define TC_IMPL_TC_test_LongArray_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_LongArray_struct;
#define TC_test_LongArray ((CORBA_TypeCode)&TC_test_LongArray_struct)
#endif
   extern test_LongArray_slice *test_LongArray__alloc(void);
   extern gpointer test_LongArray__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_StrArray_defined)
#define _test_StrArray_defined 1
   typedef CORBA_char *test_StrArray[2];
   typedef CORBA_char *test_StrArray_slice;
#if !defined(TC_IMPL_TC_test_StrArray_0)
#define TC_IMPL_TC_test_StrArray_0 'e'
#define TC_IMPL_TC_test_StrArray_1 'v'
#define TC_IMPL_TC_test_StrArray_2 'e'
#define TC_IMPL_TC_test_StrArray_3 'r'
#define TC_IMPL_TC_test_StrArray_4 'y'
#define TC_IMPL_TC_test_StrArray_5 't'
#define TC_IMPL_TC_test_StrArray_6 'h'
#define TC_IMPL_TC_test_StrArray_7 'i'
#define TC_IMPL_TC_test_StrArray_8 'n'
#define TC_IMPL_TC_test_StrArray_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StrArray_struct;
#define TC_test_StrArray ((CORBA_TypeCode)&TC_test_StrArray_struct)
#endif
   extern test_StrArray_slice *test_StrArray__alloc(void);
   extern gpointer test_StrArray__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_StrArrayMultiDimensional_defined)
#define _test_StrArrayMultiDimensional_defined 1
   typedef CORBA_char *test_StrArrayMultiDimensional[2][3][5];
   typedef CORBA_char *test_StrArrayMultiDimensional_slice[3][5];
#if !defined(TC_IMPL_TC_test_StrArrayMultiDimensional_0)
#define TC_IMPL_TC_test_StrArrayMultiDimensional_0 'e'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_1 'v'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_2 'e'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_3 'r'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_4 'y'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_5 't'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_6 'h'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_7 'i'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_8 'n'
#define TC_IMPL_TC_test_StrArrayMultiDimensional_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_test_StrArrayMultiDimensional_struct;
#define TC_test_StrArrayMultiDimensional ((CORBA_TypeCode)&TC_test_StrArrayMultiDimensional_struct)
#endif
   extern test_StrArrayMultiDimensional_slice
      *test_StrArrayMultiDimensional__alloc(void);
   extern gpointer test_StrArrayMultiDimensional__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_VariableLengthStructArray_defined)
#define _test_VariableLengthStructArray_defined 1
   typedef test_VariableLengthStruct test_VariableLengthStructArray[2];
   typedef test_VariableLengthStruct test_VariableLengthStructArray_slice;
#if !defined(TC_IMPL_TC_test_VariableLengthStructArray_0)
#define TC_IMPL_TC_test_VariableLengthStructArray_0 'e'
#define TC_IMPL_TC_test_VariableLengthStructArray_1 'v'
#define TC_IMPL_TC_test_VariableLengthStructArray_2 'e'
#define TC_IMPL_TC_test_VariableLengthStructArray_3 'r'
#define TC_IMPL_TC_test_VariableLengthStructArray_4 'y'
#define TC_IMPL_TC_test_VariableLengthStructArray_5 't'
#define TC_IMPL_TC_test_VariableLengthStructArray_6 'h'
#define TC_IMPL_TC_test_VariableLengthStructArray_7 'i'
#define TC_IMPL_TC_test_VariableLengthStructArray_8 'n'
#define TC_IMPL_TC_test_VariableLengthStructArray_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_test_VariableLengthStructArray_struct;
#define TC_test_VariableLengthStructArray ((CORBA_TypeCode)&TC_test_VariableLengthStructArray_struct)
#endif
   extern test_VariableLengthStructArray_slice
      *test_VariableLengthStructArray__alloc(void);
   extern gpointer test_VariableLengthStructArray__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_test_ArrayServer) && !defined(_test_ArrayServer_defined)
#define ORBIT_DECL_test_ArrayServer 1
#define _test_ArrayServer_defined 1
#define test_ArrayServer__free CORBA_Object__free
   typedef CORBA_Object test_ArrayServer;
   extern CORBA_unsigned_long test_ArrayServer__classid;
#if !defined(TC_IMPL_TC_test_ArrayServer_0)
#define TC_IMPL_TC_test_ArrayServer_0 'e'
#define TC_IMPL_TC_test_ArrayServer_1 'v'
#define TC_IMPL_TC_test_ArrayServer_2 'e'
#define TC_IMPL_TC_test_ArrayServer_3 'r'
#define TC_IMPL_TC_test_ArrayServer_4 'y'
#define TC_IMPL_TC_test_ArrayServer_5 't'
#define TC_IMPL_TC_test_ArrayServer_6 'h'
#define TC_IMPL_TC_test_ArrayServer_7 'i'
#define TC_IMPL_TC_test_ArrayServer_8 'n'
#define TC_IMPL_TC_test_ArrayServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_ArrayServer_struct;
#define TC_test_ArrayServer ((CORBA_TypeCode)&TC_test_ArrayServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_BasicServer) && !defined(_test_BasicServer_defined)
#define ORBIT_DECL_test_BasicServer 1
#define _test_BasicServer_defined 1
#define test_BasicServer__free CORBA_Object__free
   typedef CORBA_Object test_BasicServer;
   extern CORBA_unsigned_long test_BasicServer__classid;
#if !defined(TC_IMPL_TC_test_BasicServer_0)
#define TC_IMPL_TC_test_BasicServer_0 'e'
#define TC_IMPL_TC_test_BasicServer_1 'v'
#define TC_IMPL_TC_test_BasicServer_2 'e'
#define TC_IMPL_TC_test_BasicServer_3 'r'
#define TC_IMPL_TC_test_BasicServer_4 'y'
#define TC_IMPL_TC_test_BasicServer_5 't'
#define TC_IMPL_TC_test_BasicServer_6 'h'
#define TC_IMPL_TC_test_BasicServer_7 'i'
#define TC_IMPL_TC_test_BasicServer_8 'n'
#define TC_IMPL_TC_test_BasicServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BasicServer_struct;
#define TC_test_BasicServer ((CORBA_TypeCode)&TC_test_BasicServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_BaseServer) && !defined(_test_BaseServer_defined)
#define ORBIT_DECL_test_BaseServer 1
#define _test_BaseServer_defined 1
#define test_BaseServer__free CORBA_Object__free
   typedef CORBA_Object test_BaseServer;
   extern CORBA_unsigned_long test_BaseServer__classid;
#if !defined(TC_IMPL_TC_test_BaseServer_0)
#define TC_IMPL_TC_test_BaseServer_0 'e'
#define TC_IMPL_TC_test_BaseServer_1 'v'
#define TC_IMPL_TC_test_BaseServer_2 'e'
#define TC_IMPL_TC_test_BaseServer_3 'r'
#define TC_IMPL_TC_test_BaseServer_4 'y'
#define TC_IMPL_TC_test_BaseServer_5 't'
#define TC_IMPL_TC_test_BaseServer_6 'h'
#define TC_IMPL_TC_test_BaseServer_7 'i'
#define TC_IMPL_TC_test_BaseServer_8 'n'
#define TC_IMPL_TC_test_BaseServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BaseServer_struct;
#define TC_test_BaseServer ((CORBA_TypeCode)&TC_test_BaseServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_B1) && !defined(_test_B1_defined)
#define ORBIT_DECL_test_B1 1
#define _test_B1_defined 1
#define test_B1__free CORBA_Object__free
   typedef CORBA_Object test_B1;
   extern CORBA_unsigned_long test_B1__classid;
#if !defined(TC_IMPL_TC_test_B1_0)
#define TC_IMPL_TC_test_B1_0 'e'
#define TC_IMPL_TC_test_B1_1 'v'
#define TC_IMPL_TC_test_B1_2 'e'
#define TC_IMPL_TC_test_B1_3 'r'
#define TC_IMPL_TC_test_B1_4 'y'
#define TC_IMPL_TC_test_B1_5 't'
#define TC_IMPL_TC_test_B1_6 'h'
#define TC_IMPL_TC_test_B1_7 'i'
#define TC_IMPL_TC_test_B1_8 'n'
#define TC_IMPL_TC_test_B1_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_B1_struct;
#define TC_test_B1 ((CORBA_TypeCode)&TC_test_B1_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_B2) && !defined(_test_B2_defined)
#define ORBIT_DECL_test_B2 1
#define _test_B2_defined 1
#define test_B2__free CORBA_Object__free
   typedef CORBA_Object test_B2;
   extern CORBA_unsigned_long test_B2__classid;
#if !defined(TC_IMPL_TC_test_B2_0)
#define TC_IMPL_TC_test_B2_0 'e'
#define TC_IMPL_TC_test_B2_1 'v'
#define TC_IMPL_TC_test_B2_2 'e'
#define TC_IMPL_TC_test_B2_3 'r'
#define TC_IMPL_TC_test_B2_4 'y'
#define TC_IMPL_TC_test_B2_5 't'
#define TC_IMPL_TC_test_B2_6 'h'
#define TC_IMPL_TC_test_B2_7 'i'
#define TC_IMPL_TC_test_B2_8 'n'
#define TC_IMPL_TC_test_B2_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_B2_struct;
#define TC_test_B2 ((CORBA_TypeCode)&TC_test_B2_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_C1) && !defined(_test_C1_defined)
#define ORBIT_DECL_test_C1 1
#define _test_C1_defined 1
#define test_C1__free CORBA_Object__free
   typedef CORBA_Object test_C1;
   extern CORBA_unsigned_long test_C1__classid;
#if !defined(TC_IMPL_TC_test_C1_0)
#define TC_IMPL_TC_test_C1_0 'e'
#define TC_IMPL_TC_test_C1_1 'v'
#define TC_IMPL_TC_test_C1_2 'e'
#define TC_IMPL_TC_test_C1_3 'r'
#define TC_IMPL_TC_test_C1_4 'y'
#define TC_IMPL_TC_test_C1_5 't'
#define TC_IMPL_TC_test_C1_6 'h'
#define TC_IMPL_TC_test_C1_7 'i'
#define TC_IMPL_TC_test_C1_8 'n'
#define TC_IMPL_TC_test_C1_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_C1_struct;
#define TC_test_C1 ((CORBA_TypeCode)&TC_test_C1_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_DerivedServer) && !defined(_test_DerivedServer_defined)
#define ORBIT_DECL_test_DerivedServer 1
#define _test_DerivedServer_defined 1
#define test_DerivedServer__free CORBA_Object__free
   typedef CORBA_Object test_DerivedServer;
   extern CORBA_unsigned_long test_DerivedServer__classid;
#if !defined(TC_IMPL_TC_test_DerivedServer_0)
#define TC_IMPL_TC_test_DerivedServer_0 'e'
#define TC_IMPL_TC_test_DerivedServer_1 'v'
#define TC_IMPL_TC_test_DerivedServer_2 'e'
#define TC_IMPL_TC_test_DerivedServer_3 'r'
#define TC_IMPL_TC_test_DerivedServer_4 'y'
#define TC_IMPL_TC_test_DerivedServer_5 't'
#define TC_IMPL_TC_test_DerivedServer_6 'h'
#define TC_IMPL_TC_test_DerivedServer_7 'i'
#define TC_IMPL_TC_test_DerivedServer_8 'n'
#define TC_IMPL_TC_test_DerivedServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_DerivedServer_struct;
#define TC_test_DerivedServer ((CORBA_TypeCode)&TC_test_DerivedServer_struct)
#endif
#endif
#if !defined(_test_FixedLengthUnion_defined)
#define _test_FixedLengthUnion_defined 1
   typedef struct
   {
      CORBA_char _d;
      union
      {
	 CORBA_long x;
	 CORBA_char y;
	 CORBA_boolean z;
	 test_FixedLengthStruct v;
      }
      _u;
   }
   test_FixedLengthUnion;
#if !defined(TC_IMPL_TC_test_FixedLengthUnion_0)
#define TC_IMPL_TC_test_FixedLengthUnion_0 'e'
#define TC_IMPL_TC_test_FixedLengthUnion_1 'v'
#define TC_IMPL_TC_test_FixedLengthUnion_2 'e'
#define TC_IMPL_TC_test_FixedLengthUnion_3 'r'
#define TC_IMPL_TC_test_FixedLengthUnion_4 'y'
#define TC_IMPL_TC_test_FixedLengthUnion_5 't'
#define TC_IMPL_TC_test_FixedLengthUnion_6 'h'
#define TC_IMPL_TC_test_FixedLengthUnion_7 'i'
#define TC_IMPL_TC_test_FixedLengthUnion_8 'n'
#define TC_IMPL_TC_test_FixedLengthUnion_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_FixedLengthUnion_struct;
#define TC_test_FixedLengthUnion ((CORBA_TypeCode)&TC_test_FixedLengthUnion_struct)
#endif
   extern test_FixedLengthUnion *test_FixedLengthUnion__alloc(void);
   extern gpointer test_FixedLengthUnion__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_VariableLengthUnion_defined)
#define _test_VariableLengthUnion_defined 1
   typedef struct
   {
      CORBA_long _d;
      union
      {
	 CORBA_long x;
	 CORBA_long w;
	 CORBA_char *y;
	 CORBA_boolean z;
	 test_VariableLengthStruct a;
	 test_StrSeq b;
	 test_FixedLengthUnion c;
	 test_StrArray d;
      }
      _u;
   }
   test_VariableLengthUnion;
#if !defined(TC_IMPL_TC_test_VariableLengthUnion_0)
#define TC_IMPL_TC_test_VariableLengthUnion_0 'e'
#define TC_IMPL_TC_test_VariableLengthUnion_1 'v'
#define TC_IMPL_TC_test_VariableLengthUnion_2 'e'
#define TC_IMPL_TC_test_VariableLengthUnion_3 'r'
#define TC_IMPL_TC_test_VariableLengthUnion_4 'y'
#define TC_IMPL_TC_test_VariableLengthUnion_5 't'
#define TC_IMPL_TC_test_VariableLengthUnion_6 'h'
#define TC_IMPL_TC_test_VariableLengthUnion_7 'i'
#define TC_IMPL_TC_test_VariableLengthUnion_8 'n'
#define TC_IMPL_TC_test_VariableLengthUnion_9 'g'
   extern const struct CORBA_TypeCode_struct
      TC_test_VariableLengthUnion_struct;
#define TC_test_VariableLengthUnion ((CORBA_TypeCode)&TC_test_VariableLengthUnion_struct)
#endif
   extern test_VariableLengthUnion *test_VariableLengthUnion__alloc(void);
   extern gpointer test_VariableLengthUnion__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_EnumUnion_defined)
#define _test_EnumUnion_defined 1
   typedef struct
   {
      test_Colour _d;
      union
      {
	 CORBA_long x;
	 CORBA_boolean y;
      }
      _u;
   }
   test_EnumUnion;
#if !defined(TC_IMPL_TC_test_EnumUnion_0)
#define TC_IMPL_TC_test_EnumUnion_0 'e'
#define TC_IMPL_TC_test_EnumUnion_1 'v'
#define TC_IMPL_TC_test_EnumUnion_2 'e'
#define TC_IMPL_TC_test_EnumUnion_3 'r'
#define TC_IMPL_TC_test_EnumUnion_4 'y'
#define TC_IMPL_TC_test_EnumUnion_5 't'
#define TC_IMPL_TC_test_EnumUnion_6 'h'
#define TC_IMPL_TC_test_EnumUnion_7 'i'
#define TC_IMPL_TC_test_EnumUnion_8 'n'
#define TC_IMPL_TC_test_EnumUnion_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_EnumUnion_struct;
#define TC_test_EnumUnion ((CORBA_TypeCode)&TC_test_EnumUnion_struct)
#endif
   extern test_EnumUnion *test_EnumUnion__alloc(void);
   extern gpointer test_EnumUnion__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_BooleanUnion_defined)
#define _test_BooleanUnion_defined 1
   typedef struct
   {
      CORBA_boolean _d;
      union
      {
	 test_VariableLengthStruct x;
	 CORBA_char *y;
      }
      _u;
   }
   test_BooleanUnion;
#if !defined(TC_IMPL_TC_test_BooleanUnion_0)
#define TC_IMPL_TC_test_BooleanUnion_0 'e'
#define TC_IMPL_TC_test_BooleanUnion_1 'v'
#define TC_IMPL_TC_test_BooleanUnion_2 'e'
#define TC_IMPL_TC_test_BooleanUnion_3 'r'
#define TC_IMPL_TC_test_BooleanUnion_4 'y'
#define TC_IMPL_TC_test_BooleanUnion_5 't'
#define TC_IMPL_TC_test_BooleanUnion_6 'h'
#define TC_IMPL_TC_test_BooleanUnion_7 'i'
#define TC_IMPL_TC_test_BooleanUnion_8 'n'
#define TC_IMPL_TC_test_BooleanUnion_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_BooleanUnion_struct;
#define TC_test_BooleanUnion ((CORBA_TypeCode)&TC_test_BooleanUnion_struct)
#endif
   extern test_BooleanUnion *test_BooleanUnion__alloc(void);
   extern gpointer test_BooleanUnion__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_StrArray2_defined)
#define _test_StrArray2_defined 1
   typedef CORBA_char *test_StrArray2[20];
   typedef CORBA_char *test_StrArray2_slice;
#if !defined(TC_IMPL_TC_test_StrArray2_0)
#define TC_IMPL_TC_test_StrArray2_0 'e'
#define TC_IMPL_TC_test_StrArray2_1 'v'
#define TC_IMPL_TC_test_StrArray2_2 'e'
#define TC_IMPL_TC_test_StrArray2_3 'r'
#define TC_IMPL_TC_test_StrArray2_4 'y'
#define TC_IMPL_TC_test_StrArray2_5 't'
#define TC_IMPL_TC_test_StrArray2_6 'h'
#define TC_IMPL_TC_test_StrArray2_7 'i'
#define TC_IMPL_TC_test_StrArray2_8 'n'
#define TC_IMPL_TC_test_StrArray2_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_StrArray2_struct;
#define TC_test_StrArray2 ((CORBA_TypeCode)&TC_test_StrArray2_struct)
#endif
   extern test_StrArray2_slice *test_StrArray2__alloc(void);
   extern gpointer test_StrArray2__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_test_ArrayUnion_defined)
#define _test_ArrayUnion_defined 1
   typedef struct
   {
      CORBA_boolean _d;
      union
      {
	 test_StrArray2 d;
      }
      _u;
   }
   test_ArrayUnion;
#if !defined(TC_IMPL_TC_test_ArrayUnion_0)
#define TC_IMPL_TC_test_ArrayUnion_0 'e'
#define TC_IMPL_TC_test_ArrayUnion_1 'v'
#define TC_IMPL_TC_test_ArrayUnion_2 'e'
#define TC_IMPL_TC_test_ArrayUnion_3 'r'
#define TC_IMPL_TC_test_ArrayUnion_4 'y'
#define TC_IMPL_TC_test_ArrayUnion_5 't'
#define TC_IMPL_TC_test_ArrayUnion_6 'h'
#define TC_IMPL_TC_test_ArrayUnion_7 'i'
#define TC_IMPL_TC_test_ArrayUnion_8 'n'
#define TC_IMPL_TC_test_ArrayUnion_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_ArrayUnion_struct;
#define TC_test_ArrayUnion ((CORBA_TypeCode)&TC_test_ArrayUnion_struct)
#endif
   extern test_ArrayUnion *test_ArrayUnion__alloc(void);
   extern gpointer test_ArrayUnion__free(gpointer mem, gpointer dat, CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_test_UnionServer) && !defined(_test_UnionServer_defined)
#define ORBIT_DECL_test_UnionServer 1
#define _test_UnionServer_defined 1
#define test_UnionServer__free CORBA_Object__free
   typedef CORBA_Object test_UnionServer;
   extern CORBA_unsigned_long test_UnionServer__classid;
#if !defined(TC_IMPL_TC_test_UnionServer_0)
#define TC_IMPL_TC_test_UnionServer_0 'e'
#define TC_IMPL_TC_test_UnionServer_1 'v'
#define TC_IMPL_TC_test_UnionServer_2 'e'
#define TC_IMPL_TC_test_UnionServer_3 'r'
#define TC_IMPL_TC_test_UnionServer_4 'y'
#define TC_IMPL_TC_test_UnionServer_5 't'
#define TC_IMPL_TC_test_UnionServer_6 'h'
#define TC_IMPL_TC_test_UnionServer_7 'i'
#define TC_IMPL_TC_test_UnionServer_8 'n'
#define TC_IMPL_TC_test_UnionServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_UnionServer_struct;
#define TC_test_UnionServer ((CORBA_TypeCode)&TC_test_UnionServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_test_AnyServer) && !defined(_test_AnyServer_defined)
#define ORBIT_DECL_test_AnyServer 1
#define _test_AnyServer_defined 1
#define test_AnyServer__free CORBA_Object__free
   typedef CORBA_Object test_AnyServer;
   extern CORBA_unsigned_long test_AnyServer__classid;
#if !defined(TC_IMPL_TC_test_AnyServer_0)
#define TC_IMPL_TC_test_AnyServer_0 'e'
#define TC_IMPL_TC_test_AnyServer_1 'v'
#define TC_IMPL_TC_test_AnyServer_2 'e'
#define TC_IMPL_TC_test_AnyServer_3 'r'
#define TC_IMPL_TC_test_AnyServer_4 'y'
#define TC_IMPL_TC_test_AnyServer_5 't'
#define TC_IMPL_TC_test_AnyServer_6 'h'
#define TC_IMPL_TC_test_AnyServer_7 'i'
#define TC_IMPL_TC_test_AnyServer_8 'n'
#define TC_IMPL_TC_test_AnyServer_9 'g'
   extern const struct CORBA_TypeCode_struct TC_test_AnyServer_struct;
#define TC_test_AnyServer ((CORBA_TypeCode)&TC_test_AnyServer_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
       test_BasicServer(*getBasicServer) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
       test_StructServer(*getStructServer) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
       test_SequenceServer(*getSequenceServer) (PortableServer_Servant
						_servant,
						CORBA_Environment * ev);
       test_UnionServer(*getUnionServer) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
       test_ArrayServer(*getArrayServer) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
       test_AnyServer(*getAnyServer) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
       test_BaseServer(*getBaseServer) (PortableServer_Servant _servant,
					CORBA_Environment * ev);
       test_DerivedServer(*getDerivedServer) (PortableServer_Servant _servant,
					      CORBA_Environment * ev);
       test_BaseServer(*getDerivedServerAsBaseServer) (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev);
       test_B2(*getDerivedServerAsB2) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
       test_TransientObj(*createTransientObj) (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev);
   }
   POA_test_TestFactory__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_TestFactory__epv *test_TestFactory_epv;
   }
   POA_test_TestFactory__vepv;
   typedef struct
   {
      void *_private;
      POA_test_TestFactory__vepv *vepv;
   }
   POA_test_TestFactory;
   extern void POA_test_TestFactory__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_test_TestFactory__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*remove) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
   }
   POA_test_TransientObj__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_TransientObj__epv *test_TransientObj_epv;
   }
   POA_test_TransientObj__vepv;
   typedef struct
   {
      void *_private;
      POA_test_TransientObj__vepv *vepv;
   }
   POA_test_TransientObj;
   extern void POA_test_TransientObj__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_test_TransientObj__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
       test_FixedLengthStruct(*opFixed) (PortableServer_Servant _servant,
					 const test_FixedLengthStruct * inArg,
					 test_FixedLengthStruct * inoutArg,
					 test_FixedLengthStruct * outArg,
					 CORBA_Environment * ev);
      test_VariableLengthStruct *(*opVariable) (PortableServer_Servant
						_servant,
						const
						test_VariableLengthStruct *
						inArg,
						test_VariableLengthStruct *
						inoutArg,
						test_VariableLengthStruct **
						outArg,
						CORBA_Environment * ev);
      test_CompoundStruct *(*opCompound) (PortableServer_Servant _servant,
					  const test_CompoundStruct * inArg,
					  test_CompoundStruct * inoutArg,
					  test_CompoundStruct ** outArg,
					  CORBA_Environment * ev);
   }
   POA_test_StructServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_StructServer__epv *test_StructServer_epv;
   }
   POA_test_StructServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_StructServer__vepv *vepv;
   }
   POA_test_StructServer;
   extern void POA_test_StructServer__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_test_StructServer__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      test_StrSeq *(*opStrSeq) (PortableServer_Servant _servant,
				const test_StrSeq * inArg,
				test_StrSeq * inoutArg, test_StrSeq ** outArg,
				CORBA_Environment * ev);
      test_BoundedStructSeq *(*opBoundedStructSeq) (PortableServer_Servant
						    _servant,
						    const
						    test_BoundedStructSeq *
						    inArg,
						    test_BoundedStructSeq *
						    inoutArg,
						    test_BoundedStructSeq **
						    outArg,
						    CORBA_Environment * ev);
   }
   POA_test_SequenceServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_SequenceServer__epv *test_SequenceServer_epv;
   }
   POA_test_SequenceServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_SequenceServer__vepv *vepv;
   }
   POA_test_SequenceServer;
   extern void POA_test_SequenceServer__init(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   extern void POA_test_SequenceServer__fini(PortableServer_Servant servant,
					     CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      test_LongArray_slice *(*opLongArray) (PortableServer_Servant _servant,
					    const test_LongArray inArg,
					    test_LongArray inoutArg,
					    test_LongArray outArg,
					    CORBA_Environment * ev);
      test_StrArray_slice *(*opStrArray) (PortableServer_Servant _servant,
					  const test_StrArray inArg,
					  test_StrArray inoutArg,
					  test_StrArray_slice ** outArg,
					  CORBA_Environment * ev);
   }
   POA_test_ArrayServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_ArrayServer__epv *test_ArrayServer_epv;
   }
   POA_test_ArrayServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_ArrayServer__vepv *vepv;
   }
   POA_test_ArrayServer;
   extern void POA_test_ArrayServer__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_test_ArrayServer__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_char *(*_get_foo) (PortableServer_Servant _servant,
			       CORBA_Environment * ev);
      void (*_set_foo) (PortableServer_Servant _servant,
			const CORBA_char * value, CORBA_Environment * ev);
       CORBA_long(*_get_bah) (PortableServer_Servant _servant,
			      CORBA_Environment * ev);
      CORBA_char *(*opString) (PortableServer_Servant _servant,
			       const CORBA_char * inArg,
			       CORBA_char ** inoutArg, CORBA_char ** outArg,
			       CORBA_Environment * ev);
       CORBA_long(*opLong) (PortableServer_Servant _servant,
			    const CORBA_long inArg, CORBA_long * inoutArg,
			    CORBA_long * outArg, CORBA_Environment * ev);
       test_AnEnum(*opEnum) (PortableServer_Servant _servant,
			     const test_AnEnum inArg, test_AnEnum * inoutArg,
			     test_AnEnum * outArg, CORBA_Environment * ev);
      void (*opException) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
   }
   POA_test_BasicServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BasicServer__epv *test_BasicServer_epv;
   }
   POA_test_BasicServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_BasicServer__vepv *vepv;
   }
   POA_test_BasicServer;
   extern void POA_test_BasicServer__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_test_BasicServer__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
       CORBA_long(*opPolymorphic) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
      CORBA_char *(*_get_attribPolymorphic) (PortableServer_Servant _servant,
					     CORBA_Environment * ev);
      void (*_set_attribPolymorphic) (PortableServer_Servant _servant,
				      const CORBA_char * value,
				      CORBA_Environment * ev);
   }
   POA_test_BaseServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BaseServer__epv *test_BaseServer_epv;
   }
   POA_test_BaseServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_BaseServer__vepv *vepv;
   }
   POA_test_BaseServer;
   extern void POA_test_BaseServer__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_test_BaseServer__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
   }
   POA_test_B1__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BaseServer__epv *test_BaseServer_epv;
      POA_test_B1__epv *test_B1_epv;
   }
   POA_test_B1__vepv;
   typedef struct
   {
      void *_private;
      POA_test_B1__vepv *vepv;
   }
   POA_test_B1;
   extern void POA_test_B1__init(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   extern void POA_test_B1__fini(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
   }
   POA_test_B2__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BaseServer__epv *test_BaseServer_epv;
      POA_test_B2__epv *test_B2_epv;
   }
   POA_test_B2__vepv;
   typedef struct
   {
      void *_private;
      POA_test_B2__vepv *vepv;
   }
   POA_test_B2;
   extern void POA_test_B2__init(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   extern void POA_test_B2__fini(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
   }
   POA_test_C1__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BaseServer__epv *test_BaseServer_epv;
      POA_test_B1__epv *test_B1_epv;
      POA_test_B2__epv *test_B2_epv;
      POA_test_C1__epv *test_C1_epv;
   }
   POA_test_C1__vepv;
   typedef struct
   {
      void *_private;
      POA_test_C1__vepv *vepv;
   }
   POA_test_C1;
   extern void POA_test_C1__init(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   extern void POA_test_C1__fini(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
   }
   POA_test_DerivedServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_BaseServer__epv *test_BaseServer_epv;
      POA_test_B1__epv *test_B1_epv;
      POA_test_B2__epv *test_B2_epv;
      POA_test_C1__epv *test_C1_epv;
      POA_test_DerivedServer__epv *test_DerivedServer_epv;
   }
   POA_test_DerivedServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_DerivedServer__vepv *vepv;
   }
   POA_test_DerivedServer;
   extern void POA_test_DerivedServer__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_test_DerivedServer__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
       test_FixedLengthUnion(*opFixed) (PortableServer_Servant _servant,
					const test_FixedLengthUnion * inArg,
					test_FixedLengthUnion * inoutArg,
					test_FixedLengthUnion * outArg,
					CORBA_Environment * ev);
      test_VariableLengthUnion *(*opVariable) (PortableServer_Servant
					       _servant,
					       const test_VariableLengthUnion
					       * inArg,
					       test_VariableLengthUnion *
					       inoutArg,
					       test_VariableLengthUnion **
					       outArg,
					       CORBA_Environment * ev);
   }
   POA_test_UnionServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_UnionServer__epv *test_UnionServer_epv;
   }
   POA_test_UnionServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_UnionServer__vepv *vepv;
   }
   POA_test_UnionServer;
   extern void POA_test_UnionServer__init(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   extern void POA_test_UnionServer__fini(PortableServer_Servant servant,
					  CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      CORBA_any *(*opAnyStrSeq) (PortableServer_Servant _servant,
				 CORBA_Environment * ev);
      CORBA_any *(*opAnyLong) (PortableServer_Servant _servant,
			       const CORBA_any * inArg, CORBA_any * inoutArg,
			       CORBA_any ** outArg, CORBA_Environment * ev);
      CORBA_any *(*opAnyString) (PortableServer_Servant _servant,
				 const CORBA_any * inArg,
				 CORBA_any * inoutArg, CORBA_any ** outArg,
				 CORBA_Environment * ev);
      CORBA_any *(*opAnyStruct) (PortableServer_Servant _servant,
				 const CORBA_any * inArg,
				 CORBA_any * inoutArg, CORBA_any ** outArg,
				 CORBA_Environment * ev);
       CORBA_TypeCode(*opTypeCode) (PortableServer_Servant _servant,
				    const CORBA_TypeCode inArg,
				    CORBA_TypeCode * inoutArg,
				    CORBA_TypeCode * outArg,
				    CORBA_Environment * ev);
   }
   POA_test_AnyServer__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_test_AnyServer__epv *test_AnyServer_epv;
   }
   POA_test_AnyServer__vepv;
   typedef struct
   {
      void *_private;
      POA_test_AnyServer__vepv *vepv;
   }
   POA_test_AnyServer;
   extern void POA_test_AnyServer__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_test_AnyServer__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);

/** prototypes **/
   test_BasicServer test_TestFactory_getBasicServer(test_TestFactory _obj,
						    CORBA_Environment * ev);
   test_StructServer test_TestFactory_getStructServer(test_TestFactory _obj,
						      CORBA_Environment * ev);
   test_SequenceServer test_TestFactory_getSequenceServer(test_TestFactory
							  _obj,
							  CORBA_Environment *
							  ev);
   test_UnionServer test_TestFactory_getUnionServer(test_TestFactory _obj,
						    CORBA_Environment * ev);
   test_ArrayServer test_TestFactory_getArrayServer(test_TestFactory _obj,
						    CORBA_Environment * ev);
   test_AnyServer test_TestFactory_getAnyServer(test_TestFactory _obj,
						CORBA_Environment * ev);
   test_BaseServer test_TestFactory_getBaseServer(test_TestFactory _obj,
						  CORBA_Environment * ev);
   test_DerivedServer test_TestFactory_getDerivedServer(test_TestFactory _obj,
							CORBA_Environment *
							ev);
   test_BaseServer
      test_TestFactory_getDerivedServerAsBaseServer(test_TestFactory _obj,
						    CORBA_Environment * ev);
   test_B2 test_TestFactory_getDerivedServerAsB2(test_TestFactory _obj,
						 CORBA_Environment * ev);
   test_TransientObj test_TestFactory_createTransientObj(test_TestFactory
							 _obj,
							 CORBA_Environment *
							 ev);
   void test_TransientObj_remove(test_TransientObj _obj,
				 CORBA_Environment * ev);
   test_FixedLengthStruct test_StructServer_opFixed(test_StructServer _obj,
						    const
						    test_FixedLengthStruct *
						    inArg,
						    test_FixedLengthStruct *
						    inoutArg,
						    test_FixedLengthStruct *
						    outArg,
						    CORBA_Environment * ev);
   test_VariableLengthStruct *test_StructServer_opVariable(test_StructServer
							   _obj,
							   const
							   test_VariableLengthStruct
							   * inArg,
							   test_VariableLengthStruct
							   * inoutArg,
							   test_VariableLengthStruct
							   ** outArg,
							   CORBA_Environment *
							   ev);
   test_CompoundStruct *test_StructServer_opCompound(test_StructServer _obj,
						     const test_CompoundStruct
						     * inArg,
						     test_CompoundStruct *
						     inoutArg,
						     test_CompoundStruct **
						     outArg,
						     CORBA_Environment * ev);
   test_StrSeq *test_SequenceServer_opStrSeq(test_SequenceServer _obj,
					     const test_StrSeq * inArg,
					     test_StrSeq * inoutArg,
					     test_StrSeq ** outArg,
					     CORBA_Environment * ev);
   test_BoundedStructSeq
      *test_SequenceServer_opBoundedStructSeq(test_SequenceServer _obj,
					      const test_BoundedStructSeq *
					      inArg,
					      test_BoundedStructSeq *
					      inoutArg,
					      test_BoundedStructSeq ** outArg,
					      CORBA_Environment * ev);
   test_LongArray_slice *test_ArrayServer_opLongArray(test_ArrayServer _obj,
						      const test_LongArray
						      inArg,
						      test_LongArray inoutArg,
						      test_LongArray outArg,
						      CORBA_Environment * ev);
   test_StrArray_slice *test_ArrayServer_opStrArray(test_ArrayServer _obj,
						    const test_StrArray inArg,
						    test_StrArray inoutArg,
						    test_StrArray_slice **
						    outArg,
						    CORBA_Environment * ev);
   CORBA_char *test_BasicServer__get_foo(test_BasicServer _obj,
					 CORBA_Environment * ev);
   void test_BasicServer__set_foo(test_BasicServer _obj,
				  const CORBA_char * value,
				  CORBA_Environment * ev);
   CORBA_long test_BasicServer__get_bah(test_BasicServer _obj,
					CORBA_Environment * ev);
   CORBA_char *test_BasicServer_opString(test_BasicServer _obj,
					 const CORBA_char * inArg,
					 CORBA_char ** inoutArg,
					 CORBA_char ** outArg,
					 CORBA_Environment * ev);
   CORBA_long test_BasicServer_opLong(test_BasicServer _obj,
				      const CORBA_long inArg,
				      CORBA_long * inoutArg,
				      CORBA_long * outArg,
				      CORBA_Environment * ev);
   test_AnEnum test_BasicServer_opEnum(test_BasicServer _obj,
				       const test_AnEnum inArg,
				       test_AnEnum * inoutArg,
				       test_AnEnum * outArg,
				       CORBA_Environment * ev);
   void test_BasicServer_opException(test_BasicServer _obj,
				     CORBA_Environment * ev);
   CORBA_long test_BaseServer_opPolymorphic(test_BaseServer _obj,
					    CORBA_Environment * ev);
   CORBA_char *test_BaseServer__get_attribPolymorphic(test_BaseServer _obj,
						      CORBA_Environment * ev);
   void test_BaseServer__set_attribPolymorphic(test_BaseServer _obj,
					       const CORBA_char * value,
					       CORBA_Environment * ev);
#define test_B1_opPolymorphic test_BaseServer_opPolymorphic
#define test_B1__get_attribPolymorphic test_BaseServer__get_attribPolymorphic
#define test_B1__set_attribPolymorphic test_BaseServer__set_attribPolymorphic
#define test_B2_opPolymorphic test_BaseServer_opPolymorphic
#define test_B2__get_attribPolymorphic test_BaseServer__get_attribPolymorphic
#define test_B2__set_attribPolymorphic test_BaseServer__set_attribPolymorphic
#define test_C1_opPolymorphic test_BaseServer_opPolymorphic
#define test_C1__get_attribPolymorphic test_BaseServer__get_attribPolymorphic
#define test_C1__set_attribPolymorphic test_BaseServer__set_attribPolymorphic
#define test_DerivedServer_opPolymorphic test_BaseServer_opPolymorphic
#define test_DerivedServer__get_attribPolymorphic test_BaseServer__get_attribPolymorphic
#define test_DerivedServer__set_attribPolymorphic test_BaseServer__set_attribPolymorphic
   test_FixedLengthUnion test_UnionServer_opFixed(test_UnionServer _obj,
						  const test_FixedLengthUnion
						  * inArg,
						  test_FixedLengthUnion *
						  inoutArg,
						  test_FixedLengthUnion *
						  outArg,
						  CORBA_Environment * ev);
   test_VariableLengthUnion *test_UnionServer_opVariable(test_UnionServer
							 _obj,
							 const
							 test_VariableLengthUnion
							 * inArg,
							 test_VariableLengthUnion
							 * inoutArg,
							 test_VariableLengthUnion
							 ** outArg,
							 CORBA_Environment *
							 ev);
   CORBA_any *test_AnyServer_opAnyStrSeq(test_AnyServer _obj,
					 CORBA_Environment * ev);
   CORBA_any *test_AnyServer_opAnyLong(test_AnyServer _obj,
				       const CORBA_any * inArg,
				       CORBA_any * inoutArg,
				       CORBA_any ** outArg,
				       CORBA_Environment * ev);
   CORBA_any *test_AnyServer_opAnyString(test_AnyServer _obj,
					 const CORBA_any * inArg,
					 CORBA_any * inoutArg,
					 CORBA_any ** outArg,
					 CORBA_Environment * ev);
   CORBA_any *test_AnyServer_opAnyStruct(test_AnyServer _obj,
					 const CORBA_any * inArg,
					 CORBA_any * inoutArg,
					 CORBA_any ** outArg,
					 CORBA_Environment * ev);
   CORBA_TypeCode test_AnyServer_opTypeCode(test_AnyServer _obj,
					    const CORBA_TypeCode inArg,
					    CORBA_TypeCode * inoutArg,
					    CORBA_TypeCode * outArg,
					    CORBA_Environment * ev);

   void _ORBIT_skel_test_TestFactory_getBasicServer(POA_test_TestFactory *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    test_BasicServer
						    (*_impl_getBasicServer)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getStructServer(POA_test_TestFactory *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     test_StructServer
						     (*_impl_getStructServer)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_test_TestFactory_getSequenceServer(POA_test_TestFactory *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       test_SequenceServer
						       (*_impl_getSequenceServer)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_test_TestFactory_getUnionServer(POA_test_TestFactory *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    test_UnionServer
						    (*_impl_getUnionServer)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getArrayServer(POA_test_TestFactory *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    test_ArrayServer
						    (*_impl_getArrayServer)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getAnyServer(POA_test_TestFactory *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  test_AnyServer
						  (*_impl_getAnyServer)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getBaseServer(POA_test_TestFactory *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   test_BaseServer
						   (*_impl_getBaseServer)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getDerivedServer(POA_test_TestFactory *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      test_DerivedServer
						      (*_impl_getDerivedServer)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void
      _ORBIT_skel_test_TestFactory_getDerivedServerAsBaseServer
      (POA_test_TestFactory * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       test_BaseServer(*_impl_getDerivedServerAsBaseServer)
       (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_test_TestFactory_getDerivedServerAsB2(POA_test_TestFactory
							  * _ORBIT_servant,
							  GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev,
							  test_B2
							  (*_impl_getDerivedServerAsB2)
							  (PortableServer_Servant
							   _servant,
							   CORBA_Environment *
							   ev));
   void _ORBIT_skel_test_TestFactory_createTransientObj(POA_test_TestFactory *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							test_TransientObj
							(*_impl_createTransientObj)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_test_TransientObj_remove(POA_test_TransientObj *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_remove)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_test_StructServer_opFixed(POA_test_StructServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      test_FixedLengthStruct
					      (*_impl_opFixed)
					      (PortableServer_Servant
					       _servant,
					       const test_FixedLengthStruct *
					       inArg,
					       test_FixedLengthStruct *
					       inoutArg,
					       test_FixedLengthStruct *
					       outArg,
					       CORBA_Environment * ev));
   void _ORBIT_skel_test_StructServer_opVariable(POA_test_StructServer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 test_VariableLengthStruct *
						 (*_impl_opVariable)
						 (PortableServer_Servant
						  _servant,
						  const
						  test_VariableLengthStruct *
						  inArg,
						  test_VariableLengthStruct *
						  inoutArg,
						  test_VariableLengthStruct **
						  outArg,
						  CORBA_Environment * ev));
   void _ORBIT_skel_test_StructServer_opCompound(POA_test_StructServer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 test_CompoundStruct *
						 (*_impl_opCompound)
						 (PortableServer_Servant
						  _servant,
						  const test_CompoundStruct *
						  inArg,
						  test_CompoundStruct *
						  inoutArg,
						  test_CompoundStruct **
						  outArg,
						  CORBA_Environment * ev));
   void _ORBIT_skel_test_SequenceServer_opStrSeq(POA_test_SequenceServer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 test_StrSeq *
						 (*_impl_opStrSeq)
						 (PortableServer_Servant
						  _servant,
						  const test_StrSeq * inArg,
						  test_StrSeq * inoutArg,
						  test_StrSeq ** outArg,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_test_SequenceServer_opBoundedStructSeq
      (POA_test_SequenceServer * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       test_BoundedStructSeq *
       (*_impl_opBoundedStructSeq) (PortableServer_Servant _servant,
				    const test_BoundedStructSeq * inArg,
				    test_BoundedStructSeq * inoutArg,
				    test_BoundedStructSeq ** outArg,
				    CORBA_Environment * ev));
   void _ORBIT_skel_test_ArrayServer_opLongArray(POA_test_ArrayServer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 test_LongArray_slice *
						 (*_impl_opLongArray)
						 (PortableServer_Servant
						  _servant,
						  const test_LongArray inArg,
						  test_LongArray inoutArg,
						  test_LongArray outArg,
						  CORBA_Environment * ev));
   void _ORBIT_skel_test_ArrayServer_opStrArray(POA_test_ArrayServer *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						test_StrArray_slice *
						(*_impl_opStrArray)
						(PortableServer_Servant
						 _servant,
						 const test_StrArray inArg,
						 test_StrArray inoutArg,
						 test_StrArray_slice **
						 outArg,
						 CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer__get_foo(POA_test_BasicServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_char *
					      (*_impl__get_foo)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer__set_foo(POA_test_BasicServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl__set_foo)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * value,
					       CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer__get_bah(POA_test_BasicServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_long(*_impl__get_bah)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer_opString(POA_test_BasicServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_char *
					      (*_impl_opString)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * inArg,
					       CORBA_char ** inoutArg,
					       CORBA_char ** outArg,
					       CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer_opLong(POA_test_BasicServer *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    CORBA_long(*_impl_opLong)
					    (PortableServer_Servant _servant,
					     const CORBA_long inArg,
					     CORBA_long * inoutArg,
					     CORBA_long * outArg,
					     CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer_opEnum(POA_test_BasicServer *
					    _ORBIT_servant,
					    GIOPRecvBuffer *
					    _ORBIT_recv_buffer,
					    CORBA_Environment * ev,
					    test_AnEnum(*_impl_opEnum)
					    (PortableServer_Servant _servant,
					     const test_AnEnum inArg,
					     test_AnEnum * inoutArg,
					     test_AnEnum * outArg,
					     CORBA_Environment * ev));
   void _ORBIT_skel_test_BasicServer_opException(POA_test_BasicServer *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_opException)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_test_BaseServer_opPolymorphic(POA_test_BaseServer *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_long
						  (*_impl_opPolymorphic)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_test_BaseServer__get_attribPolymorphic(POA_test_BaseServer
							   * _ORBIT_servant,
							   GIOPRecvBuffer *
							   _ORBIT_recv_buffer,
							   CORBA_Environment *
							   ev,
							   CORBA_char *
							   (*_impl__get_attribPolymorphic)
							   (PortableServer_Servant
							    _servant,
							    CORBA_Environment
							    * ev));
   void _ORBIT_skel_test_BaseServer__set_attribPolymorphic(POA_test_BaseServer
							   * _ORBIT_servant,
							   GIOPRecvBuffer *
							   _ORBIT_recv_buffer,
							   CORBA_Environment *
							   ev,
							   void
							   (*_impl__set_attribPolymorphic)
							   (PortableServer_Servant
							    _servant,
							    const CORBA_char *
							    value,
							    CORBA_Environment
							    * ev));
   void _ORBIT_skel_test_UnionServer_opFixed(POA_test_UnionServer *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     test_FixedLengthUnion
					     (*_impl_opFixed)
					     (PortableServer_Servant _servant,
					      const test_FixedLengthUnion *
					      inArg,
					      test_FixedLengthUnion *
					      inoutArg,
					      test_FixedLengthUnion * outArg,
					      CORBA_Environment * ev));
   void _ORBIT_skel_test_UnionServer_opVariable(POA_test_UnionServer *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						test_VariableLengthUnion *
						(*_impl_opVariable)
						(PortableServer_Servant
						 _servant,
						 const
						 test_VariableLengthUnion *
						 inArg,
						 test_VariableLengthUnion *
						 inoutArg,
						 test_VariableLengthUnion **
						 outArg,
						 CORBA_Environment * ev));
   void _ORBIT_skel_test_AnyServer_opAnyStrSeq(POA_test_AnyServer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_any *
					       (*_impl_opAnyStrSeq)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_test_AnyServer_opAnyLong(POA_test_AnyServer *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_any *
					     (*_impl_opAnyLong)
					     (PortableServer_Servant _servant,
					      const CORBA_any * inArg,
					      CORBA_any * inoutArg,
					      CORBA_any ** outArg,
					      CORBA_Environment * ev));
   void _ORBIT_skel_test_AnyServer_opAnyString(POA_test_AnyServer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_any *
					       (*_impl_opAnyString)
					       (PortableServer_Servant
						_servant,
						const CORBA_any * inArg,
						CORBA_any * inoutArg,
						CORBA_any ** outArg,
						CORBA_Environment * ev));
   void _ORBIT_skel_test_AnyServer_opAnyStruct(POA_test_AnyServer *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       CORBA_any *
					       (*_impl_opAnyStruct)
					       (PortableServer_Servant
						_servant,
						const CORBA_any * inArg,
						CORBA_any * inoutArg,
						CORBA_any ** outArg,
						CORBA_Environment * ev));
   void _ORBIT_skel_test_AnyServer_opTypeCode(POA_test_AnyServer *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_TypeCode
					      (*_impl_opTypeCode)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_TypeCode inArg,
					       CORBA_TypeCode * inoutArg,
					       CORBA_TypeCode * outArg,
					       CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
