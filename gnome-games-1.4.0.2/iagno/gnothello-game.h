/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef gnothello_game_H
#define gnothello_game_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_Gnothello) && !defined(_Gnothello_defined)
#define ORBIT_DECL_Gnothello 1
#define _Gnothello_defined 1
#define Gnothello__free CORBA_Object__free
   typedef CORBA_Object Gnothello;
   extern CORBA_unsigned_long Gnothello__classid;
#if !defined(TC_IMPL_TC_Gnothello_0)
#define TC_IMPL_TC_Gnothello_0 'g'
#define TC_IMPL_TC_Gnothello_1 'n'
#define TC_IMPL_TC_Gnothello_2 'o'
#define TC_IMPL_TC_Gnothello_3 't'
#define TC_IMPL_TC_Gnothello_4 'h'
#define TC_IMPL_TC_Gnothello_5 'e'
#define TC_IMPL_TC_Gnothello_6 'l'
#define TC_IMPL_TC_Gnothello_7 'l'
#define TC_IMPL_TC_Gnothello_8 'o'
#define TC_IMPL_TC_Gnothello_9 '_'
#define TC_IMPL_TC_Gnothello_10 'g'
#define TC_IMPL_TC_Gnothello_11 'a'
#define TC_IMPL_TC_Gnothello_12 'm'
#define TC_IMPL_TC_Gnothello_13 'e'
   extern const struct CORBA_TypeCode_struct TC_Gnothello_struct;
#define TC_Gnothello ((CORBA_TypeCode)&TC_Gnothello_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*set_peer) (PortableServer_Servant _servant,
			const CORBA_Object peer, CORBA_Environment * ev);
       CORBA_long(*move) (PortableServer_Servant _servant, const CORBA_long x,
			  const CORBA_long y, const CORBA_long me,
			  CORBA_Environment * ev);
      void (*new_game) (PortableServer_Servant _servant,
			CORBA_Environment * ev);
   }
   POA_Gnothello__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Gnothello__epv *Gnothello_epv;
   }
   POA_Gnothello__vepv;
   typedef struct
   {
      void *_private;
      POA_Gnothello__vepv *vepv;
   }
   POA_Gnothello;
   extern void POA_Gnothello__init(PortableServer_Servant servant,
				   CORBA_Environment * ev);
   extern void POA_Gnothello__fini(PortableServer_Servant servant,
				   CORBA_Environment * ev);

/** prototypes **/
   void Gnothello_set_peer(Gnothello _obj, const CORBA_Object peer,
			   CORBA_Environment * ev);
   CORBA_long Gnothello_move(Gnothello _obj, const CORBA_long x,
			     const CORBA_long y, const CORBA_long me,
			     CORBA_Environment * ev);
   void Gnothello_new_game(Gnothello _obj, CORBA_Environment * ev);

   void _ORBIT_skel_Gnothello_set_peer(POA_Gnothello * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_set_peer)
				       (PortableServer_Servant _servant,
					const CORBA_Object peer,
					CORBA_Environment * ev));
   void _ORBIT_skel_Gnothello_move(POA_Gnothello * _ORBIT_servant,
				   GIOPRecvBuffer * _ORBIT_recv_buffer,
				   CORBA_Environment * ev,
				   CORBA_long(*_impl_move)
				   (PortableServer_Servant _servant,
				    const CORBA_long x, const CORBA_long y,
				    const CORBA_long me,
				    CORBA_Environment * ev));
   void _ORBIT_skel_Gnothello_new_game(POA_Gnothello * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_new_game)
				       (PortableServer_Servant _servant,
					CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
