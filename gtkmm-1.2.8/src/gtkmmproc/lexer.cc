/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 89
#define YY_END_OF_BUFFER 90
static yyconst short int yy_acclist[937] =
    {   0,
       12,   12,   17,   17,    5,    5,   25,   25,   80,   80,
       90,   89,   84,   89,   83,   89,   89,   89,   89,   89,
       89,    9,   89,    1,   89,    1,   84,   89,    1,   89,
        1,   89,    1,   89,    1,   89,    1,   89,    1,   89,
        1,    9,   89,   12,   89,   13,   89,   11,   89,   17,
       89,   18,   89,   16,   89,    4,   89,    4,   89,    4,
       89,    5,   89,    6,   89,   20,   89,   20,   84,   89,
       20,   89,   20,   89,   20,   89,   20,   89,   20,   89,
       20,   89,    9,   20,   89,    1,   20,   89,    1,   20,
       84,   89,    1,   20,   89,    1,   20,   89,    1,   20,

       89,    1,   20,   89,    1,   20,   89,    1,   20,   89,
        1,   20,   89,    1,    9,   20,   89,   25,   89,   25,
       84,   89,   24,   83,   89,   25,   89,   25,   89,   25,
       89,   25,   89,   25,   89,    9,   25,   89,    1,   25,
       89,    1,   25,   84,   89,    1,   25,   89,    1,   25,
       89,    1,   25,   89,    1,   25,   89,    1,   25,   89,
        1,   25,   89,    1,    9,   25,   89,   35,   89,   34,
       35,   89,   35,   89,   32,   89,   31,   32,   89,   29,
       32,   89,   32,   89,   64,   89,   63,   64,   89,   64,
       89,   61,   89,   60,   61,   89,   61,   89,   66,   89,

       65,   89,   67,   89,   68,   89,    1,   84,   89,    1,
       66,   89,    1,   65,   89,    1,   89,    1,   89,    1,
       67,   89,    1,   68,   89,   55,   89,   53,   55,   84,
       89,   54,   83,   89,   44,   55,   89,   50,   55,   89,
       42,   55,   89,   43,   55,   89,   55,   89,   50,   55,
       89,   55,   89,   52,   55,   89,   52,   55,   89,   51,
       55,   89,   51,   55,   89,   51,   55,   89,   51,   55,
       89,   51,   55,   89,    9,   55,   89,   51,   55,   89,
       51,   55,   89,   51,   55,   89,   51,   55,   89,   51,
       55,   89,   51,   55,   89,   51,   55,   89,   51,   55,

       89,   51,   55,   89,   41,   55,   89,    1,   55,   89,
        1,   53,   55,   84,   89,    1,   44,   55,   89,    1,
       55,   89,    1,   50,   55,   89,    1,   42,   55,   89,
        1,   43,   55,   89,    1,   55,   89,    1,   50,   55,
       89,    1,   55,   89,    1,   52,   55,   89,    1,   52,
       55,   89,    1,   51,   55,   89,    1,   51,   55,   89,
        1,   51,   55,   89,    1,   51,   55,   89,    1,   51,
       55,   89,    1,    9,   55,   89,    1,   51,   55,   89,
        1,   51,   55,   89,    1,   51,   55,   89,    1,   51,
       55,   89,    1,   51,   55,   89,    1,   51,   55,   89,

        1,   51,   55,   89,    1,   51,   55,   89,    1,   51,
       55,   89,    1,   41,   55,   89,   40,   89,   40,   84,
       89,   37,   40,   89,   39,   40,   89,   38,   40,   89,
       40,   89,   40,   89,   40,   89,   40,   89,   40,   89,
        9,   40,   89,   36,   40,   89,    1,   40,   89,    1,
       40,   84,   89,    1,   40,   89,    1,   37,   40,   89,
        1,   39,   40,   89,    1,   38,   40,   89,    1,   40,
       89,    1,   40,   89,    1,   40,   89,    1,   40,   89,
        1,   40,   89,    1,    9,   40,   89,    1,   36,   40,
       89,   58,   89,   57,   58,   84,   89,   58,   89,   56,

       58,   89,   58,   89,   58,   89,   58,   89,   58,   89,
        9,   58,   89,    1,   58,   89,    1,   57,   58,   84,
       89,    1,   58,   89,    1,   58,   89,    1,   56,   58,
       89,    1,   58,   89,    1,   58,   89,    1,   58,   89,
        1,   58,   89,    1,    9,   58,   89,    1,   84,   89,
        1,   89,   80,   84,   89,   77,   89,   78,   89,   89,
       81,   89,   81,   89,   81,   89,   81,   89,   81,   89,
        1,   80,   84,   89,    1,   77,   89,    1,   78,   89,
        1,   89,    1,   81,   89,    1,   81,   89,    1,   81,
       89,    1,   81,   89,    1,   81,   89,   84,   83,   10,

        1,   84,   12,   13,   13,   14,   17,    4,    4,    3,
        4,    4,    5,   25,   25,   84,   10,   25,   25,   25,
       25,   25,   25,    1,   25,   84,   25,   25,   25,   25,
       33,   29,   30,   62,   59,    1,   84,   53,   84,   52,
       52,   52,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        1,   53,   84,   57,   84,    1,   57,   84,    1,   84,
       80,   84,   79,   81,   81,   81,   81,   81,    1,   80,
       84,   15,    4,   19,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   52,   52,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   49,   51,   51,   51,   51,
       51,   51,   51,   51,   81,   81,   81,   81,    7,    4,
       25,   25,   25,   25,   25,   25,   25,    7,   25,   25,
       52,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   81,   81,   81,   81,    4,   25,
       25,   25,   25,   25,   25,   25,   25,   51,   51,   51,
       51,   45,   51,   51,   51,   51,   51,   51,   51,   81,
       81,   81,   81,    2,    4,   25,   25,   25,   25,   25,
       25,   25,   25,   51,   51,   51,   51,   51,   47,   51,
       51,   51,   81,   81,   81,   81,   26,   25,   25,   25,

       25,   25,   25,   21,   25,   26,   25,   51,   51,   51,
       51,   51,   51,   51,   81,   81,   81,   81,   27,    8,
       25,   25,   25,   25,   22,   25,   27,   25,    8,   25,
       51,   51,   51,   51,   51,   46,   51,   81,   81,   81,
       81,   28,   25,   25,   25,   25,   23,   25,   28,   51,
       51,   51,   51,   51,   81,   81,   81,   81,   25,   25,
       25,   25,   76,   75,   51,   51,   51,   51,   51,   82,
       81,   81,   81,   81,   88,   25,   88,   25,   25,   25,
       25,   70,   72,   71,   51,   88,   51,   51,   51,   81,
       88,   81,   81,   86,   25,   25,   51,   51,   51,   81,

       81,   25,   25,   51,   51,   48,   51,   81,   81,   25,
       25,   25,   69,   51,   81,   85,   25,   73,   51,   81,
       25,   51,   81,   25,   51,   81,   25,   74,   51,   81,
       25,   51,   81,   25,   25,   87
    } ;

static yyconst short int yy_accept[713] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    5,    5,    6,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   11,   11,   11,   11,   11,
       11,   12,   13,   15,   17,   18,   19,   20,   21,   22,
       24,   26,   29,   31,   33,   35,   37,   39,   41,   44,
       46,   48,   50,   52,   54,   56,   58,   60,   62,   64,
       66,   68,   71,   73,   75,   77,   79,   81,   83,   86,
       89,   93,   96,   99,  102,  105,  108,  111,  114,  118,
      120,  123,  126,  128,  130,  132,  134,  136,  139,  142,

      146,  149,  152,  155,  158,  161,  164,  168,  170,  173,
      175,  177,  180,  183,  185,  187,  190,  192,  194,  197,
      199,  201,  203,  205,  207,  210,  213,  216,  218,  220,
      223,  226,  228,  232,  235,  238,  241,  244,  247,  249,
      252,  254,  257,  260,  263,  266,  269,  272,  275,  278,
      281,  284,  287,  290,  293,  296,  299,  302,  305,  308,
      311,  316,  320,  323,  327,  331,  335,  338,  342,  345,
      349,  353,  357,  361,  365,  369,  373,  377,  381,  385,
      389,  393,  397,  401,  405,  409,  413,  417,  419,  422,
      425,  428,  431,  433,  435,  437,  439,  441,  444,  447,

      450,  454,  457,  461,  465,  469,  472,  475,  478,  481,
      484,  488,  492,  494,  498,  500,  503,  505,  507,  509,
      511,  514,  517,  522,  525,  528,  532,  535,  538,  541,
      544,  548,  551,  553,  556,  558,  560,  561,  563,  565,
      567,  569,  571,  575,  578,  581,  583,  586,  589,  592,
      595,  598,  599,  600,  601,  601,  601,  601,  601,  601,
      603,  603,  603,  603,  603,  604,  605,  606,  607,  608,
      609,  610,  612,  613,  614,  614,  614,  615,  617,  619,
      620,  621,  622,  623,  624,  627,  628,  629,  630,  631,
      632,  633,  634,  635,  636,  638,  638,  638,  638,  638,

      640,  640,  641,  642,  643,  643,  643,  644,  645,  646,
      647,  648,  649,  650,  651,  652,  653,  654,  655,  656,
      657,  658,  659,  660,  661,  664,  666,  669,  671,  671,
      671,  673,  674,  675,  676,  677,  678,  679,  682,  682,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      685,  686,  687,  688,  689,  690,  691,  692,  693,  694,
      694,  694,  694,  694,  695,  696,  697,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  708,  709,  710,  711,
      712,  713,  714,  715,  715,  716,  717,  718,  719,  719,
      719,  719,  719,  719,  719,  719,  720,  720,  721,  722,

      723,  724,  725,  726,  727,  728,  730,  731,  731,  731,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  745,  746,  747,  748,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  750,  751,
      752,  753,  754,  755,  756,  757,  758,  758,  758,  759,
      760,  761,  762,  764,  765,  766,  767,  768,  769,  770,
      770,  771,  772,  773,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  784,  784,  784,  784,  784,  785,  786,  787,
      788,  789,  791,  792,  793,  793,  794,  795,  796,  797,

      797,  797,  797,  797,  797,  797,  798,  798,  799,  800,
      801,  802,  803,  804,  807,  808,  808,  808,  808,  808,
      808,  808,  809,  810,  811,  812,  813,  814,  815,  815,
      816,  817,  818,  819,  819,  819,  819,  819,  820,  820,
      821,  822,  823,  824,  825,  828,  829,  831,  831,  831,
      831,  831,  831,  831,  831,  832,  833,  834,  835,  836,
      838,  838,  839,  840,  841,  842,  842,  842,  842,  842,
      843,  844,  845,  846,  847,  850,  850,  850,  850,  850,
      850,  850,  850,  851,  852,  853,  854,  855,  855,  856,
      857,  858,  859,  859,  859,  859,  859,  860,  861,  862,

      863,  863,  864,  864,  864,  865,  865,  865,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      876,  876,  876,  876,  878,  879,  880,  881,  882,  883,
      883,  883,  884,  885,  885,  887,  888,  889,  890,  892,
      893,  894,  894,  895,  895,  896,  897,  897,  897,  897,
      898,  899,  900,  901,  902,  902,  902,  903,  904,  904,
      904,  904,  905,  906,  908,  909,  910,  910,  910,  910,
      911,  912,  913,  913,  913,  914,  915,  916,  916,  917,
      918,  918,  919,  919,  920,  921,  921,  922,  922,  923,
      924,  924,  925,  925,  926,  927,  927,  928,  928,  929,

      930,  931,  931,  932,  933,  934,  934,  934,  935,  936,
      937,  937
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   12,   14,   15,   16,   17,   17,
       17,   18,   17,   17,   17,   17,   17,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   33,   34,   35,   36,   37,   38,
       33,   39,   40,   41,   42,   43,   44,   33,   33,   33,
        1,   45,    1,    1,   46,   47,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   33,   57,   58,   59,   60,
       61,   33,   33,   62,   63,   64,   65,   66,   33,   67,
       33,   33,   68,   69,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    1,    1,    4,    4,    4,    5,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    6,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst short int yy_base[747] =
    {   0,
        0,    3,    1,    2,    5,    7,    8,   11, 1546, 1545,
       57,  103,   19,   61,   17,   25,  150,  220,   34,   36,
       66,   77,  289,  358,  428,  498,  567,  636,  248,  705,
       99,  134,  752,  822,  281,  209,  297,  301,  350,  582,
     1547, 1550,   88, 1550,   25, 1512, 1508, 1509, 1504, 1550,
     1550,   94,   88,  101, 1508, 1504, 1505, 1500, 1550,    0,
      102, 1550,    0, 1550, 1550,    0, 1530, 1478,    0, 1550,
     1550,  130,  112,  163, 1502, 1498, 1499, 1494, 1550, 1550,
      180,  133,  113,  182, 1498, 1494, 1495, 1490, 1550,    0,
      203, 1550,  134, 1494, 1490, 1491, 1486,    0,    0,  206,

      135,  233, 1490, 1486, 1487, 1482,    0, 1550, 1550,    0,
     1550, 1550,    0,    0, 1550, 1550,    0, 1550, 1550,    0,
     1550, 1550, 1550, 1550,  258, 1550, 1550, 1488, 1480, 1550,
     1550, 1550,  243, 1550, 1550, 1550, 1550, 1550,  240,  253,
      244,  592,  375,    0, 1484, 1480, 1481, 1476, 1550, 1453,
      211, 1452,  132, 1452, 1450,   22, 1450, 1448, 1550, 1550,
      328, 1550,  258, 1550, 1550, 1550,  332,  321,  267,  613,
      584,    0, 1474, 1470, 1471, 1466, 1550, 1443,  226, 1442,
      145, 1442, 1440,  287, 1440, 1438, 1550, 1550,  376, 1550,
     1550, 1550,  307, 1464, 1460, 1461, 1456, 1550, 1550, 1550,

      404,  316, 1550, 1550, 1550,  359, 1460, 1456, 1457, 1452,
     1550, 1550, 1550,  397,  372, 1550, 1456, 1452, 1453, 1448,
     1550, 1550,  409,  362,  405, 1550, 1452, 1448, 1449, 1444,
     1550,  613, 1443,  420, 1550, 1550, 1478,    0, 1446, 1442,
     1443, 1438,  652, 1550, 1550, 1473,    0, 1441, 1437, 1438,
     1433,  570, 1550, 1550, 1468, 1446, 1443, 1430, 1435,  667,
      523,  298, 1413, 1447,    0,  570,  577, 1550,    0,    0,
     1456, 1455, 1444,    0,  579,  607,    0,  630,    0, 1458,
     1436, 1433, 1420, 1425,  673,  551,  359, 1403, 1437, 1550,
        0, 1550, 1550, 1550,  682, 1422, 1414, 1422, 1427,  687,

      676,  682,  696,  699,  685,    0,    0, 1426, 1423, 1410,
     1415, 1385, 1397, 1384, 1378, 1375, 1380, 1376, 1379, 1377,
     1383, 1388, 1372,  533,  736,  726,  743,  891, 1395, 1409,
      896, 1550,    0, 1408, 1405, 1392, 1397,  899, 1425, 1550,
     1387, 1384, 1391, 1381, 1360, 1371, 1367,   52, 1368,  890,
     1416, 1378, 1375, 1382, 1372, 1351, 1362, 1358,  609, 1375,
     1372,  897,  894,  900,    0, 1369, 1366, 1373, 1363, 1347,
     1342, 1340, 1353, 1342, 1352,    0, 1345, 1336, 1337, 1332,
     1339, 1343, 1345, 1354, 1351, 1348, 1355, 1345, 1347, 1351,
     1339, 1360, 1331, 1326, 1317, 1550, 1316, 1319, 1338, 1342,

     1330, 1351, 1322, 1317, 1308,    0, 1307, 1346, 1323,  903,
      906, 1328, 1332, 1320, 1341, 1300, 1305, 1310, 1297, 1296,
     1307, 1302, 1303, 1292, 1309, 1314, 1318, 1306, 1327, 1304,
     1321, 1308, 1306, 1292, 1292, 1287, 1295, 1291, 1295, 1312,
     1299, 1297, 1283, 1283, 1278, 1286, 1299,  901, 1286, 1303,
     1290, 1288,    0, 1276, 1273, 1275, 1275, 1264, 1267, 1296,
     1275, 1292, 1279, 1277, 1277, 1280, 1274, 1286, 1249, 1258,
      662, 1249,    0, 1270, 1273, 1267, 1279, 1242, 1251,  717,
     1242, 1257,  292, 1261, 1273, 1263, 1259, 1262, 1256, 1268,
     1231,    0, 1242, 1235, 1258, 1251, 1254, 1248, 1260, 1246,

     1245, 1261, 1238, 1226, 1218,  731, 1217, 1239, 1238, 1254,
     1231, 1219, 1211,  927, 1210, 1233, 1248, 1234, 1233,  612,
     1223, 1227, 1226, 1242, 1219, 1207, 1212, 1210, 1237, 1219,
     1218, 1234, 1211, 1232, 1231, 1215, 1213, 1550, 1195, 1550,
     1227, 1226, 1210, 1208,    0, 1190,    0, 1208, 1205, 1205,
     1204, 1217, 1210, 1205, 1215, 1214, 1198, 1196, 1185,    0,
     1194, 1209, 1208, 1192, 1190, 1190, 1187, 1186, 1185, 1550,
     1186, 1183, 1182, 1161,    0, 1168, 1150, 1136,  928, 1148,
     1133, 1136, 1119, 1112, 1103,  990,  969,  988,  988,  985,
      982,  981,  978,  986,  936,  986,  958,  966,  937,  971,

      965, 1550,  149,  940, 1550,  951,  960,  945,  937,  935,
      941,  942,  903, 1550,  918,  926,  945,  931, 1550,  917,
      948,  943,  895,    0,  896,  949,  923,  886, 1550,  880,
      868, 1550, 1550,  719,    0,  707,  702,  673,    0,  686,
      679,  669, 1550,  654,  651,  641,  641,  649,  630,  625,
      619,  584,  607,  587,  572,  960,  565,  968,  563,  559,
      551,  379,  969,    0,  363,  972,  364,  973,  392,  354,
      977,  383,  980,  339, 1550,  327,  315,  306, 1550,  299,
      981, 1550,  291,  279,  270,  252,  249,  175,  191,  169,
      109,  104,  992,   71,   55,   44,   27, 1000, 1550,   12,

        2, 1001, 1004, 1005, 1009, 1012,   21, 1013,   16, 1550,
     1550, 1033, 1039, 1045, 1051, 1057, 1063, 1069, 1075, 1081,
     1087, 1093, 1099, 1105, 1111, 1117, 1123, 1129, 1135, 1141,
     1146, 1151, 1156, 1162, 1168, 1174, 1180, 1183, 1188, 1194,
     1200, 1203, 1205, 1210, 1216,   12
    } ;

static yyconst short int yy_def[747] =
    {   0,
      712,  713,  714,  714,  715,  715,  716,  716,  717,  717,
      718,  719,  720,  721,  722,  722,  723,  723,  724,  724,
      725,  725,  712,  713,  711,  711,  726,  727,  728,  729,
      712,   24,  711,  711,  712,   24,  712,   24,  712,   24,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  730,
      731,  711,  732,  711,  711,  733,  734,  733,  735,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  736,
      736,  711,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  711,  711,  737,
      711,  711,  738,  739,  711,  711,  740,  711,  711,  741,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  742,  742,  742,  742,  742,  711,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  742,  742,  742,  742,  742,  711,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  743,  743,  743,
      743,  743,  711,  711,  711,  711,  743,  743,  743,  743,
      743,  711,  711,  711,  744,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  730,  731,  731,  711,  732,  733,
      734,  734,  733,  735,  711,  711,  736,  736,  736,  745,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  711,
      738,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  746,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  711,  711,  711,  711,  711,  711,
      711,  711,  743,  743,  743,  743,  743,  711,  744,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  733,  711,
      745,  736,  736,  736,  736,  736,  736,  736,  736,  711,
      711,  711,  711,  711,  746,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  711,  743,  743,  743,  743,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  733,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  711,  711,  711,
      711,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  711,  743,  743,  743,  743,  711,
      711,  711,  711,  711,  711,  711,  711,  733,  736,  736,
      736,  736,  736,  736,  736,  736,  711,  711,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  711,
      743,  743,  743,  743,  711,  711,  711,  711,  711,  711,
      711,  711,  733,  736,  736,  736,  736,  736,  736,  736,
      736,  711,  711,  711,  711,  711,  742,  742,  742,  742,
      742,  742,  742,  742,  711,  743,  743,  743,  743,  711,

      711,  711,  711,  711,  711,  711,  711,  736,  736,  736,
      736,  736,  736,  736,  736,  711,  711,  711,  711,  711,
      711,  742,  742,  742,  742,  742,  742,  742,  711,  743,
      743,  743,  743,  711,  711,  711,  711,  711,  711,  711,
      736,  736,  736,  736,  736,  736,  736,  711,  711,  711,
      711,  711,  711,  711,  742,  742,  742,  742,  742,  742,
      711,  743,  743,  743,  743,  711,  711,  711,  711,  711,
      736,  736,  736,  736,  736,  711,  711,  711,  711,  711,
      711,  711,  742,  742,  742,  742,  742,  711,  743,  743,
      743,  743,  711,  711,  711,  711,  736,  736,  736,  736,

      711,  711,  711,  711,  711,  711,  711,  711,  742,  742,
      742,  742,  742,  711,  743,  743,  743,  743,  711,  711,
      711,  711,  711,  736,  736,  736,  736,  736,  711,  711,
      711,  711,  711,  711,  742,  742,  742,  742,  743,  743,
      743,  711,  711,  711,  736,  736,  711,  711,  711,  742,
      742,  742,  743,  743,  711,  711,  736,  736,  711,  711,
      711,  742,  742,  742,  743,  743,  711,  711,  711,  736,
      736,  736,  711,  711,  711,  742,  743,  711,  711,  736,
      711,  711,  711,  742,  743,  711,  736,  711,  742,  743,
      711,  736,  711,  742,  743,  711,  736,  711,  711,  742,

      743,  711,  736,  742,  743,  711,  711,  736,  736,  711,
        0,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711
    } ;

static yyconst short int yy_nxt[1621] =
    {   0,
      711,   43,   44,   43,   52,   44,   52,   64,   53,   64,
       42,   61,   61,   42,   45,  365,   68,   54,  710,   42,
       91,   92,   91,  710,  109,   46,   47,   42,   55,   56,
      711,   48,  109,   93,   57,  254,   42,   49,   42,  255,
       58,  116,  705,  116,   94,   95,   50,   62,   62,   59,
       96,   65,  704,   65,   67,  396,   97,   67,   72,   44,
       72,  110,  100,   92,  100,   98,  101,  703,   42,  110,
      119,   73,   74,   74,   74,  102,  320,  321,  117,   42,
      117,  119,   75,   76,  702,  322,  103,  104,   77,  252,
      253,  252,  105,  701,   78,  260,  253,  260,  106,  261,

       43,   44,   43,   79,   81,   44,   81,  107,   82,  700,
      120,  254,  267,   45,  397,  255,  268,   83,   84,   84,
       84,  120,  254,  254,   46,   47,  255,  255,   85,   86,
       48,  252,  253,  252,   87,  232,   49,  232,   51,  262,
       88,   51,  697,  263,  279,   50,  264,  696,  280,   89,
      111,  111,   42,  111,  112,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   51,  630,  631,  275,  233,  276,  276,
      276,  260,  253,  260,  262,  261,  287,  316,  263,  317,
      288,  264,  695,  289,  114,  275,  111,  276,  276,  276,

      316,   51,  317,   51,  278,  253,  278,  285,  253,  285,
       52,  286,   52,   51,  694,  693,   51,  111,  111,  111,
      111,  111,   42,  111,  112,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  279,  300,  253,  300,  280,   51,  214,
       44,  214,   51,  301,  254,  302,  302,  302,  255,  295,
      253,  295,  215,  261,  114,  313,  111,  216,  303,  303,
      303,  314,  692,  217,  218,  691,   51,  254,   51,  219,
      313,  255,   43,   44,   43,  220,  314,  111,  111,  111,
       43,   44,   43,  121,  221,   45,  122,  296,   43,   44,

       43,  297,   52,   45,   52,   51,   46,   47,   51,  262,
      690,   45,   48,  263,   46,   47,  264,  254,   49,  689,
       48,  255,   46,   47,  688,  517,   49,   50,   48,  325,
      253,  325,  518,  261,   49,   50,  303,  303,  303,  687,
       51,  320,  321,   50,   51,  301,  686,  302,  302,  302,
      322,   43,   44,   43,  685,  345,  123,  346,  124,  125,
       44,  125,  126,   53,   45,  127,  684,  262,   51,  254,
       51,  263,   54,  255,  264,   46,   47,  252,  253,  252,
      683,   48,  254,   55,   56,  679,  255,   49,  304,   57,
      302,  302,  302,  680,  679,   58,   50,  128,  326,  253,

      326,  129,  305,  678,   59,  260,  253,  260,  677,  261,
      327,  253,  327,  262,  261,  254,  356,  263,  357,  255,
      264,  331,  253,  331,  676,  130,  305,  131,  132,  133,
      134,  133,  135,  132,  136,  132,  137,  138,  136,  139,
      136,  140,  141,  142,  143,  143,  132,  132,  136,  136,
      136,  144,  144,  145,  146,  144,  144,  144,  144,  147,
      144,  144,  144,  144,  144,  148,  144,  144,  144,  144,
      144,  144,  132,  144,  149,  144,  150,  151,  152,  144,
      153,  144,  144,  154,  144,  155,  144,  144,  144,  144,
      156,  144,  157,  158,  144,  159,  136,  159,  160,  161,

      134,  161,  162,  163,  164,  160,  165,  166,  164,  167,
      164,  168,  169,  170,  171,  171,  160,  160,  164,  164,
      164,  172,  172,  173,  174,  172,  172,  172,  172,  175,
      172,  172,  172,  172,  172,  176,  172,  172,  172,  172,
      172,  172,  160,  172,  177,  172,  178,  179,  180,  172,
      181,  172,  172,  182,  172,  183,  172,  172,  172,  172,
      184,  172,  185,  186,  172,  187,  164,  187,  189,   44,
      189,  252,  253,  252,  262,  190,  191,  675,  263,  192,
      711,  193,  674,   52,  711,   52,   51,  267,  382,   51,
      383,  268,  194,  195,  350,  350,  350,  304,  196,  302,

      302,  302,  287,  673,  197,  304,  288,  302,  302,  302,
      670,  305,  406,  198,  328,  253,  328,  667,  261,  305,
      275,   51,  276,  276,  276,   51,  304,  666,  302,  302,
      302,  278,  253,  278,  199,  305,  199,  201,   44,  201,
      305,  202,  665,  305,  203,  204,  552,  664,  205,   51,
      206,   51,  553,  338,  253,  338,  329,  261,  306,  663,
      662,  207,  208,  506,  305,  506,  661,  209,  260,  253,
      260,  407,  261,  210,  285,  253,  285,  660,  286,  306,
      659,  658,  211,  295,  253,  295,  657,  261,  300,  253,
      300,  303,  303,  303,  656,  304,  363,  302,  302,  302,

      364,  364,  364,  212,  655,  212,  223,   44,  223,  305,
      224,  303,  303,  303,  303,  303,  303,  654,  514,  225,
      514,  296,  653,  362,  226,  297,  305,  326,  253,  326,
      227,  228,  506,  305,  506,  652,  229,  325,  253,  325,
      651,  261,  230,  650,  327,  253,  327,  362,  261,  649,
      305,  231,   42,  234,   44,  234,   42,   42,   42,   42,
      235,  236,   42,   42,   42,   42,   45,   42,   42,   42,
       42,  237,   42,   42,   42,  238,  238,  239,  240,  238,
      238,  238,  238,  241,  238,  238,  238,  238,  238,  242,
      238,  238,  238,  238,  238,  238,   42,  238,   50,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,   42,
       42,   42,   51,  243,   44,  243,   51,   53,   51,   51,
      244,  245,   51,   51,   51,   51,   54,   51,   51,   51,
       51,  246,   51,   51,   51,  247,  247,  248,  249,  247,
      247,  247,  247,  250,  247,  247,  247,  247,  247,  251,
      247,  247,  247,  247,  247,  247,   51,  247,   59,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,   51,
       51,   51,  328,  253,  328,  648,  261,  331,  253,  331,

      338,  253,  338,  647,  261,  350,  350,  350,  410,  364,
      364,  364,  411,  411,  411,  364,  364,  364,  411,  411,
      411,  411,  411,  411,  646,  643,  483,  484,  514,  604,
      514,  604,  645,  644,  329,  485,  486,  621,  626,  621,
      626,  604,  621,  604,  621,  643,  621,  605,  621,  621,
      626,  621,  626,  642,  641,  622,  627,  640,  639,  605,
      622,  668,  638,  668,  622,  637,  636,  622,  627,  671,
      668,  671,  668,  668,  668,  668,  668,  635,  671,  669,
      671,  681,  681,  681,  681,  634,  633,  672,  669,  632,
      629,  669,  669,  698,  628,  698,  672,  625,  624,  682,

      682,  698,  706,  698,  706,  708,  706,  708,  706,  623,
      706,  699,  706,  706,  708,  706,  708,  620,  619,  699,
      707,  618,  617,  709,  707,  616,  615,  614,  707,  613,
      612,  707,  709,   42,   42,   42,   42,   42,   42,   51,
       51,   51,   51,   51,   51,   60,   60,   60,   60,   60,
       60,   63,   63,   63,   63,   63,   63,   66,   66,   66,
       66,   66,   66,   69,   69,   69,   69,   69,   69,   71,
       71,   71,   71,   71,   71,   80,   80,   80,   80,   80,
       80,   90,   90,   90,   90,   90,   90,   99,   99,   99,
       99,   99,   99,  108,  108,  108,  108,  108,  108,  113,

      113,  113,  113,  113,  113,  115,  115,  115,  115,  115,
      115,  118,  118,  118,  118,  118,  118,  188,  188,  188,
      188,  188,  188,  200,  200,  200,  200,  200,  200,  213,
      213,  213,  213,  213,  213,  222,  222,  222,  222,  222,
      222,  265,  265,  611,  265,  265,  266,  266,  266,  266,
      266,  269,  610,  269,  269,  269,  270,  609,  270,  270,
      270,  270,  271,  608,  271,  271,  271,  271,  274,  607,
      274,  274,  274,  274,  277,  606,  277,  277,  277,  277,
      290,  603,  290,  290,  290,  290,  291,  291,  292,  602,
      292,  292,  292,  292,  293,  601,  293,  293,  293,  293,

      294,  600,  294,  294,  294,  294,  307,  307,  333,  333,
      339,  339,  339,  339,  339,  339,  351,  351,  351,  351,
      351,  351,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  376,  559,  558,  557,  556,  555,  554,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,

      520,  519,  516,  515,  513,  512,  511,  510,  509,  508,
      507,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  376,  491,  376,  490,  489,
      488,  487,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  376,
      376,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  376,  423,  422,  421,  420,  376,  419,

      418,  417,  416,  376,  376,  415,  414,  413,  412,  409,
      408,  405,  404,  403,  402,  401,  400,  399,  340,  398,
      395,  394,  393,  392,  391,  390,  389,  340,  388,  387,
      386,  385,  384,  330,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      361,  360,  299,  298,  359,  358,  355,  354,  353,  352,
      340,  349,  272,  272,  348,  347,  344,  343,  342,  341,
      340,  337,  336,  335,  334,  332,  337,  336,  335,  334,
      332,  330,  259,  258,  257,  256,  259,  258,  257,  256,
      259,  258,  257,  256,  259,  258,  257,  256,  324,  323,

      319,  318,  315,  312,  311,  310,  309,  308,  324,  323,
      319,  318,  315,  312,  311,  310,  309,  308,  299,  298,
      284,  283,  282,  281,  284,  283,  282,  281,  259,  258,
      257,  256,  259,  258,  257,  256,  273,  272,  259,  258,
      257,  256,  259,  258,  257,  256,  711,   70,   70,   41,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711
    } ;

static yyconst short int yy_chk[1621] =
    {   0,
        0,    1,    1,    1,    2,    2,    2,    5,    2,    6,
        7,    3,    4,    8,    1,  746,    8,    2,  709,   15,
       13,   13,   13,  707,   15,    1,    1,   16,    2,    2,
        0,    1,   16,   13,    2,   45,   19,    1,   20,   45,
        2,   19,  701,   20,   13,   13,    1,    3,    4,    2,
       13,    5,  700,    6,    7,  348,   13,    8,   11,   11,
       11,   15,   14,   14,   14,   13,   14,  697,   21,   16,
       21,   11,   11,   11,   11,   14,  156,  156,   19,   22,
       20,   22,   11,   11,  696,  156,   14,   14,   11,   43,
       43,   43,   14,  695,   11,   52,   52,   52,   14,   52,

       31,   31,   31,   11,   12,   12,   12,   14,   12,  694,
       21,   54,   61,   31,  348,   54,   61,   12,   12,   12,
       12,   22,   73,   83,   31,   31,   73,   83,   12,   12,
       31,   72,   72,   72,   12,   32,   31,   32,   32,   53,
       12,   32,  692,   53,   93,   31,   53,  691,   93,   12,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   32,  603,  603,   74,   32,   74,   74,
       74,   81,   81,   81,   82,   81,  101,  153,   82,  153,
      101,   82,  690,  101,   17,   84,   17,   84,   84,   84,

      181,   32,  181,   32,   91,   91,   91,  100,  100,  100,
       36,  100,   36,   36,  689,  688,   36,   17,   17,   17,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,  102,  133,  133,  133,  102,   36,   29,
       29,   29,   36,  139,  141,  139,  139,  139,  141,  125,
      125,  125,   29,  125,   18,  151,   18,   29,  140,  140,
      140,  151,  687,   29,   29,  686,   36,  169,   36,   29,
      179,  169,   35,   35,   35,   29,  179,   18,   18,   18,
       23,   23,   23,   23,   29,   35,   23,  125,   37,   37,

       37,  125,   38,   23,   38,   38,   35,   35,   38,  163,
      685,   37,   35,  163,   23,   23,  163,  193,   35,  684,
       23,  193,   37,   37,  683,  483,   23,   35,   37,  161,
      161,  161,  483,  161,   37,   23,  168,  168,  168,  680,
       38,  184,  184,   37,   38,  167,  678,  167,  167,  167,
      184,   39,   39,   39,  677,  262,   23,  262,   23,   24,
       24,   24,   24,   24,   39,   24,  676,  202,   38,  206,
       38,  202,   24,  206,  202,   39,   39,  189,  189,  189,
      674,   39,  215,   24,   24,  672,  215,   39,  143,   24,
      143,  143,  143,  670,  669,   24,   39,   24,  214,  214,

      214,   24,  143,  667,   24,  201,  201,  201,  665,  201,
      223,  223,  223,  224,  223,  225,  287,  224,  287,  225,
      224,  234,  234,  234,  662,   24,  143,   24,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   27,   27,
       27,  252,  252,  252,  261,   27,   27,  661,  261,   27,
      266,   27,  660,   40,  266,   40,   40,  267,  324,   40,
      324,  267,   27,   27,  275,  275,  275,  171,   27,  171,

      171,  171,  286,  659,   27,  142,  286,  142,  142,  142,
      657,  171,  359,   27,  232,  232,  232,  655,  232,  142,
      276,   40,  276,  276,  276,   40,  170,  654,  170,  170,
      170,  278,  278,  278,   27,  171,   27,   28,   28,   28,
      170,   28,  653,  142,   28,   28,  520,  652,   28,   40,
       28,   40,  520,  243,  243,  243,  232,  243,  142,  651,
      650,   28,   28,  471,  170,  471,  649,   28,  260,  260,
      260,  359,  260,   28,  285,  285,  285,  648,  285,  170,
      647,  646,   28,  295,  295,  295,  645,  295,  300,  300,
      300,  301,  301,  301,  644,  302,  305,  302,  302,  302,

      305,  305,  305,   28,  642,   28,   30,   30,   30,  302,
       30,  303,  303,  303,  304,  304,  304,  641,  480,   30,
      480,  295,  640,  303,   30,  295,  304,  326,  326,  326,
       30,   30,  506,  302,  506,  638,   30,  325,  325,  325,
      637,  325,   30,  636,  327,  327,  327,  303,  327,  634,
      304,   30,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  328,  328,  328,  631,  328,  331,  331,  331,

      338,  338,  338,  630,  338,  350,  350,  350,  362,  363,
      363,  363,  362,  362,  362,  364,  364,  364,  410,  410,
      410,  411,  411,  411,  628,  627,  448,  448,  514,  579,
      514,  579,  625,  623,  328,  448,  448,  595,  599,  595,
      599,  604,  611,  604,  611,  622,  617,  579,  617,  621,
      626,  621,  626,  620,  618,  595,  599,  616,  615,  604,
      611,  656,  613,  656,  617,  612,  610,  621,  626,  658,
      663,  658,  663,  666,  668,  666,  668,  609,  671,  656,
      671,  673,  681,  673,  681,  608,  607,  658,  663,  606,
      601,  666,  668,  693,  600,  693,  671,  598,  597,  673,

      681,  698,  702,  698,  702,  703,  704,  703,  704,  596,
      705,  693,  705,  706,  708,  706,  708,  594,  593,  698,
      702,  592,  591,  703,  704,  590,  589,  588,  705,  587,
      586,  706,  708,  712,  712,  712,  712,  712,  712,  713,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
      714,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  717,  717,  717,  717,  717,  717,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  720,  720,  720,  720,  720,  720,  721,  721,  721,
      721,  721,  721,  722,  722,  722,  722,  722,  722,  723,

      723,  723,  723,  723,  723,  724,  724,  724,  724,  724,
      724,  725,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  726,  727,  727,  727,  727,  727,  727,  728,
      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      729,  730,  730,  585,  730,  730,  731,  731,  731,  731,
      731,  732,  584,  732,  732,  732,  733,  583,  733,  733,
      733,  733,  734,  582,  734,  734,  734,  734,  735,  581,
      735,  735,  735,  735,  736,  580,  736,  736,  736,  736,
      737,  578,  737,  737,  737,  737,  738,  738,  739,  577,
      739,  739,  739,  739,  740,  576,  740,  740,  740,  740,

      741,  574,  741,  741,  741,  741,  742,  742,  743,  743,
      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  573,  572,  571,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  546,  544,  543,  542,
      541,  539,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  519,
      518,  517,  516,  515,  513,  512,  511,  510,  509,  508,
      507,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  491,  490,  489,  488,  487,  486,

      485,  484,  482,  481,  479,  478,  477,  476,  475,  474,
      472,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  452,  451,
      450,  449,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  409,  408,
      407,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  375,

      374,  373,  372,  371,  370,  369,  368,  367,  366,  361,
      360,  358,  357,  356,  355,  354,  353,  352,  351,  349,
      347,  346,  345,  344,  343,  342,  341,  339,  337,  336,
      335,  334,  330,  329,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      299,  298,  297,  296,  289,  288,  284,  283,  282,  281,
      280,  273,  272,  271,  264,  263,  259,  258,  257,  256,
      255,  251,  250,  249,  248,  246,  242,  241,  240,  239,
      237,  233,  230,  229,  228,  227,  220,  219,  218,  217,
      210,  209,  208,  207,  197,  196,  195,  194,  186,  185,

      183,  182,  180,  178,  176,  175,  174,  173,  158,  157,
      155,  154,  152,  150,  148,  147,  146,  145,  129,  128,
      106,  105,  104,  103,   97,   96,   95,   94,   88,   87,
       86,   85,   78,   77,   76,   75,   68,   67,   58,   57,
       56,   55,   49,   48,   47,   46,   41,   10,    9,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.ll"
#define INITIAL 0
#define YY_STACK_USED 1
#line 6 "lexer.ll"

// $Id: lexer.ll,v 1.18 2000/09/12 21:28:03 kenelson Exp $

//#define LEXER_TEST

#include <fstream>
#include <unistd.h>
#include <string>
#include <math.h>

#include "gtkmmproc.h"
#include "parser.h"

#ifdef LEXER_TEST

// We now get the symbols from the parse even though the lexer
// test does not use it.  However, remember to add new parser
// symbols to the lexer test program below.

YYSTYPE yylval;

extern "C"
{
void yyerror(char *s);
}

#else

extern "C"
{
void yyerror(char *s);
int yylex();
int yyparse();
}

#endif

/* initial code */
float GtkVersion=1.1;
int gtk_cond_if=false;
int gtk_cond_print=false;

int macro_depth = 0;
int par_depth = 0;
int brace_depth = 0;

/* pattern declarations */
// Symbol name
// Class definition/declaration
// Define states
#define CCOMMENT 1

#define CPPCOMMENT 2

#define MACROS 3

#define MACROLINE 4

#define GTK_COND_IF 5

#define GTK_COND_WEED 6

#define DECL_CHAR 7

#define DECL_STRING 8

#define WRAP_CHAR 9

#define WRAP_STRING 10

#define IN_WRAP 11

#define IN_DECL 12

#define IN_PASS 13

#define END_DECL 14

#define CLASS_SECTION 15

#define CLASS_SECTION_START 16

#define DOCUMENTATION_SECTION 17

#define PRIVATE_SECTION 18

#define IMPL_SECTION 19

#line 1170 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 126 "lexer.ll"



 // We need a line marking in the front of every line 

#line 1330 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 712 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1550 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 131 "lexer.ll"
{ yyless(0); fprintf(yyout,"#L %d __source__\n",yylineno); }
	YY_BREAK
 // Macro escape



case 2:
YY_RULE_SETUP
#line 137 "lexer.ll"
{ yy_pop_state(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 138 "lexer.ll"
{ ECHO; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 139 "lexer.ll"
{ ECHO; }
	YY_BREAK



case 5:
YY_RULE_SETUP
#line 144 "lexer.ll"
ECHO;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 145 "lexer.ll"
ECHO; yy_pop_state(); 
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 148 "lexer.ll"
{
    yy_push_state(MACROLINE);
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "lexer.ll"
{
    yy_push_state(MACROS);
  }
	YY_BREAK
 // Trouble character  (crashes m4)

case 9:
YY_RULE_SETUP
#line 158 "lexer.ll"
{ fputc('\'',yyout); }
	YY_BREAK
 // Comment handling  

case 10:
YY_RULE_SETUP
#line 164 "lexer.ll"
{
       ECHO; 
       yy_push_state(CCOMMENT);
     }
	YY_BREAK


case 11:
YY_RULE_SETUP
#line 171 "lexer.ll"
fputc('\'',yyout);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 172 "lexer.ll"
ECHO;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 173 "lexer.ll"
ECHO;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 174 "lexer.ll"
ECHO; yy_pop_state();
	YY_BREAK

case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "lexer.ll"
{
       ECHO;
       yy_push_state(CPPCOMMENT);
     }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 184 "lexer.ll"
fputc('\'',yyout);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 185 "lexer.ll"
ECHO;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 186 "lexer.ll"
ECHO; yy_pop_state(); yylineno--;
	YY_BREAK

 // Version control



case 19:
YY_RULE_SETUP
#line 196 "lexer.ll"
{
       gtk_cond_if=true;
       yy_pop_state();
       if ( fabs(atof(yytext)-GtkVersion) < 0.001 )
         {
           gtk_cond_print=true; 
         }
       else
         {
           yy_push_state(GTK_COND_WEED);    
         }
      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 208 "lexer.ll"
yyerror("bad gtk version");
	YY_BREAK



case 21:
YY_RULE_SETUP
#line 213 "lexer.ll"
{yy_pop_state(); yy_push_state(GTK_COND_IF);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 214 "lexer.ll"
{if (!gtk_cond_print) {yy_pop_state(); gtk_cond_print=true;} }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 215 "lexer.ll"
{
       yy_pop_state();  
       gtk_cond_if=false;  
       gtk_cond_print=false;
     }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 220 "lexer.ll"
ECHO;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 221 "lexer.ll"

	YY_BREAK

case 26:
YY_RULE_SETUP
#line 224 "lexer.ll"
{yy_push_state(GTK_COND_IF);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 226 "lexer.ll"
{
    if (!gtk_cond_if)  yyerror("#elsegtk encountered without #ifgtk");
    yy_push_state(GTK_COND_WEED);
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 231 "lexer.ll"
{
    if (!gtk_cond_if)  yyerror("#endgtk encountered without #ifgtk");
    gtk_cond_if=false;
    gtk_cond_print=false;
  }
	YY_BREAK
 // Declarations


case 29:
YY_RULE_SETUP
#line 242 "lexer.ll"
{
       yylval.sval = new string(yytext);
       return SYMNAME;
     }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 246 "lexer.ll"
{printf(yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 247 "lexer.ll"
{yy_pop_state();return '\"';}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 248 "lexer.ll"
{printf(yytext);}
	YY_BREAK


case 33:
YY_RULE_SETUP
#line 252 "lexer.ll"
{printf(yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 253 "lexer.ll"
{yy_pop_state();return '\'';}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 254 "lexer.ll"
{printf(yytext);}
	YY_BREAK


case 36:
YY_RULE_SETUP
#line 258 "lexer.ll"
{yyerror("braces in declaration.");}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 260 "lexer.ll"
{
        ECHO;
        if (!par_depth)
          {
           fprintf(yyout,"`");
          }
        par_depth++;
       }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 269 "lexer.ll"
{
        if (par_depth==1)
          {
           fprintf(yyout,"',`");
          }
        else
          ECHO;
       }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 278 "lexer.ll"
{
       par_depth--;
       if (!par_depth) 
         {yy_pop_state();
          yy_push_state(END_DECL);
          fprintf(yyout,"')");
         }
       else
         ECHO;
     }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 289 "lexer.ll"
{ECHO;}
	YY_BREAK


case 41:
YY_RULE_SETUP
#line 293 "lexer.ll"
{yyerror("braces in declaration.");}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 295 "lexer.ll"
{
       par_depth++;
       return '(';
     }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 300 "lexer.ll"
{
       par_depth--;
       if (!par_depth) 
         {yy_pop_state();
          yy_push_state(END_DECL);
          return ')';
         }
       return ')';
     }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 310 "lexer.ll"
{
       yy_push_state(DECL_STRING);
       return '\"';
     }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 315 "lexer.ll"
{ return CONST; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 316 "lexer.ll"
{ return VOLATILE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 317 "lexer.ll"
{ return STATIC; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 318 "lexer.ll"
{ return FIXMEGTKCONST; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 320 "lexer.ll"
{
      yylval.sval = new string(yytext);
      return TYPESPECIFIER;
     }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 325 "lexer.ll"
{
       return yytext[0];
     }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 329 "lexer.ll"
{
       yylval.sval = new string(yytext);
       return SYMNAME;
     }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 334 "lexer.ll"
{
       yylval.sval = new string(yytext);
       return NUMBER;
     }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 339 "lexer.ll"

	YY_BREAK
case 54:
YY_RULE_SETUP
#line 340 "lexer.ll"
ECHO;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 342 "lexer.ll"
{printf(yytext);}
	YY_BREAK


case 56:
YY_RULE_SETUP
#line 346 "lexer.ll"
{yy_pop_state();}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 347 "lexer.ll"

	YY_BREAK
case 58:
YY_RULE_SETUP
#line 348 "lexer.ll"
{yyerror("declaration missing ;");}
	YY_BREAK

 // Declarations


case 59:
YY_RULE_SETUP
#line 356 "lexer.ll"
{ECHO;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 357 "lexer.ll"
{ECHO; yy_pop_state();}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 358 "lexer.ll"
{ECHO;}
	YY_BREAK


case 62:
YY_RULE_SETUP
#line 362 "lexer.ll"
{ECHO;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 363 "lexer.ll"
{ECHO; yy_pop_state();}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 364 "lexer.ll"
{ECHO;}
	YY_BREAK


case 65:
YY_RULE_SETUP
#line 368 "lexer.ll"
{
        ECHO; 
        yy_push_state(WRAP_CHAR);
      }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 373 "lexer.ll"
{
        ECHO; 
        yy_push_state(WRAP_STRING);
      }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 378 "lexer.ll"
{
        brace_depth++;
        ECHO; 
      }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 383 "lexer.ll"
{
        if (brace_depth) brace_depth--;
        if (!brace_depth)
          {
           yy_pop_state();
           return ENDCLASSDEF;
          }
        ECHO; 
      }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 393 "lexer.ll"
{
       fprintf(yyout,"GTKMM_METHOD_PASS");
       yy_push_state(IN_PASS);
      }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 398 "lexer.ll"
{yy_push_state(IN_DECL);return SIGNALDECL;} 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 399 "lexer.ll"
{yy_push_state(IN_DECL);return WRAPMETHODDECL;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 400 "lexer.ll"
{yy_push_state(IN_DECL);return WRAPMEMBERDECL;} 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 402 "lexer.ll"
{return WRAPCTORCAST;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 403 "lexer.ll"
{return WRAPCTORDEFAULT;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 404 "lexer.ll"
{return WRAPDTOR;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 405 "lexer.ll"
{yyerror("duplicate WRAP_CLASS");}
	YY_BREAK

 // Section specific marks


case 77:
YY_RULE_SETUP
#line 412 "lexer.ll"
{ return '('; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 413 "lexer.ll"
{ return ')'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 414 "lexer.ll"
{ yy_pop_state(); yy_push_state(CLASS_SECTION); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 416 "lexer.ll"
{}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 418 "lexer.ll"
{
       yylval.sval = new string(yytext);
       return SYMNAME;
     }
	YY_BREAK

case 82:
YY_RULE_SETUP
#line 426 "lexer.ll"
{
   yy_push_state(IN_WRAP);
   yy_push_state(IN_DECL);
   par_depth=0;
   brace_depth=1;
   return WRAPCLASSDECL;
  }
	YY_BREAK
 // Whitespace

case 83:
YY_RULE_SETUP
#line 436 "lexer.ll"
{ fputc('\n',yyout); } // kill trailing ws
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 437 "lexer.ll"
{ECHO;}            // rest falls through
	YY_BREAK
 // Handle the various xx_START marks

case 85:
YY_RULE_SETUP
#line 442 "lexer.ll"
{
    yy_push_state(PRIVATE_SECTION);
    return PRIVATESECTION;
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 446 "lexer.ll"
{
    yy_push_state(IMPL_SECTION);
    return IMPLSECTION;
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 450 "lexer.ll"
{
    yy_push_state(DOCUMENTATION_SECTION);
    return DOCSECTION;
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 454 "lexer.ll"
{
    yy_push_state(CLASS_SECTION_START);
    return CLASSSECTION;
  } 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 460 "lexer.ll"
ECHO;
	YY_BREAK
#line 2048 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CCOMMENT):
			case YY_STATE_EOF(CPPCOMMENT):
			case YY_STATE_EOF(MACROS):
			case YY_STATE_EOF(MACROLINE):
			case YY_STATE_EOF(GTK_COND_IF):
			case YY_STATE_EOF(GTK_COND_WEED):
			case YY_STATE_EOF(DECL_CHAR):
			case YY_STATE_EOF(DECL_STRING):
			case YY_STATE_EOF(WRAP_CHAR):
			case YY_STATE_EOF(WRAP_STRING):
			case YY_STATE_EOF(IN_WRAP):
			case YY_STATE_EOF(IN_DECL):
			case YY_STATE_EOF(IN_PASS):
			case YY_STATE_EOF(END_DECL):
			case YY_STATE_EOF(CLASS_SECTION):
			case YY_STATE_EOF(CLASS_SECTION_START):
			case YY_STATE_EOF(DOCUMENTATION_SECTION):
			case YY_STATE_EOF(PRIVATE_SECTION):
			case YY_STATE_EOF(IMPL_SECTION):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 712 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 712 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 711);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 460 "lexer.ll"




void yyerror(char *s)
{
  fprintf(stderr, "error at line %u : %s\n", yylineno, s);
  exit(EXIT_FAILURE);
}

void yywarning(char *s)
{
  fprintf(stderr, "warning at line %u : %s\n", yylineno, s);
}


#ifdef LEXER_TEST
int main( int  argc, char** argv )
  {
    int token;
    if (argc!=3) exit(-1);
    yyin=fopen(argv[1],"r");
    yyout=fopen(argv[2],"w");

    while((token=yylex()) != 0)
      {
       switch (token)
         {
          case CLASSSECTION:
            printf("CLASSSECTION:\n");
            break;
          case DOCSECTION:
            printf("DOCSECTION:\n");
            break;
          case PRIVATESECTION:
            printf("PRIVATESECTION:\n");
            break;
          case IMPLSECTION:
            printf("IMPLSECTION:\n");
            break;

          case WRAPCLASSDECL: 
            printf("WRAPCLASSDECL ");
            break;
          case WRAPMETHODDECL: 
            printf("WRAPMETHODDECL ");
            break;

          case WRAPCTORCAST:
            printf("WRAPCTORCAST\n");
            break;
          case WRAPCTORDEFAULT:
            printf("WRAPCTORDEFAULT\n");
            break;
          case WRAPDTOR:
            printf("WRAPDTOR\n");
            break;

          case SIGNALDECL: 
            printf("SIGNALDECL ");
            break;
          case CONST: 
            printf("CONST ");
            break;
          case FIXMEGTKCONST:
            printf("FIXMEGTKCONST ");
            break;
          case TYPESPECIFIER: 
            printf("TYPE ");
            break;
          case SYMNAME: 
            printf("SYM ");
            break;
          case NUMBER: 
            printf("NUM ");
            break;
          case ')': 
            printf(") ");
            if (!par_depth) printf("\n");
            break; 
          case ENDCLASSDEF:
            printf("ENDCLASS\n");
            break; 
          default:
            if (token<255)
              printf("%c ",token);
            else 
              printf("<<%d>> ",token);
         }
      };
    return 0;
  }
#endif
