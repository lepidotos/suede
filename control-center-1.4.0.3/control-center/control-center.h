/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef control_center_H
#define control_center_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_GNOME_capplet) && !defined(_GNOME_capplet_defined)
#define ORBIT_DECL_GNOME_capplet 1
#define _GNOME_capplet_defined 1
#define GNOME_capplet__free CORBA_Object__free
   typedef CORBA_Object GNOME_capplet;
   extern CORBA_unsigned_long GNOME_capplet__classid;
#if !defined(TC_IMPL_TC_GNOME_capplet_0)
#define TC_IMPL_TC_GNOME_capplet_0 'c'
#define TC_IMPL_TC_GNOME_capplet_1 'o'
#define TC_IMPL_TC_GNOME_capplet_2 'n'
#define TC_IMPL_TC_GNOME_capplet_3 't'
#define TC_IMPL_TC_GNOME_capplet_4 'r'
#define TC_IMPL_TC_GNOME_capplet_5 'o'
#define TC_IMPL_TC_GNOME_capplet_6 'l'
#define TC_IMPL_TC_GNOME_capplet_7 '_'
#define TC_IMPL_TC_GNOME_capplet_8 'c'
#define TC_IMPL_TC_GNOME_capplet_9 'e'
#define TC_IMPL_TC_GNOME_capplet_10 'n'
#define TC_IMPL_TC_GNOME_capplet_11 't'
#define TC_IMPL_TC_GNOME_capplet_12 'e'
#define TC_IMPL_TC_GNOME_capplet_13 'r'
   extern const struct CORBA_TypeCode_struct TC_GNOME_capplet_struct;
#define TC_GNOME_capplet ((CORBA_TypeCode)&TC_GNOME_capplet_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_control_center) && !defined(_GNOME_control_center_defined)
#define ORBIT_DECL_GNOME_control_center 1
#define _GNOME_control_center_defined 1
#define GNOME_control_center__free CORBA_Object__free
   typedef CORBA_Object GNOME_control_center;
   extern CORBA_unsigned_long GNOME_control_center__classid;
#if !defined(TC_IMPL_TC_GNOME_control_center_0)
#define TC_IMPL_TC_GNOME_control_center_0 'c'
#define TC_IMPL_TC_GNOME_control_center_1 'o'
#define TC_IMPL_TC_GNOME_control_center_2 'n'
#define TC_IMPL_TC_GNOME_control_center_3 't'
#define TC_IMPL_TC_GNOME_control_center_4 'r'
#define TC_IMPL_TC_GNOME_control_center_5 'o'
#define TC_IMPL_TC_GNOME_control_center_6 'l'
#define TC_IMPL_TC_GNOME_control_center_7 '_'
#define TC_IMPL_TC_GNOME_control_center_8 'c'
#define TC_IMPL_TC_GNOME_control_center_9 'e'
#define TC_IMPL_TC_GNOME_control_center_10 'n'
#define TC_IMPL_TC_GNOME_control_center_11 't'
#define TC_IMPL_TC_GNOME_control_center_12 'e'
#define TC_IMPL_TC_GNOME_control_center_13 'r'
   extern const struct CORBA_TypeCode_struct TC_GNOME_control_center_struct;
#define TC_GNOME_control_center ((CORBA_TypeCode)&TC_GNOME_control_center_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*try) (PortableServer_Servant _servant, const CORBA_long id,
		   CORBA_Environment * ev);
       CORBA_boolean(*revert) (PortableServer_Servant _servant,
			       const CORBA_long id, CORBA_Environment * ev);
       CORBA_boolean(*ok) (PortableServer_Servant _servant,
			   const CORBA_long id, CORBA_Environment * ev);
      void (*cancel) (PortableServer_Servant _servant, const CORBA_long id,
		      CORBA_Environment * ev);
      void (*help) (PortableServer_Servant _servant, const CORBA_long id,
		    CORBA_Environment * ev);
      void (*new_multi_capplet) (PortableServer_Servant _servant,
				 const CORBA_long id, const CORBA_long newid,
				 const CORBA_unsigned_long newxid,
				 const CORBA_long newcapid,
				 CORBA_Environment * ev);
      void (*page_hidden) (PortableServer_Servant _servant,
			   const CORBA_long id, CORBA_Environment * ev);
      void (*page_shown) (PortableServer_Servant _servant,
			  const CORBA_long id, CORBA_Environment * ev);
   }
   POA_GNOME_capplet__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_capplet__epv *GNOME_capplet_epv;
   }
   POA_GNOME_capplet__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_capplet__vepv *vepv;
   }
   POA_GNOME_capplet;
   extern void POA_GNOME_capplet__init(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   extern void POA_GNOME_capplet__fini(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
       CORBA_long(*register_capplet) (PortableServer_Servant _servant,
				      const CORBA_long id,
				      const GNOME_capplet cap,
				      CORBA_Environment * ev);
      void (*state_changed) (PortableServer_Servant _servant,
			     const CORBA_long id,
			     const CORBA_boolean undoable,
			     CORBA_Environment * ev);
      void (*register_capplet_new) (PortableServer_Servant _servant,
				    const GNOME_capplet cap,
				    const CORBA_char * name,
				    const CORBA_long capid,
				    CORBA_unsigned_long * xid,
				    CORBA_long * newid,
				    CORBA_Environment * ev);
      void (*show_control_center) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
      void (*changes_are_immediate) (PortableServer_Servant _servant,
				     const CORBA_long id,
				     CORBA_Environment * ev);
   }
   POA_GNOME_control_center__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_GNOME_control_center__epv *GNOME_control_center_epv;
   }
   POA_GNOME_control_center__vepv;
   typedef struct
   {
      void *_private;
      POA_GNOME_control_center__vepv *vepv;
   }
   POA_GNOME_control_center;
   extern void POA_GNOME_control_center__init(PortableServer_Servant servant,
					      CORBA_Environment * ev);
   extern void POA_GNOME_control_center__fini(PortableServer_Servant servant,
					      CORBA_Environment * ev);

/** prototypes **/
   void GNOME_capplet_try(GNOME_capplet _obj, const CORBA_long id,
			  CORBA_Environment * ev);
   CORBA_boolean GNOME_capplet_revert(GNOME_capplet _obj, const CORBA_long id,
				      CORBA_Environment * ev);
   CORBA_boolean GNOME_capplet_ok(GNOME_capplet _obj, const CORBA_long id,
				  CORBA_Environment * ev);
   void GNOME_capplet_cancel(GNOME_capplet _obj, const CORBA_long id,
			     CORBA_Environment * ev);
   void GNOME_capplet_help(GNOME_capplet _obj, const CORBA_long id,
			   CORBA_Environment * ev);
   void GNOME_capplet_new_multi_capplet(GNOME_capplet _obj,
					const CORBA_long id,
					const CORBA_long newid,
					const CORBA_unsigned_long newxid,
					const CORBA_long newcapid,
					CORBA_Environment * ev);
   void GNOME_capplet_page_hidden(GNOME_capplet _obj, const CORBA_long id,
				  CORBA_Environment * ev);
   void GNOME_capplet_page_shown(GNOME_capplet _obj, const CORBA_long id,
				 CORBA_Environment * ev);
   CORBA_long GNOME_control_center_register_capplet(GNOME_control_center _obj,
						    const CORBA_long id,
						    const GNOME_capplet cap,
						    CORBA_Environment * ev);
   void GNOME_control_center_state_changed(GNOME_control_center _obj,
					   const CORBA_long id,
					   const CORBA_boolean undoable,
					   CORBA_Environment * ev);
   void GNOME_control_center_register_capplet_new(GNOME_control_center _obj,
						  const GNOME_capplet cap,
						  const CORBA_char * name,
						  const CORBA_long capid,
						  CORBA_unsigned_long * xid,
						  CORBA_long * newid,
						  CORBA_Environment * ev);
   void GNOME_control_center_show_control_center(GNOME_control_center _obj,
						 CORBA_Environment * ev);
   void GNOME_control_center_changes_are_immediate(GNOME_control_center _obj,
						   const CORBA_long id,
						   CORBA_Environment * ev);

   void _ORBIT_skel_GNOME_capplet_try(POA_GNOME_capplet * _ORBIT_servant,
				      GIOPRecvBuffer * _ORBIT_recv_buffer,
				      CORBA_Environment * ev,
				      void (*_impl_try)
				      (PortableServer_Servant _servant,
				       const CORBA_long id,
				       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_revert(POA_GNOME_capplet * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 CORBA_boolean(*_impl_revert)
					 (PortableServer_Servant _servant,
					  const CORBA_long id,
					  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_ok(POA_GNOME_capplet * _ORBIT_servant,
				     GIOPRecvBuffer * _ORBIT_recv_buffer,
				     CORBA_Environment * ev,
				     CORBA_boolean(*_impl_ok)
				     (PortableServer_Servant _servant,
				      const CORBA_long id,
				      CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_cancel(POA_GNOME_capplet * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_cancel)
					 (PortableServer_Servant _servant,
					  const CORBA_long id,
					  CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_help(POA_GNOME_capplet * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_help)
				       (PortableServer_Servant _servant,
					const CORBA_long id,
					CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_new_multi_capplet(POA_GNOME_capplet *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_new_multi_capplet)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_long id,
						     const CORBA_long newid,
						     const CORBA_unsigned_long
						     newxid,
						     const CORBA_long
						     newcapid,
						     CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_page_hidden(POA_GNOME_capplet *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_page_hidden)
					      (PortableServer_Servant
					       _servant, const CORBA_long id,
					       CORBA_Environment * ev));
   void _ORBIT_skel_GNOME_capplet_page_shown(POA_GNOME_capplet *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_page_shown)
					     (PortableServer_Servant _servant,
					      const CORBA_long id,
					      CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_control_center_register_capplet
      (POA_GNOME_control_center * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       CORBA_long(*_impl_register_capplet) (PortableServer_Servant _servant,
					    const CORBA_long id,
					    const GNOME_capplet cap,
					    CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_control_center_state_changed(POA_GNOME_control_center
						     * _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_state_changed)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_long id,
						      const CORBA_boolean
						      undoable,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_GNOME_control_center_register_capplet_new
      (POA_GNOME_control_center * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_register_capplet_new) (PortableServer_Servant _servant,
					   const GNOME_capplet cap,
					   const CORBA_char * name,
					   const CORBA_long capid,
					   CORBA_unsigned_long * xid,
					   CORBA_long * newid,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_control_center_show_control_center
      (POA_GNOME_control_center * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_show_control_center) (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void
      _ORBIT_skel_GNOME_control_center_changes_are_immediate
      (POA_GNOME_control_center * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_changes_are_immediate) (PortableServer_Servant _servant,
					    const CORBA_long id,
					    CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
