2001-10-14  John Harper  <jsh@unfactored.org>

	* version 1.0.1

2001-09-20  John Harper  <jsh@unfactored.org>

	* sawfish/wm/workspace.jl (select-workspace): fixed bug in last
	change, don't keep the server grabbed for so long

2001-09-19  John Harper  <jsh@unfactored.org>

	Fixed bug of window flicker when switching workspaces:

	* sawfish/wm/workspace.jl (select-workspace): don't remove all
	windows not in the new space, then add all windows in the new
	space. Instead add all windows in the new space in
	top-to-bottom order, then remove unneeded windows
	bottom-to-top. This always generates the minimum exposed area

2001-09-17  John Harper  <jsh@unfactored.org>

	* sawfish/wm/commands.jl (apply-command-keys): fixed type of
	'dommand-doc instead of 'command-doc. Spotted by David Bustos
	<bustos@its.caltech.edu>

2001-09-14  John Harper  <jsh@pixelslut.com>

	* sawfish/wm.jl: when possible, disable error reporting on
	stdio streams

2001-09-13  John Harper  <jsh@pixelslut.com>

	Fixed bug of nautilus desktop window covering panel:

	* sawfish/wm/state/wm-spec.jl (desktop-layer, dock-layer): set
	to -/+ 4 respectively, not -/+ 1(which are the actual values
	used in the GNOME 1 spec)

2001-09-02  John Harper  <jsh@pixelslut.com>

	Fixed 6693 (restarting sawfish with a maximized window and the
	gnome panel will make the maximized window too big):

	* ~/src/sawfish/lisp/sawfish/wm/state/maximize.jl
	(property-notify): don't install check-if-maximizable into the
	add-window-hook immediately. Instead use
	after-initialization-hook to run c-i-m over all windows, then
	install it as before

2001-08-31  John Harper  <jsh@pixelslut.com>

	* ~/src/sawfish/lisp/sawfish/wm/util/stacking.jl
	(maybe-raise-window, maybe-lower-window): when adding server
	timestamp to the client message, subtract one from the actual
	last seen timestamp. Done for same reason as in windows.c

	* ~/src/sawfish/lisp/sawfish/wm/util/display-window.jl
	(display-window-without-focusing): new (private) keyword
	parameter WILL-REFOCUS. Pass this value along to
	select-workspace

	(display-window): pass WILL-REFOCUS as true when we'll be
	focusing a window afterwards (helps avoid some race conditions)

2001-08-24  John Harper  <jsh@pixelslut.com>

	* sawfish/wm/menus.jl: ensure menu-process is nil after being
	killed. Also, never try to kill it unless it's non-nil

2001-08-23  John Harper  <jsh@pixelslut.com>

	* sawfish/wm/commands.jl (no-operation): new command. Fixes
	8463

	* sawfish/wm/state/configure.jl (configure-request-handler):
	don't allow the window to be moved or resized when it's
	maximized. Fixes 8410

	* sawfish/wm/state/maximize.jl (window-locked-vertically-p,
	window-locked-horizontally-p): new functions

	* sawfish/wm/placement.jl (place-window-randomly): removed
	bogus middle cases from from x and y position calculations.
	Fixes 8415

	* sawfish/wm/ext/match-window.jl
	(match-window-grab-x-property): take a symbol with the actual
	name of the X property, not one of the strings in the
	match-window-x-properties list

Sat Aug 18 16:32:37 2001  Owen Taylor  <otaylor@redhat.com>

	* sawfish/wm/windows.jl: Offset windows properly whose gravity
	point is centered horizontally or vertically.

2001-07-23  John Harper  <jsh@pixelslut.com>

	* sawfish/wm/state/gnome.jl (gnome-event-proxyer): fixed bug
	caused by Click1 events now printing as Click. This caused only
	button-release events to be proxied

2001-07-02  John Harper  <jsh@pixelslut.com>

	* version 0.99

2001-06-18  John Harper  <jsh@pixelslut.com>

	* sawfish/wm/menus.jl (menu-program-stays-running): by popular
	demand this now defaults to `t'

	* sawfish/wm/windows.jl (focus-desktop): new command, focuses
	the desktop window if one exists

2001-06-04  John Harper  <jsh@pixelslut.com>

	* sawfish/wm/commands/move-resize.jl (do-move-resize): move the
	call to draw-window-outline to immediately before entering the
	recursive event loop (avoids drawing and not erasing it on a
	non-viable drag)

2001-05-04  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/gnome.jl (gnome-event-proxyer): support
	`OffN' events
	* sawfish/wm/util/decode-events.jl: ditto

	* sawfish/wm/keymaps.jl (title-keymap): bind
	toggle-window-shaded to an X-Off2 binding instead of X-Click2

2001-04-22  John Harper  <jsh@eazel.com>

	Fixed bug 4250 (pointer can confuse focus follows mouse when
	cycling):

	* sawfish/wm/focus.jl (focus-ignore-pointer-events): new
	variable. When true, pointer in/out events have no effect on
	the input focus

	* sawfish/wm/commands/x-cycle.jl (cycle-begin): while cycling
	set focus-ignore-pointer-events to true. Don't restore it to
	false until 100ms after the cycling finishes (so that any
	pointer out events generated by, e.g., removing the message
	window are ignored)

2001-04-22  John Harper  <jsh@eazel.com>

	* sawfish/wm/viewport.jl (set-viewport): rewrote the code that
	changes viewports. It now tries to order the window moves in
	such a way as to minimize redundant pointer in/out and expose
	events. The ordering algorithm was suggested by Jan Kasprzak
	<kas@informatics.muni.cz> last September

2001-04-20  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/gnome.jl (gnome-property-handler): monitor
	_WIN_AREA as well as _WIN_WORKSPACE. This definitely
	fundamentally flawed, but can be useful in some cases..

	Extra i18n work. Adapted from a patch by Vlad Harchev
	<hvv@hippo.ru>

	* sawfish/wm.jl (i18n-defvar, i18n-define): new macros, expand
	to a `defvar' or `define'. Just used to mark variables that
	need special attention when extracting translatable strings

	* sawfish/wm/ext/match-window.jl: import sawfish.wm instead of
	a bunch of specific modules, so we get i18n-defvar. Then use it
	when declaring match-window-x-properties and
	match-window-properties

2001-04-17  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/beos-window-menu.jl (make-label): surround the
	name in parentheses if the window is on a different viewport as
	well as if it's on a different workspace

2001-04-12  John Harper  <jsh@eazel.com>

	* sawfish/wm/frames.jl (apply-frame-style,
	apply-frame-style-and-save): new functions. These provide a
	future-proof interface for programmatically selecting themes

2001-04-11  John Harper  <jsh@eazel.com>

	Committed some work-in-progress changes. The end goal is to
	store customized keymaps as deltas from their default value.
	That doesn't happen yet, but these changes will make it easier.

	Work to record default values of all custom options:

	* sawfish/wm/custom.jl (variable-default-value,
	variable-declared-p): new functions

	(custom-declare-variable): new keyword parameter DEFAULT-VALUE.

	(defcustom): the expansion now passes the DEFAULT-VALUE to
	custom-declare-variable

	* sawfish/wm/keymaps.jl: Rewrote all keymap initializations to
	use a single form instead of side-effecting the keymap after
	it's created. This lets the default value be known

	(custom-set-keymap): use an ugly hack to prevent the default
	value being destructively modified


	Added an extra deserialize/serialize pair when applying values
	from the UI. This is so that the customize-set function can do
	some kind of transformation at some point in the future..
	
	* sawfish/wm/custom.jl (make-custom-form): now requires an
	unserialized VALUE. It serializes it before creating the form

	* sawfish/wm/util/nokogiri.jl (nokogiri-apply-changes):
	deserialize the value from the UI before passing it to
	customize-set


	* sawfish/wm/util/keymap-diff.jl (diff-keymaps, patch-keymap):
	new file. Experimental code for keymap abuse

2001-04-11  John Harper  <jsh@eazel.com>

	Fixed bug 8047 (SOLARIS: Setting Gnomecc Workspaces spin button
	to decrease no of workspaces fails.):

	* sawfish/wm/workspace.jl: set
	{first,last}-interesting-workspace to nil when the workspace
	configuration changes

	this isn't a great fix, but imho it's better than the current
	behaviour

2001-04-08  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/transient.jl (transient-frame-type):
	s/shaped/shaded/ to fix the bug where the decorate-transients
	option doesn't work for shaded windows

2001-04-05  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/tooltips.jl (command-info): use the
	`command-documentation' function to get doc strings, not the
	`documentation' function (which no longer works)

2001-04-02  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/window-history.jl: added special save and
	restore code for the `sticky' state (handles _both_ sticky
	states)

2001-03-24  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/maximize.jl (maximize-window,
	maximize-find-workarea): some bug fixes for multi-headed
	displays. Adapted from a patch by Florent Guillaume
	<florent.guillaume@mail.com>

2001-03-20  John Harper  <jsh@eazel.com>

	Fixed bug 6971 (cancelling resizing a maximized window loses
	the maximimized status):

	* sawfish/wm/commands/move-resize.jl (do-move-resize): when
	calling after-move-hook or after-resize-hook pass a SUCCESSFUL
	keyword arg, whose value is true if the move or resize was
	successfully completed

	* sawfish/wm/state/maximize.jl (maximize-discard-move,
	maximize-discard-resize): these now have a SUCCESSFUL keyword
	parameter, they only do the discarding if it's true

2001-03-17  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/tooltips.jl (tooltips-delay,
	tooltips-timeout-delay): minimum allowed value is now one not
	zero (zero timeouts don't work)

2001-03-14  John Harper  <jsh@eazel.com>

	* version 0.38

2001-03-09  John Harper  <jsh@eazel.com>

	* sawfish/wm/commands/grow-pack.jl: applied patch from Kai
	Groﬂjohann <Kai.Grossjohann@CS.Uni-Dortmund.DE>:

	    `It makes growing work even for windows which have a
	    height/width increment.

	    With the old code, repeat-growing xterms didn't always work
	    right, since the old code only added 1 to the height/width,
	    and that was often not enough to overlap the next window
	    edge.  Now I'm adding height/width increment, and
	    preliminary testing indicates that this is working well.'

2001-03-06  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl (scan-windows-for-bugs): disabled the
	code to beep and print warning messages if the click to focus
	keymap gets lost

	* sawfish/wm/state/gnome.jl (gnome-property-handler): fixed to
	work better when the window is on multiple workspaces

	* sawfish/wm/state/maximize.jl: don't add maximize-discard-move
	to the after-move-hook any longer

2001-02-28  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/gnome.jl (gnome-property-handler): new
	function, added to property-notify-hook. Currently just watches
	for _WIN_WORKSPACE changes, and responds by moving the window

	* sawfish/wm/workspace.jl
	(send-window-to-workspace-from-first): don't do any copying and
	moving if the FROM and TO workspaces are the same

	* sawfish/wm/commands/move-resize.jl (move-cursor-shape,
	resize-cursor-shape): default to the value of the
	default-cursor function

	* sawfish/wm/frames.jl (cursor-for-frame-part): don't use a
	special cursor in titles

2001-02-24  John Harper  <jsh@eazel.com>

	* sawfish/wm/commands.jl (command-sequence): define
	`kill-client' command (using the x-kill-client function)

	Fixed off-by-one error when placing windows flush with the
	right or bottom of the screen

	* sawfish/wm/placement/smart.jl (sp-make-grid): don't subtract
	one from screen-width or screen-height
	(sp-prune-points): allow (<= X RANGE) instead of (< X RANGE)

2001-02-23  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/iconify.jl (window-sticky-p/workspace,
	make-window-sticky/workspace, make-window-unsticky/workspace,
	window-sticky-p/viewport, make-window-sticky/viewport,
	make-window-unsticky/viewport): new functions, used to
	implement the combined sticky functions. They're also exported

	* sawfish/wm/state/wm-spec.jl: uses the new /workspace or
	/viewport sticky functions throughout

	Fixed typo of _NET_WM_STATE_MAXIMIZED_HORIZ instead of HORZ

	Add update-client-list-hints to after-restacking-hook instead
	of workspace-state-change-hook

	(update-client-list-hints): added keyword arg
	ONLY-STACKING-LIST; reverse the result of the stacking-order
	function before storing it in the _NET_CLIENT_LIST_STACKING
	property

	(client-message-handler): use the display-window function to
	implement the _NET_ACTIVE_WINDOW request. Added a
	_NET_WM_DESKTOP handler - handles making the window sticky or
	changing its workspace
	
2001-02-22  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement.jl (place-window): don't try to place
	windows with the fixed-position property

2001-02-14  John Harper  <jsh@eazel.com>

	* version 0.37.2

	* sawfish/wm/commands/move-resize.jl (viable-move-resize-p):
	doh! fixed this properly now, was using the wrong variable to
	get the edge list

	* version 0.37.1

	* sawfish/wm/commands/move-resize.jl (viable-move-resize-p):
	fixed stupid typo in `region' and `border' modes (using
	direction instead of edge list)

2001-02-13  John Harper  <jsh@eazel.com>

	* version 0.37

	* sawfish/wm/state/gnome.jl (gnome-window-class-hacks): 
	* sawfish/wm/state/wm-spec.jl (wm-class-hacks): 
	Look for `Panel/panel_window' instead of `Panel/panel'. This
	may not work well immediately, but it will with the forthcoming
	gnome-core release

	* sawfish/wm/ext/window-history.jl: new command line option
	`--window-history-file=FILE' to specify where to load and store
	the history information

	* sawfish/wm/user.jl (rc-files): new internal variable - the
	list of rc files to try, currently ~/.sawfishrc, ~/.sawfish/rc
	and ~/.sawmillrc

2001-02-10  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/match-window.jl
	(match-window-grab-x-property): enclose grabbed regexp in
	`^...$' so that it only matches the exact string

2001-02-07  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/window-order.jl (on-viewport-change): only
	call window-order-focus-most-recent if in click-to-focus mode,
	not when not in enter-exit mode

2001-02-06  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/match-window.jl (match-window-x-properties):
	added WM_WINDOW_ROLE to list of properties

	* sawfish/wm/state/transient.jl (transient-unmap-window): in
	sloppy focus mode avoid focusing on the desktop window just
	because the pointer is over it

2001-02-05  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/recolor-image.jl (make-lut): subtract
	mid-point from 255 not 256. Pointed out by Simon Budig
	<Simon.Budig@unix-ag.org>

2001-01-28  John Harper  <jsh@eazel.com>

	Work to fix bug 5758 (session management doesn't work in `don't
	automatically save' mode).

	Most of the credit goes to Timo Korvola
	<tkorvola@e.math.helsinki.fi> for working out what was wrong
	and providing the initial implementation

	* sawfish/wm/session/init.jl: lots of rewriting. The end result
	is that we never overwrite session files when saving data.
	Instead we use a unique prefix (the time in us in base 36) to
	the client id. (This is how XSM is supposed to work)

	* sawfish/wm/session/save.jl, sawfish/wm/session/load.jl
	(save-session, load-session): these functions now accept a
	filename argument instead of the client id

	* sawfish/wm.jl: check for --sm-prefix option, and pass it to
	sm-init when found

2001-01-27  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/configure.jl
	(configure-ignore-stacking-requests): new option. Controls
	whether stacking requests from windows are honoured or not. The
	window property `ignore-stacking-requests' has the same effect

	[ adapted from Matt Tucker <tuck@whistlingfish.net> ]

	* sawfish/wm/ext/match-window.jl (match-window-properties):
	added ignore-stacking-requests to the `Other' section

2001-01-25  John Harper  <jsh@eazel.com>

	Fixed bug 5984 (locked-size-when-maximized is confusing):	

	* sawfish/wm/frames.jl (frame-part-classes): use calls to
	define-frame-class to populate this alist

	(cursor-for-frame-part): new function, creates functions to
	return the correct cursor. Uses frame-part-movable-p to see
	which cursor should be displayed 

	* sawfish/wm/state/maximize.jl (frame-part-movable-p): new
	function

	* sawfish/wm/state/maximize.jl (move-lock-when-maximized):
	moved this option here (from sawfish.wm.commands.move-resize)

	* sawfish/wm/commands/move-resize.jl
	(delete-unmovable-directions, delete-unresizable-edges): new
	functions

	(viable-move-resize-p): new function, tests if it's worth
	starting a move/resize (only if there's something that can be
	moved or resized)

2001-01-26  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement.jl (place-window-randomly): fixed bug
	where windows could be left off-screen. Problem was due to
	confusing right or bottom edges of the workarea with its width
	or height

2001-01-25  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/wm-spec.jl (init): the change to restore the
	selected desktop on restart introduced a bug, so I've changed
	it to not reselect the desktop until after the initialization
	process has finished (using the after-initialization-hook)

	* sawfish/wm/util/recolor-image.jl (make-image-recolorer*): new
	function, can recolour multiple channels at once (uses a common
	zero-channel, recolours based on whichever channel is non-zero
	for each pixel)

	(make-image-recolorer): now defined in terms of
	make-image-recolorer*

2001-01-23  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/wm-spec.jl (init): check for an old value of
	_NET_CURRENT_DESKTOP before overwriting it. If set, switch to
	that desktop. This fixes the annoying `desktop always reset to
	zero on restart' bug

2001-01-22  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/auto-raise.jl (rw-on-focus, rw-out-focus):
	reverted the test for (eq mode 'normal). (See 2000-11-02 entry
	for reason.) This causes worse problems than it solves (e.g.
	switch desktops, M-TAB to a new window, but the old window gets
	raised)

2001-01-20  John Harper  <jsh@eazel.com>

	* version 0.36

2001-01-19  John Harper  <jsh@eazel.com>

	* sawfish/wm/user.jl (fallback-frame-style): changed this to
	`Crux' theme

	* sawfish/wm/frames.jl (frame-part-classes): added shade-button
	frame part class
	* sawfish/wm/keymaps.jl (shade-button-keymap): new keymap

	* sawfish/wm/util/recolor-image.jl (make-image-recolorer): new
	module, exports this function. A factory for creating functions
	that recolour images based on a white -> <color> -> black
	gradient. Abstracted this code out of the new `Crux' theme

	* sawfish/wm/gaol.jl (fully-safe-features): added
	sawfish.wm.util.recolor-image

2001-01-18  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/hide-dialogs.jl: new module, hide dialog
	windows in groups that don't have the focus. Currently there's
	no way to enable this except by loading it by hand..

2001-01-15  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/gtkrc.jl (gtkrc-handle-client-msg): removed
	leftover debugging output

2001-01-08  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/gtkrc.jl (reload-gaol): new function, sets
	all the variables that are loaded into the gaol (since they
	don't update themselves automatically, doh!). Fixes bug 5505

	* sawfish/wm/commands/groups.jl (delete-group): added special
	case so that desktop windows don't get deleted

2001-01-07  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/audio-events.jl (audio-events-alist): change
	"" doc string to nil (patch from Christian Marillat
	<marillat.christian@wanadoo.fr>)

2001-01-06  John Harper  <jsh@eazel.com>

	* sawfish/wm/commands/groups.jl (delete-group): new command

	* sawfish/wm/keymaps.jl (close-button-keymap): bind
	`delete-group' to `S-Button1-Off'

2001-01-05  John Harper  <jsh@eazel.com>

	* version 0.35

2001-01-05  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/shading.jl (shading-add-window): don't need
	to call shade-window, just set hide-client property when
	necessary

2001-01-04  John Harper  <jsh@eazel.com>

	* sawfish/wm/workspace.jl: don't include hide-client in the
	call to add-swapped-properties

	* sawfish/wm/state/shading.jl (shading-after-swap-in): added to
	the after-workspace-swap-in-hook, updates the hide-client
	property to match the shaded property and reframes the window
	if necessary

	* sawfish/wm/swapper.jl (workspace-swap-in): before exiting,
	run after-workspace-swap-in-hook with two args (W SPACE)

	[ Last three changes fix bug 5179 (shaded state is fixed for
	all workspaces) ]

	* sawfish/wm/state/transient.jl (focus-windows-when-mapped):
	defaults to t; changed doc string to reflect the earlier change
	in semantics

	* sawfish/wm/placement.jl (place-window-mode): set to
	`top-left' by default now

	* sawfish/wm/placement/top-left.jl (windows-around): ignore
	windows that have yet to be placed

	* sawfish/wm/focus.jl (focus-click): before exiting, reinstall
	the click-to-focus-map if the window isn't actually focused

2001-01-03  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/transient.jl (transient-map-window): altered
	semantics of focus-windows-when-mapped option to only apply to
	non-transient windows (or transient windows whose parent is the
	root window)

	* sawfish/wm/user.jl: load sawfish.wm.state.wm-spec by default
	(instead of only if KDE2 is being used)

2000-12-31  John Harper  <jsh@eazel.com>

	* sawfish/wm/windows.jl (window-supports-wm-protocol-p): new
	function, saves consing up a list just to call memq on it
	(delete-window-safely): use the new function

	* sawfish/wm/util/ping.jl (window-supports-ping-p): use
	window-supports-wm-protocol-p

	* sawfish/wm/util/stacking.jl (maybe-raise-window,
	maybe-lower-window): new functions. These introduce two new
	WM_PROTOCOLS: _SAWFISH_WM_RAISE_WINDOW and
	_SAWFISH_WM_LOWER_WINDOW.

	These are similar to WM_TAKE_FOCUS, in that if the window
	supports the protocol, it's up to it whether or not it raises
	(or lowers) the window in question. These functions should only
	be used where the user hasn't explicitly requested the
	restacking

	An example usage is an application that doesn't want its window
	to be raised due to a button-press event that initiates a drag
	operation

	* sawfish/wm/ext/auto-raise.jl, sawfish/wm/util/stacking.jl:
	use the maybe-raise-window function instead of raise-window*

2000-12-30  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement/off-center.jl: another new placement
	mode. This one places windows in the centre of the screen.
	However if doing so would fully cover another window, then try
	another position roughly in the centre

2000-12-22  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement/smart.jl (sp-cost-components): removed
	the pointer and focus locality components by default

	* sawfish/wm/placement/top-left.jl: new placement mode,
	staggers from top-left, filling along the diagonal. Supports
	resizing windows to fit, but this is currently disabled

	* sawfish/wm/menus.jl (menus-include-shortcuts): this option
	defaults to nil

	* sawfish/wm/commands/grow-pack.jl (gp-avoid-windows): ignore
	iconified windows

2000-12-20  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/transient.jl (transient-of-p,
	indirect-transient-of-p): added keyword arg ALLOW-ROOT which
	enables the (= transient-for ROOT) checking code

	(transient-map-window): pass `#:allow-root t' to transient-of-p

	* sawfish/wm/placement.jl (place-window-centered-on-parent): if
	no single known parent, check if the currently focused window
	is in the same group as the window being placed. If so, take it
	as the implicit parent while placing

	* sawfish/wm/state/transient.jl (transient-of-p): disabled the
	code that checks if (= transient-for ROOT), it causes havoc in
	too many places

2000-12-19  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/iconify.jl (iconify-window,
	uniconify-window): support `group' and `transients'
	[un]iconification modes better. Don't use a recursive method,
	instead identify all the windows to be changed, then do
	everything in one go. For `transients' mode, only change state
	of shared transients if they [will] have no visible parents
	left

	* sawfish/wm/commands/groups.jl (iconify-group,
	uniconify-group, iconify-transient-group,
	uniconify-transient-group): use [un]iconify-window to implement
	these (by temporarily binding the necessary special variables)

	[ Last two changes fix #5252 ]

	* sawfish/wm/util/keymap.jl (where-is,
	make-memoizing-where-is): use substitute-wm-modifier to avoid
	showing W- in results

	* sawfish/wm/util/decode-events.jl (substitute-wm-modifier):
	new function, given an event, replaces the W- bit by whatever
	it's actually assigned to

	* sawfish/wm/state/gnome.jl (gnome-client-message-handler):
	handle a _WIN_HINTS client message type, format is similar to
	_WIN_STATE message

	* sawfish/wm/state/gnome.jl (gnome-window-class-hacks): removed
	the hardcoding of the `avoid' property for the panel. (George
	Lebl asked me to)

2000-12-18  John Harper  <jsh@eazel.com>

	* sawfish/wm/menus.jl (menus-include-shortcuts): new option,
	when set, include `shortcut' attributes in created menu
	descriptions. Adapted from Unai Uribarri <unaiur@telecable.es>

	* sawfish/wm/util/keymap.jl (make-memoizing-where-is): new
	function, when called repeatedly has better time complexity
	than multiple calls to where-is (since it builds a temporary
	hash table)

2000-12-10  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/stacking.jl (raise-window*, lower-window*,
	raise-lower-window*): added doc strings

	* sawfish/wm/gaol.jl (safe-functions): added font-ascent and
	font-descent

2000-12-09  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/display-wininfo.jl (event-handler): removed
	the code to fade iconified windows

	* sawfish/wm/commands/x-cycle.jl (cycle-warp-pointer): this is
	no longer in the `expert' user-level

2000-12-08  John Harper  <jsh@eazel.com>

	Random work to support KDE2 better:

	* sawfish/wm/user.jl: if there's a property on the root window
	matching `^_KDE_', load sawfish.wm.state.wm-spec module

	* sawfish/wm/state/wm-spec.jl: bug-fixes and hacks to make KDE2
	support a lot better

	* sawfish/wm/state/transient.jl (indirect-transient-of-p): test
	for windows that set WM_TRANSIENT_FOR to themselves! (broken
	KDE apps)

2000-12-06  John Harper  <jsh@eazel.com>

	* sawfish/wm/user.jl: use safe-load when loading site-init and
	rep-defaults files

	* sawfish/wm/commands/viewport-extras.jl: new module, includes
	some viewport navigation commands sent to the mailing list by
	Dams NadÈ <anvil@amin.unice.fr>

	* sawfish/wm/util/groups.jl (persistent-group-ids): use `nil'
	instead of `""' to denote a null doc string
	* sawfish/wm/workspace.jl (workspace-names): ditto

	* sawfish/wm/state/iconify.jl (window-iconifiable-p): new
	function, the old logic plus it checks for `never-iconify'
	property

	* sawfish/wm/state/maximize.jl (window-maximizable-p): check
	for `never-maximize' property

	* sawfish/wm/state/wm-spec.jl, sawfish/wm/state/gnome.jl: set
	never-iconify and never-maximize properties of panel/gmc-icon
	windows

	* sawfish/wm/menus.jl (window-ops-menu): set `insensitive'
	properties of iconify and maximize menus when appropriate

2000-12-04  John Harper  <jsh@eazel.com>

	* sawfish/wm/frames.jl (frame-style-directory): check if the
	directory exists before returning the result. Fixes #4902

	* version 0.34

	* sawfish/wm/keymaps.jl (wm-modifier-value): moved to the
	`novice' user-level

2000-11-28  John Harper  <jsh@eazel.com>

	* sawfish/wm/custom-defaults.jl: changed some bindings to use
	`W-' modifier

	* sawfish/wm/util/decode-events.jl (decode-modifier,
	encode-modifier): new functions
	(should-grab-button-event-p): groks the `W-' modifier

	* sawfish/wm/ext/match-window.jl (match-window-properties):
	removed ignore-when-cycling property (didn't I already do
	this?)

	* sawfish/wm/keymaps.jl: changed default bindings to use the
	new `W-' modifier, the customizable `WM' modifier

	* sawfish/wm/keymaps.jl (wm-modifier-value): new option. Has
	type `modifier-list'. Added [de]serialization for this type

	* sawfish/wm/customize.jl (customize-read-user-file): fixed for
	new format of custom-default-file

	* sawfish/wm/util/ping.jl (ping-window): fixed bug whereby
	CALLBACK would get called twice if the ping is ponged before
	the timer fires

	* sawfish/wm/state/gnome.jl (gnome-window-class-hacks): broke
	out the WM_CLASS based hacks for parts of the GNOME desktop.
	Also made panel windows and gmc icons unplacable (otherwise, if
	the ignore-program-position option is set the windows get
	placed by the wm, even though they really shouldn't be)

	* sawfish/wm/state/wm-spec.jl: added the unplacable panel hack
	here also

2000-11-27  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/wm-spec.jl: removed the evil hardcoded list
	of properties in update-client-state by a `get' method in each
	state function. Also added a PSEUDO keyword arg to
	define-wm-spec-window-state for properties that should not be
	set in the _NET_WM_STATE property

	* sawfish/wm/ext/window-history.jl: save and restore
	`maximized' state of windows. Fixes #4790

	* sawfish/wm/ext/window-history.jl (window-history-apply): when
	setting properties, check for `window-history-setter'
	properties - a function to call to set the property

	* sawfish/wm/ext/match-window.jl: added `maximized' pseudo
	property. Fixes #4808

	* sawfish/wm/util/display-wininfo.jl: new module, exports a
	single function to display a message with some user-relevant
	details of the window (currently icon and name)

	* sawfish/wm/commands/x-cycle.jl (cycle-show-window-icons): new
	option
	(cycle-display-message): if cycle-show-window-icons is set,
	use display-wininfo function
	(remove-message): new function

	The above two changes from a patch by Unai Uribarri
	<unaiur@telecable.es>, with minor changes. Fixes #4265

	* sawfish/wm/frames.jl, sawfish/wm/workspace.jl,
	sawfish/wm/ext/audio-events.jl, sawfish/wm/util/groups.jl:
	changed flags of some widgets

	* sawfish/wm/swapper.jl, sawfish/wm/stacking.jl,
	sawfish/wm/menus.jl, sawfish/wm/commands/x-cycle.jl,
	sawfish/wm/ext/tooltips.jl, sawfish/wm/ext/match-window.jl,
	sawfish/wm/ext/edge-flip.jl, sawfish/wm/gnome/match-window.jl, 
	sawfish/wm/placement/smart.jl, sawfish/wm/state/maximize.jl,
	sawfish/wm/theming/make-theme.jl, sawfish/wm/util/gtkrc.jl:
	Added some `(unused ...)' declarations to turn off some
	meaningless warnings (needs a recent cvs librep for this to
	actually work)

2000-11-26  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/ping.jl: new module, implements the
	_NET_WM_PING protocol of the new window manager spec. Exports
	functions `window-supports-ping-p' and `ping-window'. (This
	code is totally untested)

	* sawfish/wm/state/wm-spec.jl: added code to monitor
	_NET_WM_ICON_GEOMETRY; when present the `icon-position' window
	property is set from its value. Fixes #4245

2000-11-21  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl: now that unfocusable windows don't
	contain the click-to-focus keymap, use the state-change-hook to
	be notified when the never-focus state changes

	* sawfish/wm/workspace.jl, sawfish/wm/ext/audio-events.jl,
	sawfish/wm/util/groups.jl: put titles of some list widgets into
	the actual title of the list, not above the list widget

	* sawfish/wm/ext/audio-events.jl (audio-events-alist): now in
	`intermediate' user-level

2000-11-20  John Harper  <jsh@eazel.com>

	* sawfish/wm/stacking.jl (raise-window, lower-window,
	stack-window-above, stack-window-below, restack-window,
	window-on-top-p): use stacking-order instead of
	stacked-mapping-order. Otherwise strange things can happen when
	unmapped windows are present (e.g. fixes #4824 where raising a
	nautilus window with (eq user-raise-type 'groups) also raises
	the desktop window..)

	* sawfish/wm/viewport.jl (move-window-to-current-viewport,
	set-window-viewport): don't move sticky-viewport windows

	* sawfish/wm/animation/outline.jl (make-outline-animator): new
	exported function. Fixes #4816

	* sawfish/wm/focus.jl: removed all code to support the
	focus-click-through option on non-client windows (mfleming
	convinced me it was a bad idea, and it fixes a hard bug)

	* sawfish/wm/focus.jl (focus-within-click-event): new fluid,
	set to t when calling a command from within the click-to-focus
	event

	* sawfish/wm/commands/raise-commands.jl (replay-pointer):
	function to do the replaying, dependent on whether or not we're
	in the click-to-focus event or not

	* sawfish/wm/state/wm-spec.jl: support SKIP_PAGER state (linked
	to the `window-list-skip' property)

	(honour-client-state): set `no-history' property of panels

	(honour-client-state): fixed typo of _NET_WM_WINDOW_STATE
	instead of _NET_WM_STATE

	(update-workspace-hints): for sticky windows, set
	_NET_WM_DESKTOP to #xffffffff instead of deleting it

	(define-wm-spec-window-state): records the names of all
	registered states in `supported-states' variable
	(supported-state-p): new function

	(client-message-handler): deleted _NET_INSERT_DESKTOP and
	_NET_DELETE_DESKTOP messages, they're not in the spec anymore?
	Fixed paren bug in _NET_ACTIVE_WINDOW message handler

2000-11-16  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state): set
	the `no-history' property of panel windows

	* sawfish/wm/custom.jl: new defcustom option `:widget-flags'

	* sawfish/wm/util/nokogiri.jl (nokogiri-report-slot): pass
	widget-flags across

	* sawfish/wm/workspace.jl, sawfish/wm/frames.jl,
	sawfish/wm/ext/audio-events.jl, sawfish/wm/util/groups.jl:
	marked some list options with `(expand framed)' flags

	* sawfish/wm/state/mwm.jl (mwm-add-window): support the
	min/max/close options of the mwm function hints

	* sawfish/wm/state/iconify.jl: don't add minimize to the
	toggles menu

	* sawfish/wm/menus.jl: simplified the window-ops-menu, just
	have minimize/maximize/close at the top of the menu, with other
	stuff below

	* sawfish/wm/menus.jl (menu-preprocessor): labels can now be
	functions, they will be called (with any menu-args) to get the
	actual string

	* sawfish/wm/frames.jl (after-setting-default-frame): used as
	:after-set function of default-frame-style. Checks that the new
	frame style is available, signals an error otherwise

	* sawfish/wm/custom.jl (define-custom-setter, custom-setter):
	store these in a dedicated hash table

	(custom-set-symbol): function to catch exceptions while
	committing custom changes, then revert back to the old value if
	necessary (resignalling the exception)

	(custom-set-variable, custom-set-typed-variable): use
	custom-set-symbol instead of custom-set directly

	(custom-load): new function, parses and executes a custom file
	by hand
	(custom-eval): don't just call eval, deref the function and
	apply it to the arguments

	(custom-load-user-file): use custom-load instead of load

	* sawfish/wm.jl: use sawfish-locale-directory when calling
	bindtextdomain

	* sawfish/wm/misc.jl (call-with-error-handler): new function

	* sawfish/wm/windows.jl: fix typo in name of
	uniquify-window-name command

2000-11-15  John Harper  <jsh@eazel.com>

	* sawfish/wm/menus.jl (window-ops-menu): renamed the `Delete'
	item as `Close'

	* sawfish/wm/menus.jl (window-ops-menu): deleted `Destroy' item

	* sawfish/wm/ext/window-history.jl (window-history-clear): new
	function and command

	* sawfish/wm/ext/window-history.jl
	(window-history-ignore-transients): new option, disables auto
	history saving for transient windows (t by default)

	* sawfish/wm/placement/smart.jl (sp-cost:overlap): changed the
	function calculating this to (exp (- (/ overlap (*
	(screen-width) (screen-height))))). Patch from Unai Uribarri
	<unaiur@telecable.es>

	* sawfish/wm/keymaps.jl (window-keymap): deleted C-M-Left and
	C-M-Right bindings (send window to previous/next workspace).
	They can be confusing when hit by mistake

	* sawfish/wm/ext/error-handler.jl: expanded this to stash all
	errors in a ring buffer. Functions `retrieve-errors' and
	`display-errors' to access this buffer. Also added an option
	error-destination controlling where error messages are
	displayed (stderr, screen, /dev/null)

	* sawfish/wm/defaults.jl: require sawfish.wm.ext.error-handler

	* sawfish/wm/util/window-order.jl (on-viewport-change): don't
	call window-order-focus-most-recent if using the `enter-exit'
	focus mode

2000-11-14  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/maximize.jl (unmaximize-window-1): added an
	optional arg BEFORE, a thunk to call immediately before doing
	the resize
	(unmaximize-window): use the new BEFORE param to ensure that
	the window's properties get updated before it's resized. This
	way the theme will get the correct values of window-maximized-p
	when it rebuilds the frame

	* sawfish/wm/util/window-order.jl (on-viewport-change):
	reinstated this function; this time it removes ordering
	information from all viewport-sticky windows in the current
	workspace/viewport pair

	* sawfish/wm/commands/grow-pack.jl (gp-avoid-windows): ignore
	unmapped windows

2000-11-13  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/match-window.jl (match-window-properties):
	deleted obsolete ignore-when-cycling property

	* version 0.33.1

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state): go
	back to setting `avoid' manually for panel windows

2000-11-13  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/edge-flip.jl: import rep.io.timers

	* sawfish/wm/state/transient.jl (transient-map-window): fix
	stupid typo in `cond' statement breaking focus-on-map option
	(#4698). Patch from Unai Uribarri RodrÌguez
	<unaiur@telecable.es>

2000-11-12  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/beos-window-menu.jl: fixed the code that was
	supposed to add `unused' windows. It now also includes
	iconified windows (even if they wouldn't normally be in the
	menu)

	* sawfish/wm/ext/beos-window-menu.jl (make-label): abbreviate
	menu items the default amount (so that they match the parent
	items if they get moved up a level)

2000-11-10  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl (focus-push-map, focus-pop-map): set the
	ignore-fp-keymap property of windows to t while they have the
	click-to-focus keymap. Fixes #4233

	* sawfish/wm/focus.jl: add a function to the
	after-initialization-hook to call focus-add-window on all
	windows (map-notify-hook doesn't get called for these windows)

2000-11-08  John Harper  <jsh@eazel.com>

	* version 0.33

2000-11-08  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/transient.jl (transient-map-window): fix
	error when no window is focused

2000-11-06  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl: add focus-add-window to the
	map-notify-hook not after-add-window-hook. When checking for
	the `click-to-focus windows unfocusable' bug, only check mapped
	windows, and use focus-push-map to recover, not custom hackery

	* sawfish/wm/state/transient.jl (transient-map-window): cleaned
	up control flow (removed unnecessary variable), and using
	transient-of-p instead of checking manually (this means that
	the transient-for = root-window convention is supported)

2000-11-03  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/maximize.jl: immediately before exiting
	unmaximize all maximized windows. But be careful not to reflect
	this change in their properties (either wm-local or in the X
	server). Fixes #4336

	* sawfish/wm/state/wm-spec.jl (wm-spec-init): changed
	_NET_SUPPORTING_WM_CHECK properties to type 'WINDOW. Also set
	_NET_WM_NAME property on the identifying client window

2000-11-02  John Harper  <jsh@eazel.com>

	* sawfish/wm/ext/auto-raise.jl (rw-on-focus, rw-out-focus):
	only do anything if (eq MODE 'normal); fixes #15526 in Red Hat
	bugzilla. Not totally sure that this doesn't break anything,
	but it's easily revertable if it does..

	* sawfish/wm/frames.jl (frame-class-removed-p): new function

	* sawfish/wm/state/maximize.jl (check-if-maximizable,
	property-notify): new functions, added to add-window-hook and
	property-notify-hook respectively. When WM_NORMAL_HINTS changes
	in any way, check if the window is maximizable or not; then
	hide (or reshow) the maximize button as necessary. Fixes #4260

2000-11-01  John Harper  <jsh@eazel.com>

	* sawfish/wm.jl: load sawfish.wm.state.maximize at startup,
	since it adds things to hooks

	* sawfish/wm/ext/edge-flip.jl (before-edge-flip-hook,
	after-edge-flip-hook): new hooks

	(before-flip, after-flip, edge-flip-while-moving): edge
	flipping while dragging windows now obeys the edge-flip-delay
	setting

2000-10-31  John Harper  <jsh@eazel.com>

	* sawfish/wm/state/maximize.jl: added a function to the
	after-window-hook that checks for `queued-{vertical,horizontal}-
	maximize' properties on windows. When found the window is
	maximized. This gets around the problem of not being able to
	maximize a window before it's been framed

	* sawfish/wm/state/wm-spec.jl, sawfish/wm/state/gnome.jl: set
	queued maximize properties if a newly-created window needs to
	be maximize

	* sawfish/wm/state/gnome.jl: now understands
	WIN_HINTS_DO_NOT_COVER flag to be the same as the `avoid'
	property

2000-10-30  John Harper  <jsh@eazel.com>

	* sawfish/wm/theming/make-theme-preview.jl: add the function
	that watches for preview windows to after-add-window-hook not
	before-add-window-hook to make sure that any given frame sticks

	* sawfish/wm/state/transient.jl (transient-unmap-window): when
	unmapping a transient, before deciding to focus on its parent,
	look for the most recently focused window in the same group.
	This may well be more intuitive in some circumstances

	* sawfish/wm/util/window-order.jl (window-order-most-recent):
	new keyword arg WINDOWS, a list of windows to restrict the
	returned value to

2000-10-29  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement/smart.jl (sp-make-grid): don't add root
	window points if they're already in the list; add (1-
	(screen-width)) etc, so that these points aren't chopped

	(sp-get-windows): new optional parameter PRED, a predicate
	function to use to select the windows to check for overlap.
	Also included a fix from David Bustos <bustos@its.caltech.edu>
	to fix a typo in the window-mapped-p check

	(sp-do-placement): new keyword arg #:window-filter, passed to
	sp-get-windows

	(place-window-best-fit-group): new placement mode
	`best-fit-group'. Same as `best-fit', except that windows not
	in the same group as the window being placed aren't included in
	the overlap calculation (useful for transients)

2000-10-28  John Harper  <jsh@eazel.com>

	* sawfish/wm/custom-defaults.jl: added some more settings;
	hopefully they give a better default configuration..

	* sawfish/wm/custom.jl: added command line option
	`--custom-file' to set the value of custom-user-file

2000-10-26  John Harper  <jsh@eazel.com>

	* sawfish/wm/workspace.jl, sawfish/wm/commands/describe.jl,
	sawfish/wm/ext/3d-hack.jl: made some commands #:user-level
	expert

	* sawfish/wm/util/nokogiri.jl (nokogiri-report-commands): fixed
	and/or typo

	* sawfish/wm/util/groups.jl (persistent-group-ids): changed
	type of this option from `(list string)' to `(list symbol)' as
	it should have been

2000-10-25  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl (focus-click): the logic to ungrab the
	pointer in non-click-through mode was reversed (i.e. broken)

	* sawfish/wm/workspace.jl (ws-add-window): set swapped-in
	property of sticky windows, otherwise they don't get swapped
	out the first time a new workspace is selected

2000-10-24  John Harper  <jsh@eazel.com>

	* sawfish/wm/swapper.jl (workspace-swap-out,
	workspace-swap-in): don't swap non-plist attributes of sticky
	windows (this means that sticky geometry is fixed, probably as
	it should be)

	* sawfish/wm/util/window-order.jl: made the `order' property
	workspace-local once more (there's a remark earlier in this
	ChangeLog about that being non-intuitive, but it's better that
	way for sticky windows)
	(window-order-pop-low-sticky-windows): removed this hack, it's
	not required now order is workspace-local

	* sawfish/wm/workspace.jl (select-workspace): swap-in data for
	all sticky windows as well as normal windows in the new
	workspace

	* sawfish/wm/ext/match-window.jl: fixed :require fields to use
	sawfish.wm.ext.match-window instead of just match-window

	* sawfish/wm/focus.jl (focus-enter-fun, focus-leave-fun):
	accept an extra MODE parameter		
	(enter-exit mode): pointer-leave events only cause focus to be
	jettisoned if (eq MODE 'normal)

	* sawfish/wm/focus.jl (focus-click): call forget-button-press
	after either replaying or ungrabbing pointer events (otherwise
	following events are marked as click2, which won't trigger the
	bindings in the click-to-focus-map)

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state):
	magically set never-focus property of gmc-desktop-icon windows

2000-10-23  John Harper  <jsh@eazel.com>

	* sawfish/wm/focus.jl: added a hack to the idle-hook to check
	that unfocused click-to-focus windows have the correct keymap
	installed (it would be better to fix the cause not the
	symptoms, but until then..)

2000-10-22  John Harper  <jsh@eazel.com>

	* sawfish/wm/placement.jl (place-window-interactively): after
	calling accept-x-input, check that the window wasn't destroyed
	before placing the window.. (patch from merlin)

	* sawfish/wm/state/maximize.jl (maximize-find-workarea): new
	parameter #:head

	Integrated a patch from Geoff Reedy <vader21@imsa.edu> to
	support Xinerama better

	* sawfish/wm/commands/x-cycle.jl (cycle-display-message): put
	the message on the head associated with the window

	* sawfish/wm/placement.jl (place-window-under-pointer): centre
	on the head under the pointer, not the current head

	* sawfish/wm/misc.jl (pointer-head): new function, returns the
	head that the pointer is on

2000-10-20  John Harper  <jsh@eazel.com>

	* sawfish/wm/util/nokogiri.jl (nokogiri-report-commands): use
	keys to pass back type and user-level of commands that have
	them

	* sawfish/wm/ext/shade-hover.jl (shade-hover-before): check for
	windowp before window-get'ing

	* sawfish/wm/keymaps.jl: use user-customizable raise commands
	by default

	* sawfish/wm/commands/x-cycle.jl,
	sawfish/wm/commands/move-resize.jl,
	sawfish/wm/commands/grow-pack.jl, sawfish/wm/ext/auto-raise.jl,
	sawfish/wm/state/shading.jl, sawfish/wm/state/maximize.jl,
	sawfish/wm/state/configure.jl,
	sawfish/wm/util/display-window.jl: use raise-window* instead of
	raise-window

	* sawfish/wm/util/stacking.jl (raise-window*, lower-window*,
	raise-lower-window*): new functions, they choose a raise mode
	based on the customization option user-raise-type

	* sawfish/wm/stacking.jl, sawfish/wm/commands/groups.jl,
	sawfish/wm/state/transient.jl: put raise/lower commands at
	'expert level

	* sawfish/wm/commands/raise-commands.jl: new command
	raise-and-pass-through-click, uses user's preferred raise mode

	* sawfish/wm/stacking.jl: renamed raise-window, lower-window,
	and raise-lower-window as raise-single-window, etc..

	* sawfish/wm/commands.jl (apply-command-keys): abstracted
	command #!key args here. New parameter #:user-level
	(command-type, command-user-level): new functions

2000-10-19  John Harper  <jsh@eazel.com>

	* version 0.32

	* sawfish/wm/windows.jl (mark-window-as-desktop): new function
	* sawfish/wm/state/gnome.jl (gnome-honour-client-state): use
	mark-window-as-desktop

	* sawfish/wm/commands/x-cycle.jl: included patch from merlin
	for a different reverse-cycling implementation, with minor
	cleanups

2000-10-18  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/windows.jl: added window-urgent-p to the gaol

	* sawfish/wm/focus.jl (focus-click): in non-click-through mode,
	ungrab the pointer so that the release event can't trigger
	window decorations

	* sawfish/wm/ext/match-window.jl (match-window-properties):
	`dimensions' property was called `size' by mistake

2000-10-14  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/placement/smart.jl: export the various sp-cost:
	functions

2000-10-12  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/shade-hover.jl: miscellaneous improvements
	inspired by a patch to the mailing list from Eli Barzilay
	<eli@barzilay.org>. Unshading a hovered window doesn't flicker,
	reshade the window if it loses focus

	* sawfish/wm/commands.jl (call-command): allow pre-command-hook
	to modify this-command and current-prefix-arg. If it sets
	this-command to false then the command is ignored

2000-10-11  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/stacking.jl (apply-group-order): swap do for let

	* sawfish/wm/commands/x-cycle.jl (cycle-prefix): match `Foo -
	...' as well as `Foo: ...'

2000-10-09  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/stacking.jl (raise-windows, lower-windows):
	rewritten to be more intelligent. These now search for the
	required stacking order of the windows then restack the windows
	in a single pass such that the minimum number of expose events
	are generated on the windows.

	[ Rob Hodges <s323140@student.uq.edu.au> found the algorithm
	and made the initial implementation of raise-windows. I
	translated it to tail-recursive iteration and implemented
	lower-windows along the same lines ]

	* sawfish/wm/state/transient.jl (transient-of-p): only apply
	the `(= WM_TRANSIENT_FOR Root) => transient for whole group'
	rule to non-transient windows
	(transient-children): new function

	* sawfish/wm/commands/x-cycle.jl: added ::doc: style embedded
	doc strings for the cycle commands

	* sawfish/wm/state/maximize.jl (window-maximizable-p,
	maximize-truncate-dims): fixed some bugs introduced by quoted
	nil no longer being boolean false

	* sawfish/wm/commands/x-cycle.jl (cycle-reverse-event): deleted
	(define-cycle-command): new function, used to create a pair of
	commands for cycling backwards and forwards through a given
	list of windows
	(cycle-begin): renamed from cycle-windows; search global-keymap
	for bindings of the command that cycles in the opposite
	direction to the currently executing command

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state):
	SKIP_FOCUS no longer sets never-focus and ignored properties,
	instead it just sets cycle-skip. SKIP_FOCUS defining whether
	the window is focusable or not wasn't very clever, WM_HINTS
	defines that

	Added a `window-list-skip' property to allow windows to be
	taken out of the windows menu

	* sawfish/wm/state/ignored.jl (toggle-window-list-skip): new
	function / command

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state):
	if SKIP_WINLIST set, then set window-list-skip property
	(gnome-set-client-hints): new function, updates _WIN_HINTS when
	the user changes something. Currently just maps
	window-list-skip to SKIP_WINLIST

	* sawfish/wm/gnome/match-window.jl: no longer handles
	SKIP_WINLIST, that's now tied to the window-list-skip property

	* sawfish/wm/ext/window-history.jl (window-history-states):
	added window-list-skip property

	* sawfish/wm/ext/old-window-menu.jl,
	sawfish/wm/ext/beos-window-menu.jl: check for window-list-skip
	property

	* sawfish/wm/ext/match-window.jl (match-window-properties):
	added cycle-skip and window-list-skip properties

	* sawfish/wm/commands/gnome.jl: implemented skip-winlist
	commands in terms of window-list-skip property and
	toggle-window-list-skip function

2000-10-08  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/user.jl: catch and print errors while calling
	custom-load-user-file

	* sawfish/wm/ext/match-window.jl (match-window): ensure that
	each property is a symbol before calling get-prop

	* sawfish/wm/ext/auto-raise.jl (rw-on-focus): minimum timeout
	is now one millisecond, not zero

	* sawfish/wm/ext/auto-raise.jl (rw-on-focus): in the timer
	callback, if disable-auto-raise is set, reset the timer for
	another try later

2000-10-07  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/beos-window-menu.jl (group-name): only look
	for window-class of an integer id if it's positive

2000-10-05  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/windows.jl (window-in-cycle-p): use
	window-really-wants-input-p instead of just checking
	'never-focus property

	* sawfish/wm/focus.jl (focus-click): on exit, if the window
	isn't focused push the click-to-focus-map back onto the window

	* sawfish/wm/windows.jl (ignore-window-input-hint): defaults to
	false now that window-accepts-input-p defaults to true if no
	WM_HINTS property

2000-10-03  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/user.jl: fix typo when loading the `defaults' file
	(patch from Ronald Wahl
	<ronald.wahl@informatik.tu-chemnitz.de>)

	* sawfish/wm/viewport.jl: fix command spec's of move-window-foo
	commands (patch from Yoshiki Hayashi <yoshiki@xemacs.org>)

2000-09-29  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/state/wm-spec.jl: fixed some minor bugs

	(wm-spec-honour-client-state): treat _NET_WM_WINDOW_TYPE as a
	vector of atoms, the first atom we have a type definition for
	is the one we use

	(define-wm-spec-window-type, define-wm-spec-window-type): new
	functions

2000-09-26  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands/x-cycle.jl: don't pass EVENT parameter
	between commands. Export cycle-next function

	* sawfish/wm/commands/x-cycle.jl: the reverse key is now used
	to cycle one step `backwards'. The cycle-windows function now
	has a keyword arg STEP defining the direction (and magnitude)
	of cycle steps

	* sawfish/wm/util/decode-events.jl (modifier-keysym-p): new
	function

	* sawfish/wm/commands/x-cycle.jl (cycle-windows): add the
	modifiers of the invoking event to the cycle-reverse-event when
	creating its binding

	* sawfish/wm/util/decode-events.jl (decode-event): use a `do'
	statement instead of while and setq

2000-09-25  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands/x-cycle.jl (cycle-reverse-event): new
	option, the name of the event that causes cycling to reverse
	direction. (My rationale is that this is less fiddly to use
	than, e.g., making M-S-TAB go backwards, and also is cleaner to
	implement)

	* sawfish/wm/misc.jl (current-head): fall back to checking the
	pointer position if no head is found for the window

	* sawfish/wm/windows.jl, sawfish/wm/frames.jl,
	sawfish/wm/ext/shade-hover.jl: added some :tooltip's

	* sawfish/wm/custom.jl (defcustom): new keyword `:tooltip
	STRING'. Embed it into the doc string (following a `\n\n'
	marker)

2000-09-23  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/3d-hack.jl: export 3d-make-cube and
	3d-make-saw

2000-09-22  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/gnome/integration.jl (gnome-use-capplet): fix typo
	(patch from Christian Marillat <marillat.christian@wanadoo.fr>)

2000-09-20  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.31

2000-09-19  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/user.jl: set *user-structure* to 'user
	* sawfish/wm.jl: set *user-structure* (temporarily) to
	'sawfish.wm, don't set *root-structure* (it's been removed)

	* sawfish/wm/util/window-order.jl (on-viewport-change): use the
	same hack for sticky windows used when changing workspaces

2000-09-17  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/3d-hack.jl (3d-hack): check if current-event
	returns something before passing it to decode-event

	* sawfish/wm/focus.jl (focus-click): only try to pass through
	the click (or whatever) if current-event returns something

2000-09-14  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/state/ignored.jl (toggle-window-cycle-skip): new
	command, also added to the toggle menu

	* sawfish/wm/ext/window-history.jl,
	sawfish/wm/ext/match-window.jl: include the cycle-skip property

	* sawfish/wm/commands/cycle.jl, sawfish/wm/commands/x-cycle.jl:
	use window-in-cycle-p to decide which windows to include

	* sawfish/wm/windows.jl (window-in-cycle-p): new function

	[ adapted from a patch from Dave Dribin <yhdrib@yahoo.com> ]

2000-09-13  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/tooltips.jl (display-tooltip): the TEXT
	argument may now be a function (which should produce a string
	when called)

	* sawfish/wm/ext/tooltips.jl (display-tooltip-after-delay): new
	exported function

2000-09-11  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/workspace.jl, sawfish/wm/windows.jl,
	sawfish/wm/user.jl, sawfish/wm/server.jl, sawfish/wm/misc.jl,
	sawfish/wm/menus.jl, sawfish/wm/gaol.jl, sawfish/wm/frames.jl,
	sawfish/wm/customize.jl, sawfish/wm/commands.jl: 
	* sawfish/wm/commands/xterm.jl,
	sawfish/wm/commands/viewport-linear.jl,
	sawfish/wm/commands/move-resize.jl,
	sawfish/wm/commands/help.jl, sawfish/wm/commands/describe.jl: 
	* sawfish/wm/ext/window-history.jl, sawfish/wm/ext/tooltips.jl,
	sawfish/wm/ext/match-window.jl,
	sawfish/wm/ext/error-handler.jl, sawfish/wm/ext/3d-hack.jl: 
	* sawfish/wm/gnome/menus.jl: 
	* sawfish/wm/session/save.jl, sawfish/wm/session/load.jl,
	sawfish/wm/session/init.jl: 
	* sawfish/wm/util/with-output.jl, sawfish/wm/util/prompt.jl,
	sawfish/wm/util/prompt-wm.jl, sawfish/wm/util/nokogiri.jl,
	sawfish/wm/util/keymap.jl, sawfish/wm/util/gtkrc.jl,
	sawfish/wm/util/compat.jl: 

	No need to explicitly open `rep.io.streams' anymore

2000-09-10  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/util/gtkrc.jl (gtkrc-get-style): ungrab the X
	server before running `gtk-style'. Otherwise it may not be able
	to connect

	* sawfish/wm/misc.jl (call-with-server-ungrabbed): new function

2000-09-08  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm.jl: 

	* sawfish/wm/workspace.jl, sawfish/wm/windows.jl,
	sawfish/wm/window-anim.jl, sawfish/wm/viewport.jl,
	sawfish/wm/user.jl, sawfish/wm/swapper.jl,
	sawfish/wm/stacking.jl, sawfish/wm/server.jl,
	sawfish/wm/placement.jl, sawfish/wm/misc.jl,
	sawfish/wm/menus.jl, sawfish/wm/keymaps.jl, sawfish/wm/gaol.jl,
	sawfish/wm/frames.jl, sawfish/wm/focus.jl,
	sawfish/wm/customize.jl, sawfish/wm/custom.jl,
	sawfish/wm/commands.jl: 

	* sawfish/wm/commands/xterm.jl, sawfish/wm/commands/x-cycle.jl,
	sawfish/wm/commands/viewport-linear.jl,
	sawfish/wm/commands/move-resize.jl,
	sawfish/wm/commands/help.jl, sawfish/wm/commands/gnome.jl,
	sawfish/wm/commands/describe.jl: 

	* sawfish/wm/ext/window-history.jl, sawfish/wm/ext/tooltips.jl,
	sawfish/wm/ext/shade-hover.jl, sawfish/wm/ext/match-window.jl,
	sawfish/wm/ext/error-handler.jl, sawfish/wm/ext/edge-flip.jl,
	sawfish/wm/ext/auto-raise.jl, sawfish/wm/ext/audio-events.jl,
	sawfish/wm/ext/3d-hack.jl: 

	* sawfish/wm/gnome/menus.jl: 

	* sawfish/wm/session/save.jl, sawfish/wm/session/load.jl,
	sawfish/wm/session/init.jl: 

	* sawfish/wm/state/wm-spec.jl, sawfish/wm/state/transient.jl,
	sawfish/wm/state/shading.jl, sawfish/wm/state/open-look.jl,
	sawfish/wm/state/mwm.jl, sawfish/wm/state/maximize.jl,
	sawfish/wm/state/ignored.jl, sawfish/wm/state/iconify.jl,
	sawfish/wm/state/gnome.jl, sawfish/wm/state/configure.jl: 

	* sawfish/wm/theming/make-theme.jl,
	sawfish/wm/theming/make-theme-preview.jl: 

	* sawfish/wm/util/with-output.jl,
	sawfish/wm/util/window-order.jl, sawfish/wm/util/prompt.jl,
	sawfish/wm/util/prompt-wm.jl, sawfish/wm/util/prompt-extras.jl,
	sawfish/wm/util/play-audio.jl, sawfish/wm/util/nokogiri.jl,
	sawfish/wm/util/keymap.jl, sawfish/wm/util/gtkrc.jl,
	sawfish/wm/util/groups.jl, sawfish/wm/util/compat.jl: 

	Open the necessary modules that aren't included in `rep'
	structure anymore (rep.regexp, rep.system, rep.io.streams,
	rep.io.files, rep.io.file-handlers)

2000-09-07  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/user.jl (safe-load): convenience function to catch
	errors from `load'. Used when loading user scripts

	* sawfish/wm/ext/old-window-menu.jl (old-window-menu): fixed
	the `do' iteration parameters

	* sawfish/wm/customize.jl, sawfish/wm/custom.jl: added module
	aliases

	* sawfish/wm/menus.jl: 
	* sawfish/wm/state/iconify.jl: moved the `Iconify' window menu
	item to the `Toggle' submenu, and called it `Minimized'

	* sawfish/wm/workspace.jl, sawfish/wm/frames.jl: 
	* sawfish/wm/ext/old-window-menu.jl,
	sawfish/wm/ext/beos-window-menu.jl: 
	* sawfish/wm/util/groups.jl: create radio-button menu-items
	where appropriate

	* sawfish/wm/ext/beos-window-menu.jl
	(beos-window-menu-simplifies): new option, when t singleton
	submenus are lifted to replace their parent item

	* sawfish/wm/menus.jl (add-window-menu-toggle): new function,
	adds items to the `Toggle' submenu of the window-ops-menu
	(menu-preprocessor): menu items may be dotted to an alist of
	options (sawfish-menu currently supports `(check . STATE)')
	(menu-args): fluid providing arg-list for functions called
	while preprocessing menus
	(popup-window-menu): now takes a window as its sole arg, then
	sets menu-args to the singleton list containing this value

	* sawfish/wm/frames.jl, workspace.jl: 
	* sawfish/wm/ext/old-window-menu.jl,
	sawfish/wm/ext/beos-window-menu.jl: 
	* sawfish/wm/util/groups.jl: use check-items where appropriate
	when creating menus

	* sawfish/wm/state/shading.jl, sawfish/wm/state/ignored.jl,
	sawfish/wm/state/iconify.jl, sawfish/wm/state/gnome.jl: add
	window-menu toggle items

	* sawfish/wm/state/iconify.jl (window-iconified-p,
	window-sticky-p):
	* sawfish/wm/state/shaded.jl (window-shaded-p):
	* sawfish/wm/state/ignored.jl (window-ignored-p): new functions

	* sawfish/wm/frames.jl (frame-type-menu): broke this out of
	sawfish.wm.menus

	* sawfish/wm.jl: intern and export sawfish.wm.state.ignored

2000-09-06  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/window-anim.jl, sawfish/wm/animation/outline.jl:
	added structure aliases

	* sawfish/wm/animation/outline.jl (anim-outline-entry): check
	the 'icon-position property of the window before looking at
	anim-outline-icon-coords

	* sawfish/wm/custom.jl (custom-set-variable,
	custom-set-typed-variable): use user-require to load :require'd
	modules (in case they're bare code)

	* sawfish/wm/misc.jl (user-require): new function

2000-09-04  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands.jl (define-command): new keyword args DOC
	and DOC-KEY
	(command-documentation): new function, a bit of a kludge

2000-09-03  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/misc.jl (quote-menu-item): function to translate
	`_' to `__' in menu items (to avoid introducing unintended
	keyboard accelerators)

	* sawfish/wm/workspace.jl, sawfish/wm/frames.jl,
	sawfish/wm/ext/old-window-menu.jl,
	sawfish/wm/ext/beos-window-menu.jl, sawfish/wm/util/groups.jl:
	use quote-menu-item when creating menus

	* sawfish/wm/commands/describe.jl (describe-symbol): include
	null STRUCTURE arg in call to `documentation'

	* sawfish/wm/gaol.jl: added some more known-to-be-safe modules,
	export define-gaol-structure

2000-09-02  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/frames.jl (load-frame-style): name each gaol
	containing a theme as `themes.FOO' for a theme called FOO. This
	allows the theme's definitions to be inspected using the repl

	* sawfish/wm/util/nokogiri.jl (nokogiri-report-slot,
	nokogiri-report-group): use actual keywords in the results

2000-09-01  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/gnome/integration.jl: when adding to the `Help'
	menu, add an `About GNOME' item

	* sawfish/wm/menus.jl (root-menu): add an `About Sawfish' item

	* sawfish/wm/commands/help.jl (help:about): new command,
	launches the new `sawfish-about' script

	* sawfish/wm/commands/gnome.jl (gnome-about): new command,
	launches the `gnome-about' program

	* sawfish/wm/workspace.jl, sawfish/wm/util/groups.jl: tweaked a
	few doc strings

	* sawfish/wm/defaults.jl: aliased to sawmill-defaults

	* sawfish/wm/keymaps.jl (pointer-motion-threshold): declare
	this built-in customization option

2000-08-31  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/menus.jl: action parts of menu items may now be
	arbitrary lisp objects, instead of just those with a read
	syntax. This is achieved by using a hash table to map
	non-symbol objects to integer ``nicknames'' before passing the
	menu structure to the helper process. When a nickname comes
	back as the result, dereference the table to find the actual
	object. The reason for this is to allow menu items to contain
	closures, avoiding the gratuitous use of `eval' that was
	happening

	* sawfish/wm/ext/old-window-menu.jl,
	sawfish/wm/ext/beos-window-menu.jl, sawfish/wm/workspace.jl,
	sawfish/wm/frames.jl, sawfish/wm/util/groups.jl: use closures
	instead of bare code in menu items

2000-08-30  John Harper  <john@dcs.warwick.ac.uk>

	Some work to help the desktop-in-a-window approach work
	properly, as used by nautilus:

	* sawfish/wm/focus.jl: use desktop-window-p to recognize
	root/desktop windows. Make focusing work logically for desktop
	windows

	* sawfish/wm/windows.jl (desktop-window-p): new function, true
	if arg is 'root or a window with 'desktop property set

	* sawfish/wm/state/gnome.jl (gnome-honour-client-state): match
	class `Nautilus/desktop_window' and set its 'desktop property.
	Also set its 'keymap property to the root-window-keymap

	* sawfish/wm/state/wm-spec.jl: set 'desktop and 'keymap
	properties of TYPE_DESKTOP windows

	* sawfish/wm/ext/shade-hover.jl (shade-hover-leave): use
	desktop-window-p to decide when to ignore the event

	* sawfish/wm/commands/x-cycle.jl (next): don't include windows
	that are desktop-window-p in the list to be selected from

2000-08-29  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/placement.jl (adjust-window-for-gravity): new
	optional arg UNADJUST, passed to adjust-position-for-gravity
	(place-window): if 'placed property is set, treat it like a
	user-specified position
	(unplace-window): new function added to remove-window-hook to
	undo gravity compensation

	* sawfish/wm/windows.jl (adjust-position-for-gravity): new
	optional arg UNADJUST, when set, adjust the window in the
	opposite directions to normal

	[ these last two changes are adapted from E. Jay Berkenbilt
	<ejb@ql.org> ]

	* sawfish/wm/windows.jl (window-gravity): new function

	* sawfish/wm/state/maximize.jl (do-horizontal, do-vertical):
	fixed for non-zero current-head offsets

	* sawfish/wm/state/maximize.jl (window-unmaximized-position,
	window-unmaximized-dimensions): new functions, unused yet

	* sawfish/wm/util/edges.jl (get-visible-window-edges): removed
	`#:include-root' keyword, added `#:include-heads LIST-OR-t' and
	`#:include-screen t' giving more control over what gets added

	Changed all callers.

2000-08-26  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/misc.jl (current-head-dimensions): if no current
	head, return (screen-dimensions)
	(current-head-offset): if no current head, return '(0 . 0)

2000-08-25  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/custom.jl (defcustom): don't (erroneously) rely on
	defvar evaluating the DEFAULT-VALUE form

2000-08-21  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/gaol.jl: added x-gc-set-dashes

2000-08-18  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands.jl (define-command): spec and type args
	are now keyword parameters

	* sawfish/wm/workspace.jl, sawfish/wm/windows.jl,
	sawfish/wm/viewport.jl, sawfish/wm/swapper.jl,
	sawfish/wm/stacking.jl, sawfish/wm/server.jl,
	sawfish/wm/gaol.jl, sawfish/wm/frames.jl:
	* sawfish/wm/commands/x-cycle.jl,
	sawfish/wm/commands/viewport-linear.jl,
	sawfish/wm/commands/slide-window.jl,
	sawfish/wm/commands/size-window.jl,
	sawfish/wm/commands/raise-commands.jl,
	sawfish/wm/commands/move-resize.jl,
	sawfish/wm/commands/grow-pack.jl,
	sawfish/wm/commands/groups.jl, sawfish/wm/commands/gnome.jl,
	sawfish/wm/commands/describe.jl: 
	* sawfish/wm/ext/window-history.jl, sawfish/wm/ext/tooltips.jl,
	sawfish/wm/ext/edge-flip.jl: 
	* sawfish/wm/gnome/menus.jl: 
	* sawfish/wm/placement/smart.jl: 
	* sawfish/wm/session/load.jl: 
	* sawfish/wm/state/transient.jl, sawfish/wm/state/shading.jl,
	sawfish/wm/state/maximize.jl, sawfish/wm/state/ignored.jl,
	sawfish/wm/state/iconify.jl: 
	* sawfish/wm/util/prompt.jl, sawfish/wm/util/prompt-extras.jl,
	sawfish/wm/util/nokogiri.jl, sawfish/wm/util/gtkrc.jl,
	sawfish/wm/util/edges.jl, sawfish/wm/util/display-window.jl,
	sawfish/wm/util/compat.jl: 

	Updated for new define-command interface

2000-08-16  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands.jl: fixed bug of functions with
	`(interactive)' not being commandp

	* sawfish/wm/commands.jl: give interactive spec for
	destroy-window command

2000-08-16  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/workspace.jl, sawfish/wm/windows.jl,
	sawfish/wm/stacking.jl, sawfish/wm/misc.jl,
	sawfish/wm/menus.jl, sawfish/wm/frames.jl,
	sawfish/wm/customize.jl, sawfish/wm/custom.jl,
	sawfish/wm/commands.jl, sawfish/wm/animation/outline.jl,
	sawfish/wm/commands/xterm.jl, sawfish/wm/commands/x-cycle.jl,
	sawfish/wm/commands/describe.jl, sawfish/wm/ext/tooltips.jl,
	sawfish/wm/ext/match-window.jl,
	sawfish/wm/ext/beos-window-menu.jl,
	sawfish/wm/ext/audio-events.jl, sawfish/wm/placement/smart.jl,
	sawfish/wm/session/init.jl, sawfish/wm/state/transient.jl,
	sawfish/wm/state/maximize.jl, sawfish/wm/state/configure.jl,
	sawfish/wm/theming/make-theme-preview.jl,
	sawfish/wm/util/with-output.jl,
	sawfish/wm/util/window-order.jl, sawfish/wm/util/rects.jl,
	sawfish/wm/util/prompt.jl, sawfish/wm/util/prompt-wm.jl,
	sawfish/wm/util/prompt-extras.jl, sawfish/wm/util/keymap.jl,
	sawfish/wm/util/groups.jl, sawfish/wm/util/edges.jl,
	sawfish/wm/util/display-window.jl, sawfish/wm/util/compat.jl: 

	use #!optional and #!rest instead of deprecated &optional and
	&rest

2000-08-15  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/workspace.jl: some renaming, ws-move-window ->
	move-window-to-workspace, ws-copy-window ->
	copy-window-to-workspace, ws-insert-workspace -> insert
	workspace, ws-move-workspace -> move-workspace (and exported),
	ws-remove-workspace -> move-workspace
	(insert-workspace): this command renamed as
	insert-workspace-after

	Updated all callers

	* sawfish/wm/compat.jl: handle workspace renamings

	* sawfish/wm/viewport.jl (select-workspace-and-viewport): new
	function

	* sawfish/wm/commands.jl (command-fun): renamed command-ref and
	exported

2000-08-14  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/gaol.jl (safe-functions): added
	make-image-from-x-drawable

	* sawfish/wm/state/configure.jl (configure-request-handler): be
	ICCCM compliant when handling move requests -- honour the
	gravity if given, or default to NorthWest. Previously was
	always doing the equivalent of Static gravity (has this broken
	[m]any apps?)

2000-08-13  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/server.jl: server now reliably communicates errors
	back to the client (as `(signal 'remote-sawfish (list DATA))'
	where DATA is a string). Also renamed the sockets and X
	properties. The X protocol now includes a version number

2000-08-11  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/commands/grow-pack.jl (pack-warp-pointer): new
	option. Update from Kai Grossjohann

2000-08-10  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/placement.jl (adjust-window-for-gravity): use
	adjust-position-for-gravity 

	* sawfish/wm/windows.jl (adjust-position-for-gravity): new
	function (abstracted from adjust-window-for-gravity)

	* sawfish/wm/commands.jl (function-spec): interactive spec in
	bytecode subr is now 5th element, not 6th

2000-08-08  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/match-window.jl (safe-string-match): wrapper
	for string-match that catches and prints regexp errors

2000-08-03  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm.jl: include sawfish.wm.state.{transient,iconify,
	shading} in the exports of this module

	* sawfish/wm/state/shading.jl, sawfish/wm/state/maximize.jl:
	added aliases

	* sawfish/wm/commands/x-cycle.jl, sawfish/wm/ext/tooltips.jl:
	misc fixes

2000-07-31  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/custom.jl (define-custom-setter, custom-setter):
	kludged to use structure- functions

	* sawfish/wm/user.jl: configure this structure so that setq
	binds unbound variables

	* sawfish/wm.jl: removed obsolete reference to autoload-verbose

2000-07-30  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/workspace.jl: export ws-copy-window

	* sawfish/wm/custom.jl (custom-set-variable,
	custom-set-typed-variable): convert values which are the symbol
	`nil' to boolean false (let's hope nothing actually uses the
	symbol `nil'!)

	* sawfish/wm.jl, sawfish/wm/user.jl, sawfish/wm/defaults.jl:
	user module is now called `user', not `sawfish.wm.user'

	* sawfish/wm/customize.jl (customize-args): deleted this
	variable

2000-07-28  John Harper  <john@dcs.warwick.ac.uk>

	* sawfish/wm/ext/audio-events.jl (audio-event-handler): export
	this function

	* sawfish/wm/ext/tooltips.jl (display-tooltip, remove-tooltip):
	public interface of this module

	* sawfish/wm/state/maximize.jl (maximize-avoid-avoided): new
	option, when nil, avoided windows are covered when maximizing
	(from a mailing list post by Jonas Linde <jonas@init.se>)

	* sawfish/wm/user.jl: support --call, --load and --quit long
	equivalents for -f, -l and -q

	* sawfish/wm/util/display-window.jl
	(display-window:uniconify-to-current-workspace): put in expert
	user-level

	* sawfish/wm/workspace.jl, sawfish/wm/state/iconify.jl
	(uniconify-to-current-workspace, raise-windows-on-uniconify,
	focus-windows-on-uniconify): moved from workspace to iconify,
	raise option is put at expert user-level

2000-07-27  John Harper  <john@dcs.warwick.ac.uk>

	Non-trivial changes to modularize sawfish. Instead of one
	unmaintainably huge namespace, each file gets its own module.
	Use sawfish.wm. hierarchy for modules that only apply to the
	wm. Other modules under sawfish. will appear soon. Modules can
	be imported separately, or `sawfish.wm' can be imported to get
	all core definitions

	* sawfish/wm.jl: does initialization and creates the sawfish.wm
	structure

	* sawfish/wm/commands.jl: all command handling is now written
	in Lisp. Fully compatible except for how commands are defined.
	Since we have no unified namespace, the mapping from names ->
	command definitions is maintained separately. define-command
	and autoload-command add entries to this mapping.
	define-command takes a name and a function, and optionally an
	interactive spec and a custom-type spec. The old style of
	defining commands still works, but only in the user module

	* x-cycle.jl, workspace.jl, wm-spec.jl, with-output.jl,
	window-outline.jl, window-order.jl, window-history.jl,
	window-anim.jl, viewport.jl, viewport-linear.jl, transient.jl,
	tooltips.jl, stagger-placement.jl, stacking.jl,
	smart-placement.jl, sm-save.jl, sm-load.jl, sm-init.jl,
	sm-common.jl, slide-window.jl, size-window.jl, shading.jl,
	shade-hover.jl, server.jl, select-window.jl, sawmill.jl,
	sawmill-gaol.jl, sawmill-defaults.jl, rects.jl,
	raise-commands.jl, prompt.jl, prompt-wm.jl, prompt-extras.jl,
	play-audio.jl, place-window.jl, open-look.jl,
	old-window-menu.jl, nokogiri-sawfish.jl, mwm.jl,
	move-resize.jl, move-cursor.jl, menus.jl, maximize.jl,
	match-window.jl, make-theme.jl, make-theme-preview.jl,
	keymaps.jl, keymap.jl, ignore-window.jl, iconify.jl, help.jl,
	gtkrc.jl, grow-pack.jl, groups.jl, group-funs.jl, gnome.jl,
	gnome-menu.jl, gnome-match.jl, gnome-int.jl, gnome-commands.jl,
	functions.jl, frames.jl, focus.jl, error-handler.jl, edges.jl,
	edge-flip.jl, describe.jl, decode-events.jl, cycle.jl,
	customize.jl, custom.jl, custom-defaults.jl, cursors.jl,
	configure.jl, compat.jl, beos-window-menu.jl, autoload.jl,
	auto-raise.jl, audio-events.jl, anim-outline.jl, 3d-hack.jl:

	Moved (and maybe renamed) these files under sawfish.wm module
	hierarchy (also made most into modules)

2000-07-24  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.30.3

2000-07-23  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: don't require 'define. Also, only load "environ"
	when (< rep-interface-id 10) (cvs rep correctly autoloads this
	from a different location)

	* custom.jl (custom-add-to-group): don't require 'sort, it's
	not necessary and fails in cvs rep

	* window-outline.jl (draw-box-outline): ensure numbers are
	exact after rounding

	* anim-outline.jl (anim-outline-run): use integer arithmetic

	* stacking.jl (make-constraint): check for 'transients-above
	property on the window, else use global value
	* match-window.jl (match-window-properties): added
	'transients-above property

2000-07-19  John Harper  <john@dcs.warwick.ac.uk>

	* shading.jl (shading-add-window): reinstate code to set
	'shaded property to nil before calling shade-window

	* keymaps.jl (custom-set-keymap): don't pass REQ arg to
	custom-set, just ignore it

	* custom.jl (custom-set): removed REQ parameter, has to be
	conditional on the value of the option
	(custom-set-variable, custom-set-typed-variable): if both REQ
	and VALUE are non-nil, require REQ. Make SYMBOL special before
	setting it

2000-07-18  John Harper  <john@dcs.warwick.ac.uk>

	* custom.jl (custom-convert): fixed some stupid bugs when
	recursing into `list', `pair' and `and' types

2000-07-17  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl: require 'menus when compiling (otherwise when
	setting apps-menu, don't know that it's special)

2000-07-16  John Harper  <john@dcs.warwick.ac.uk>

	* wm-spec.jl: set 'fixed-position and 'never-focus properties
	of TYPE_DESKTOP windows

	* configure.jl: renamed the 'fixed-position property as
	'client-set-position. Changed all users

	* gnome.jl: support FIXED_POSITION hint, sets the
	'fixed-position property

	* move-resize.jl, slide-window.jl: when 'fixed-position is set,
	don't allow the window to be moved

	* workspace.jl: add 'fixed-position to those saved with the
	session data

2000-07-14  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.30.2

2000-07-13  John Harper  <john@dcs.warwick.ac.uk>

	Work to correct the problem that defcustom's with secondary
	types that need converting to-from strings weren't being
	converted, since only the outer type was being looked at:

	* custom.jl (custom-serialize, custom-deserialize,
	define-custom-serializer, define-custom-deserializer):
	functions to do deep conversions across (type, value) pairs

	(custom-set-typed-variable): similar to custom-set-variable,
	but with an extra arg, the type of the variable. This will
	slowly replace c-s-v in `custom' files. The type allows the
	conversion to work even if the variable has not yet been
	defined

	(variable-type): new function

	(custom-set-color, custom-set-font): removed, just conversion
	functions now. Compatibility functions in compat.jl

	* customize.jl (customize-set): emitted forms call
	custom-set-typed-variable not custom-set-variable and include
	type of variable (unless variable has a custom-set property)

	* nokogiri-sawfish.jl (nokogiri-report-slot): serialize the
	value to something that's printable (unless it has a custom-get
	property)

2000-07-13  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl: removed unused group-widget definition

	* wm-spec.jl, gnome.jl: use ws-set-window-workspaces instead of
	window-add-to-workspaces when honouring _WIN_WORKSPACE and
	_NET_WM_DESKTOP properties

	* gnome-int.jl: only redefine xterm-program if it's not been
	customized

2000-07-12  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (popup-menu): when writing the menu spec across the
	pipe, format it to a string, then write that. This only does a
	single system call

	* custom.jl (custom-set): new function, wraps a thunk to do the
	actual variable setting in the necessary pre- and post-fix
	code. Also sets a property 'custom-user-value on all variables
	that have been customized
	(variable-customized-p): new function
	(custom-set-variable): now in terms of custom-set

	* keymaps.jl (custom-set-keymap): now in terms of custom-set

	* viewport.jl (move-window-to-viewport): remember to correct
	for 1.. to vs 0.. indexing

	* transient.jl (transient-of-p): if WM_TRANSIENT_FOR is set to
	the root window, only compare group ids if non-nil
	(transient-parents, transient-group): ignore unmapped windows

2000-07-11  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (popup-menu): catch errors and unset menu-active

	* x-cycle.jl, workspace.jl, window-order.jl, viewport.jl,
	transient.jl, stacking.jl, smart-placement.jl, sm-save.jl,
	sm-load.jl, sawmill-gaol.jl, place-window.jl, grow-pack.jl,
	group-funs.jl, gnome.jl, frames.jl, edges.jl: replace `(mapc
	foo (managed-windows))' by `(map-windows foo)', and similar
	for filter-windows variants

	* functions.jl (map-windows): deleted, now a C function
	(get-window-by-name, get-window-by-name-re): deleted optional
	LST parameters; use filter-windows

	Cleaned up frame style and window type management:

	* frames.jl (define-frame-type-mapper): used to register a
	function that maps (WINDOW FRAME-TYPE) -> FRAME-TYPE. Used by
	find-frame-type-definition to factor window state into the type
	asked for from the theme

	(reframe-window): reframes a window, according to its current
	'type and 'frame-style properties

	(set-frame-style): sets 'frame-style property and acts on it
	(set-window-type): sets 'type property and acts on it

	(window-type): removed junk to handle decorate-transients
	option. Window type is _never_ changed for window state

	(set-window-frame-style, set-frame-for-window,
	reframe-one-window): deleted

	* shading.jl: don't mess with 'type property any more. But
	register a frame type mapper to handle conversion to shaded
	frames when 'shaded property is set

	* transient.jl: register a frame type mapper to handle
	decorate-transients option

	* workspace.jl, wm-spec.jl, window-history.jl, sawmill.jl,
	sawmill-gaol.jl, open-look.jl, mwm.jl, match-window.jl,
	ignore-window.jl, groups.jl: updated all users of the changed
	window frame & type interfaces

	[ amongst other things, these changes make changing the type of
	a window while it's shaded work correctly ]

2000-07-10  John Harper  <john@dcs.warwick.ac.uk>

	* keymap.jl (quote-event): new implementation that uses event
	replaying to forward the events, so that it works with clients
	that don't accept synthesized events. Adapted from code posted
	to the mailing list by Timo Korvola in March (but without the
	complexity of also grabbing the pointer)

	* x-cycle.jl (cycle-windows): grab the keyboard synchronously,
	then if the M-TAB sequence is terminated by a non-release event
	that doesn't have a wm binding, replay it to the focused client
	window. Also, when calling any tail commands, ensure that
	current-event-window returns the newly-focused window

2000-07-09  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.30

2000-07-08  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (command-sequence): new command, allows the
	bindings ui to bind _sequences_ of commands to a single event

	* viewport.jl (activate-viewport-column,
	activate-viewport-row): new commands

2000-07-06  John Harper  <john@dcs.warwick.ac.uk>

	* transient.jl (map-transient-group): new function

	* iconify.jl (iconify-group-mode, uniconify-group-mode): new
	options

	* groups.jl (iconify-transient-group,
	uniconify-transient-group): new commands

	* workspace.jl, custom.jl, audio-events.jl: translate some
	strings in defcustom types

	* custom.jl (custom-option-alist): added `:type*' key, similar
	to `:type' but value isn't quoted

2000-07-05  John Harper  <john@dcs.warwick.ac.uk>

	* stacking.jl (stacking-constraint:transients-above-parent):
	handle transients with more than one parent window
	(raise-windows, lower-windows): map across the list of windows
	twice to ensure that the optimum layout is found

	* transient.jl (transient-of-p, transient-parents): new
	functions. All these functions now understand the convention of
	setting WM_TRANSIENT_FOR to the root window to denote that the
	window is a transient for the whole group

	* sawmill.jl: load-all "autoload" not "autoload.jl"

	* workspace.jl, viewport.jl (workspace-geometry): new
	defcustom, replaces preallocated-workspaces and
	viewport-dimensions (which are now just defvars)

	* customize.jl (customize-read-user-file): delete items whose
	`custom-obsolete' property is set

	* compat.jl: set some custom-obsolete properties

2000-07-03  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl: use constrain-dimension-to-hints instead of
	local hack

	* functions.jl (constrain-dimension-to-hints): new function,
	implements the size hints checking correctly (I was using
	base-size instead of min-size in some places)

	* stacking.jl (transients-above): stack above parents by
	default

	* keymaps.jl: use the commands that raise a window and its
	transients by default

	* transient.jl (indirect-transient-of-p, transient-group): new
	functions

	* transient.jl
	({raise,lower,raise-or-lower}-window-and-transients): new
	commands

	* groups.jl ({raise,lower,raise-lower}-group): use the new
	functions for stacking lists of windows

	* stacking.jl (raise-windows, lower-windows,
	raise-lower-windows): new functions for stacking groups of
	windows

	* raise-commands.jl (raise-transients-and-pass-through-click):
	new command

2000-07-02  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl (window-history-apply): use
	resize-window-with-hints* to apply any saved dimensions. Fixes
	bug of making windows too small

	* functions.jl (resize-window-with-hints*): new function,
	similar to resize-window-with-hints, but with dimensions
	specified in pixels

	* version 0.29

2000-07-01  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-int.jl (gnome-use-capplet): make this an option

	* workspace.jl (activate-workspace, send-window-to-workspace,
	copy-window-to-workspace): customizable commands
	(select-workspace:N, send-to-workspace:N, copy-to-workspace:N):
	deprecated, moved to compat.jl

	* viewport.jl (activate-viewport, move-window-to-viewport):
	customizable commands

	* viewport-linear.jl (set-viewport-linear,
	set-window-viewport-linear): customizable commands. Deprecate
	the rest

	* nokogiri-sawfish.jl: Set `deprecated-command' property of
	commands that I don't want to show up in the configurator
	(nokogiri-report-commands): new function.

	* keymaps.jl (custom-get-keymap, custom-set-keymap): allow
	non-symbol commands to pass through to the configurator if they
	specify the type of their argument list

	* functions.jl (run-shell-command): new command, forks its
	argument using `system', is customizable

	* custom.jl (define-command-args): new function, associates a
	custom type with a command, should describe the _list_ of
	arguments that can be given to the function (i.e. an `and'
	widget usually)

2000-06-30  John Harper  <john@dcs.warwick.ac.uk>

	* nokogiri-sawfish.jl (nokogiri-report-slot): convert
	`file-name' -> `file' and `program-name' -> `program' for
	backwards compatibility

	* frames.jl (frame-type-fallback-alist): call
	after-setting-frame-option when this option changes

	* sawmill.jl: add ~/.sawfish/lisp to load-path

	* groups.jl (send-group-to-workspace): remember to tell
	ws-move-window which workspace to move _from_. Also, don't try
	to move sticky windows

2000-06-29  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl (match-window-grab-x-property): tidied up,
	should handle non-string properties now

	* place-window.jl (place-window-centered,
	place-window-centered-on-parent, place-window-under-pointer):
	clamp the placement position into the current workarea (as
	defined by the windows that must not be covered)

	* functions.jl (clamp, clamp*): new functions

	* x-cycle.jl, workspace.jl, wm-spec.jl, viewport.jl,
	transient.jl, place-window.jl, nokogiri-sawfish.jl,
	move-resize.jl, maximize.jl, iconify.jl, functions.jl,
	frames.jl, edge-flip.jl, customize.jl, autoload.jl,
	audio-events.jl: various changes to defcustom's, mostly just
	trying to improve the descriptions

	* gnome.jl (gnome-honour-client-state): set `ignored' as well
	`never-focus' for SKIP_FOCUS windows

	* stacking.jl (mapped-stacking-order): new function, used to
	ignore unmapped windows when restacking

2000-06-28  John Harper  <john@dcs.warwick.ac.uk>

	* nokogiri-sawfish.jl: server-side functions for nokogiri

	* x-cycle.jl, workspace.jl, window-history.jl, window-anim.jl,
	viewport.jl, tooltips.jl, stacking.jl, smart-placement.jl,
	slide-window.jl, size-window.jl, shade-hover.jl, sawmill.jl,
	play-audio.jl, nokogiri-sawfish.jl, move-resize.jl,
	move-cursor.jl, maximize.jl, match-window.jl, keymaps.jl,
	iconify.jl, group-funs.jl, gnome-match.jl, functions.jl,
	frames.jl, focus.jl, edge-flip.jl, customize.jl, custom.jl,
	configure.jl, autoload.jl, auto-raise.jl, audio-events.jl:
	Suitable changes for new `nokogiri' config interface

	* gnome.jl (gnome-honour-client-state): SKIP_FOCUS hint now
	sets `never-focus' property, not `ignored'

2000-06-27  John Harper  <john@dcs.warwick.ac.uk>

	* groups.jl (raise-lower-group): try to be cleverer about
	detecting when to raise and when to lower. But it's still based
	on assumptions about the constraints..

	* stacking.jl (window-on-top-p, raise-lower-window): removed
	check for window visibility to latter

	* raise-commands.jl (raise-group-and-pass-through-click): new
	command

	* groups.jl (raise-group, lower-group, raise-lower-group):
	assume less, so they work better with the new stacking code

2000-06-26  John Harper  <john@dcs.warwick.ac.uk>

	* stacking.jl: rewritten to be totally `constraint' based.
	(Actually these constraints are just predicates.) Anyway, this
	lets me generalize the layer code into one rule, and to do
	proper stacking of transients using other rules. (So, e.g.,
	when (eq transients-above 'parents), transient windows are
	actually only stacked _their own_ parents -- two people asked
	me for this today)

2000-06-24  John Harper  <john@dcs.warwick.ac.uk>

	* iconify.jl (iconify-ignored): new option, whether or not to
	allow ignored windows to be iconified, nil by default. (Closes
	bugs.gnome #11114)

2000-06-23  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (frame-type-fallback-alist): map `shaded' and
	`shaded-transient' to `shaped' and `shaped-transient'
	respectively

	* shading.jl (shade-window): give windows `shaded' or
	`shaded-transient' type while they are shaded (not `shaped', or
	`shaped-transient')

	* frames.jl (frame-part-classes): removed the cursor
	definitions from the `-button' classes

	* sawmill.jl: fixed bug of not load-all'ing site-init within
	the `sawfish' structure

2000-06-22  John Harper  <john@dcs.warwick.ac.uk>

	* stacking.jl (restack-window): new function, given a window,
	ensure that it has a consistent place in the stacking order
	(stacking-after-map): don't call raise-window, just use
	restack-window to ensure consistency

	* functions.jl (member-if): new function

2000-06-21  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-add-window): if the window has a non-null
	set of workspaces, clear it before adding the window to each of
	these spaces, in case (/= logical-id actual-id)

	* match-window.jl: in `workspace' setter, use
	ws-window-set-workspaces not window-add-to-workspace; also the
	`workspaces' property must contain logical workspace ids before
	the add-window-hook has been run

	* window-history.jl: moved customizations to `placement' group.
	Changed menu items to be `Remember foo' not `Save foo'

2000-06-20  John Harper  <john@dcs.warwick.ac.uk>

	* configure.jl (windows-intersect-p, window-occludes-p): new
	functions
	(configure-request-handler): handle the newly complex `stack'
	field of the request (with all relations and siblings)

	[ patch from Brad Thompson <yak@mit.edu> ]

	* window-history.jl (window-history-apply): ignore `dimensions'
	attribute if the size-hints has a `user-size' property

	* stagger-placement.jl: new placement mode

	* smart-placement.jl (sp-best-fit): don't discard possible
	placement with more than the minimum overlap, keep all points,
	but add a cost component function sp-cost:overlap that includes
	the overlap. Currently overlap is weighted to 75%, pointer and
	focus locality combine to give the other 25%

	* place-window.jl (place-window-centered-on-parent): ensure
	that the chosen position is never negative

2000-06-19  John Harper  <john@dcs.warwick.ac.uk>

	* wm-spec.jl, decode-events.jl: s/0x/#x/

	* window-history.jl: ensure that our addition to
	before-add-window-hook is added at the end of the hook (i.e.
	after the session-management function)

2000-06-18  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl, sawmill-gaol.jl, describe.jl: remove any
	rep-compatibility cruft, we require 0.12 now

	* window-history.jl: set the options to automatically save
	dimensions and state to nil (since the module may sometimes
	misidentify the `same' window)

2000-06-16  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.28.1

2000-06-15  John Harper  <john@dcs.warwick.ac.uk>

	* custom.jl (custom-declare-variable): allow variables to be
	declare in the null (top-level) group

	* window-history.jl (window-history-key): for transient
	windows, include the window title in the key

	* beos-window-menu.jl (group-name): use the class name to name
	the group when possible

	* old-window-menu.jl: new file, contains the original
	window-menu function

	* sawmill.jl: set window-menu to beos-window-menu by default

2000-06-13  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: don't save the `iconified' and `shaded'
	states (they relate to the current instance of the window
	only). Also when restoring window state, use the current value
	of window-history-states to decided which properties to update

	* iconify.jl (iconify-workspace-windows): new command

2000-06-12  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.28

	* frames.jl (find-frame-definition): detect and abort if
	frame-type-fallback-alist contains closed cycles

2000-06-10  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (frame-type-fallback-alist): added `icon' and
	`dock' items

	* menus.jl (root-menu): added `Help' sub-menu

	* help.jl: new file, some functions to launch Info nodes, web
	pages, etc..

	* gnome-int.jl: added code to use GNOME help prog and url
	launcher; also add a couple of GNOME menus to the Help menu

	* gnome-commands.jl (gnome-www-page, gnome-help-browser): new
	commands

	* decode-events.jl: support `super' modifier

2000-06-08  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (cycle-windows): added a handler to catch unbound
	(non-release) events, store them, exit the command, but first
	tail-call the command bound to the saved event

	* gnome-int.jl: require customize at compile-time so that
	variables are defined..

2000-06-05  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: removed setting of fonts-are-fontsets, handled by
	C main ()

2000-05-31  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: changed the option names, added a more
	extensive menu, with commands to explicitly save state

	* sawmill-defaults.jl: load window-history module

	* move-resize.jl (move-resize-motion): call
	while-{moving,resizing}-hook _before_ updating the status
	message

2000-05-30  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-prune-points): if the number of points
	is less than the maximum, randomly add points to make up the
	distance

	(sp-cost-from-distance): made this function not depend on the
	order of its input positions (doh!)

	(sp-cost-components): reversed the order of the individual
	cells

	* stacking.jl (stacking-after-map): raise the window _after_
	possibly moving it to a higher layer (else it may end up below
	the other windows in its layer)

2000-05-27  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: added a custom property getter for `type',
	it groks window shading

2000-05-26  John Harper  <john@dcs.warwick.ac.uk>

	* place-window.jl (acceptable-placement): require the `rects'
	feature [ patch from John H. Palmieri
	<palmieri@math.washington.edu> ]

2000-05-25  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (display-window:uniconify-to-current-workspace):
	new option
	* iconify.jl (display-window-without-focusing): bind
	uniconify-to-current-workspace to the value of the above option
	before uniconifying
	[ adapted from from John N S Gill ]

	* prompt-extras.jl: don't bind special variables in parameter
	lists

2000-05-22  John Harper  <john@dcs.warwick.ac.uk>

	* edge-flip.jl (edge-flip-warp-pointer): new option, whether or
	not to warp the pointer to the opposite screen edge after
	flipping (from Paul Warren <pdw@ferret.lmh.ox.ac.uk>)

2000-05-19  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: ignore null keys

2000-05-18  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl (window-history-apply): don't reposition
	windows whose `placed' property is already set

2000-05-17  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl: added some more `x' functions

	* smart-placement.jl (sp-cost): split each cost component into
	a separate function, the variable sp-cost-components tells how
	to combine them into a single value

	* rects.jl (rectangle-center, rectangle-center*): new functions

	* place-window.jl (place-transient-mode): defaults to
	centered-on-parent

2000-05-16  John Harper  <john@dcs.warwick.ac.uk>

	* beos-window-menu.jl: new file, replaces window-menu by
	something that creates sub-menus by window group

	* window-history.jl: use a hash table to record history

2000-05-15  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl (sawmill-safe-specials): added batch-mode

	* frames.jl (frame-type-fallback-alist): variable mapping frame
	types to type to try if the original type isn't available in
	the chosen frame style
	(find-frame-definition): iterate over frame types using the
	above variable until a frame definition is found
	(set-window-frame-style): use find-frame-definition

	Note that for this to work, themes must return `nil' when they
	don't support the requested frame type, until now, the
	convention had been to return the default frame definition, so
	most if not all themes will need changing. Themes defined using
	the themer (or gimpmill?) will still work okay

	* make-theme.jl (make-theme): rewritten the returned lambda to
	conform to the new theme conventions

2000-05-14  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: various enhancements, including: only save
	state file if data needs updating, window-history-forget
	command to remove saved state for a window, customizations
	controlling what gets saved (position, size, or other)

	* frames.jl (set-window-frame-style, frame-style-menu): call
	window-state-changed-hook, with states `frame-style' and `type'

	* auto-raise.jl (raise-groups-on-focus): commented out this
	option, it causes window groups to flicker (sometimes
	repeatedly) in certain cases due to the extra focus events it
	causes

2000-05-12  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl (gnome-menu-lang): now a list of strings, made
	by destructuring the language code, e.g. if LANG=de_DE, then
	the list will be ("de" "de_DE")

	(gnome-menu-read-desktop-entry): match encountered languages
	against all items in gnome-menu-lang

	* gnome-menu.jl, sawmill.jl: search LANGUAGE, LC_ALL,
	LC_MESSAGES, LANG for the language code to use, in that order

	* describe.jl (describe-symbol): new command, replaces
	describe-function and describe-variable

	(apropos-function, apropos-variable): moved these here from
	rep, this is necessary for rep 0.11+

	* keymap.jl (describe-key): use describe-symbol instead of
	describe-function

	* with-output.jl (define-command-to-screen): new macro, defines
	a command that will have its output redirected to the screen,
	given the name of an existing command to call, and an
	interactive spec

2000-05-11  John Harper  <john@dcs.warwick.ac.uk>

	* focus.jl (focus-enter-fun, focus-enter-fun): generate events
	when the root window is entered/left, enter-root and leave-root
	(enter-exit): unfocus the window when the root window is
	entered, as well as when the window is left

	* transient.jl (transient-unmap-window): fix bug of looking for
	window under pointer _in_ click to focus mode, it should be
	only done when _not in_ this mode

2000-05-10  John Harper  <john@dcs.warwick.ac.uk>

	* window-history.jl: new file, first attempt at remembering
	window state across window instances, still quite rough

	* version 0.27.1

	* 3d-hack.jl (3d-rotate flatten): use inexact->exact on
	transformed coordinates (fixes bug introduced by rounding
	functions now preserving inexactness)

	* maximize.jl (maximize-do-horizontal, maximize-do-vertical):
	use current-head-dimensions and current-head-offset of the
	maximized window to give the maximization bounds

	(maximize-find-max-rectangle): new optional arg HEAD, the head
	to constrain the rectangle to. Also, the output rectangle may
	only span a single head

	(maximize-do-both): constrain the maximized window to its
	current head

	* functions.jl (current-head, current-head-dimensions,
	current-head-offset): all now take an optional window
	parameter, which means to find the current head in relation to
	this window (else use the focused window)

	* functions.jl (get-window-by-name-re): new function

	* sawmill.jl: after renaming .sawmill -> .sawfish, create a
	symlink .sawmill in case user code refers to it

2000-05-09  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.27

	* transient.jl (transient-unmap-window): misc improvements,
	should fix the reported problems in click-to-focus mode

	* window-order.jl (window-order-most-recent): new function

	* focus.jl (focus-click): only pass events through to the
	window if they're not bound, _and_ none of their successor
	events (move, release, etc) are bound

	* decode-events.jl (should-grab-button-event-p): new function,
	returns t if a button event needs to be grabbed so that the
	events that follow it are received

	* transient.jl (transient-map-window): only ever focus the
	window if it's visible (i.e. on the current workspace and not
	iconified)

2000-05-08  John Harper  <john@dcs.warwick.ac.uk>

	* viewport.jl (window-outside-workspace-p): handle non-zero
	viewport origins correctly (I think)

	* iconify.jl (ws-set-client-state): add this function to
	`map-notify-hook' instead of `add-window-hook', since the wm
	deletes WM_STATE when windows are withdrawn (one of the
	alternatives suggested by the icccm). This fixes the Code
	Crusader bug

2000-04-30  John Harper  <john@dcs.warwick.ac.uk>

	* shade-hover.jl (shade-hover-delay): changed range lower limit
	from one to zero (from Nils Barth <nbarth@fas.harvard.edu>)

	* stacking.jl (raise-window): check that (/= pred w) before
	using it to raise above (else, do nothing, since it means that
	w is already on top)

2000-04-29  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (workspace-swap-in): use move-resize-window-to
	so that window reconfiguration happens in one step, not two

	* edges.jl, rects.jl: removed uses of `named let' construct,
	only later sub-versions of required rep 0.11 support it

	* stacking.jl (raise-window): should have fixed long-standing
	problem of raising managed windows above override_redirect
	windows (e.g. menus) in certain cases

2000-04-28  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (current-head): use focused window to determine
	current head, only use pointer position if no focused window

2000-04-27  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl: added window-icon-image to list

	* rectangles.jl (rectangle-area, rect-1d-overlap): changed from
	macros to functions
	(rectangle-from-coords, rectangle-corners): new functions
	(rectangle-heads): return the number of screen heads that a
	given rectangle appears on

	* smart-placement.jl (sp-least-overlap): ignore points where
	the window appear on more than one screen head

	* edges.jl (get-visible-window-edges): when :include-root
	option is given, include edges of all the screen's heads

	* place-window.jl (place-window-randomly,
	place-window-centered): support multi-headed screens

	* functions.jl (current-head, current-head-dimensions,
	current-head-offset): convenience functions (uses pointer
	position to define current head)

	* functions.jl (screen-dimensions): new function

2000-04-26  John Harper  <john@dcs.warwick.ac.uk>

	* edge-flip.jl: moved `edge-flip' group under `workspaces'

	* wm-spec.jl: first attempt at implementing the new GNOME/KDE
	window manager spec. (this spec. is not yet finalised)

	* sawmill.jl: require 'define for older compilers

2000-04-25  John Harper  <john@dcs.warwick.ac.uk>

	* sm-save.jl, sm-init.jl, sawmill.jl, play-audio.jl, menus.jl,
	make-theme-preview.jl, gtkrc.jl, gnome-int.jl, frames.jl,
	customize.jl, custom.jl, compat.jl, autoload.jl, Makefile.in:
	s/sawmill/sawfish/ where appropriate

2000-04-24  John Harper  <john@dcs.warwick.ac.uk>

	* tooltips.jl: put `tooltips' customization group under `misc'

2000-04-20  John Harper  <john@dcs.warwick.ac.uk>

	* auto-raise.jl (raise-groups-on-focus): new option (in
	focus/advanced)

	* groups.jl (raise-group, lower-group): preserve the stacking
	order of the group, then raise/lower the indicated window
	(raise-lower-group): new command

	* group-funs.jl (windows-by-group, windows-in-group): added an
	optional parameter `BY-DEPTH', when t the windows are returned
	by order of depth, not creation time

2000-04-18  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (workspace-menu): fixed to put the focus marking
	asterisk when using workspace names (from John N S Gill)

2000-04-17  John Harper  <john@dcs.warwick.ac.uk>

	* custom.jl: require 'define to work around broken compiler

2000-04-15  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl (sawmill-safe-functions): added
	custom-option-alist and custom-group-option-alist

	* custom.jl (custom-groups, custom-required,
	custom-quoted-keys, custom-option-alist,
	custom-group-option-alist): these are now lexically bound

2000-04-14  John Harper  <john@dcs.warwick.ac.uk>

	* play-audio.jl (play-sample): run audio playing programs
	asynchronously so they can't block the wm

	* menus.jl (popup-menu): only set the frame-draw-mutex if
	there's a clicked frame part. This is still a kludge..

	* menus.jl: added some underscores marking menu accelerators

	* place-window.jl (place-window-interactively): set
	move-outline-mode to `box' not `nil' (from Timo Korvola)

2000-04-09  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.26

	* sawmill.jl: don't load sawmill-gaol until all functions it
	exports have been defined; set *root-structure* and
	*user-structure* to suitable values; support load-all variants;
	try to decide when to `load' and when to `require' command line
	arguments

	* sawmill-gaol.jl: should now support both rep 0.12+ and
	0.11- gaols

	* tooltips.jl, edge-flip.jl, customize.jl, custom.jl: minor
	tweaks to work with modularized rep

2000-03-30  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl (gnome-menu-read-desktop-entry): use
	xterm-program when starting in terminals (from James Antill)

2000-03-29  John Harper  <john@dcs.warwick.ac.uk>

	* decode-events.jl (decode-event): fixed typo

	* play-audio.jl (play-sample-program): new variable, a program
	to call instead of the built-in primitive-play-sample function

2000-03-28  John Harper  <john@dcs.warwick.ac.uk>

	* play-audio.jl, audio-events.jl: audio support (mapping events
	to samples, finding and playing samples)

2000-03-27  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-avoided-windows-weight): increased by
	an order of magnitude (mentioned by Dan Winship)

	* place-window.jl (place-window-randomly): use
	maximize-find-workarea then randomize within that part of the
	screen

	* maximize.jl (maximize-find-max-rectangle): new function,
	broken out of maximize-do-both
	(maximize-find-workarea): new function, a nicer interface to
	maximize-find-max-rectangle

	* iconify.jl (toggle-window-iconified): new function (from
	Jens-Ulrik Petersen <jens-ulrik.petersen@nokia.com>)

2000-03-26  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (cycle-class): use window-class (avoids error if
	any window has no WM_CLASS property)

	* functions.jl (window-class): new function

	* sawmill.jl: require window-anim

	* window-anim.jl, anim-outline.jl: support for animations after
	window events, and a simple example animation (only does
	anything when iconifying windows)

	* 3d-hack.jl: finally added this display hack (now rep 0.11 is
	required)

2000-03-21  John Harper  <john@dcs.warwick.ac.uk>

	* window-outline.jl (draw-window-outline,
	erase-window-outline): these are now implemented in lisp

	* iconify.jl (make-window-sticky): when sticking a window not
	on the current viewport, move it to the current viewport (from
	merlin@merlin.org)

	* shading.jl (raise-windows-when-unshaded): new option
	* shade-hover.jl (shade-hover-enter): use
	raise-windows-when-unshaded to implement the shade-hover-raise
	option

	* sawmill-gaol.jl: added safe `x' plugin functions (e.g. no
	window creation). Also workaround some rep versions not
	including the case special form

	* gtkrc.jl (gtkrc-light, gtkrc-dark, gtkrc-mid): new color list
	variables

	* iconify.jl (display-window): split into two functions, this
	and display-window-without-focusing

	* maximize.jl (maximize-window): call display-window-without-focusing
	on the window before maximizing it (fixes the bug of sometimes
	changing the window's viewport)

2000-03-20  John Harper  <john@dcs.warwick.ac.uk>

	* tooltips.jl (tooltips-background-color): made into a defcustom
	(tooltips-foreground-color): new option
	[ patch from Erik Assum <erik@infostream.se>, with different
	default colors ]

	* workspace.jl: defvar all hooks

	* x-cycle.jl (cycle-windows): add code to enter-workspace-hook
	to try to regrab the keyboard if we had previously grabbed on a
	window (since the window will be unmapped, thus losing the
	grab)

2000-03-14  John Harper  <john@dcs.warwick.ac.uk>

	* keymap.jl (describe-key): new command

	* prompt-wm.jl: small update from davep

	* sawmill.jl (fontset-languages-re): added ko and zh languages
	to this list, fixed to match xx_foo codes

	* keymaps.jl (global-keymap): removed A-x binding, many systems
	have A- and M- on the same keys

2000-03-13  John Harper  <john@dcs.warwick.ac.uk>

	* iconify.jl (display-window): calls prompt-for-window when
	called interactively

	* prompt-wm.jl: new file (from Dave Pearson <davep@davep.org>)

2000-03-12  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.25.2

	* customize.jl (customize-read-user-file): if no user file,
	read the custom-default-file (and thus preserve any unchanged
	default options)

	* functions.jl (locate-file): new function

2000-03-11  John Harper  <john@dcs.warwick.ac.uk>

	* stacking.jl, rects.jl, group-funs.jl, edges.jl, custom.jl:
	added some doc strings

	* stacking.jl (stack-window-below, stack-window-above): handle
	the case where the two windows aren't in the same layer

	* with-output.jl (with-output-to-screen): new macro (from
	Jens-Ulrik Petersen and Dave Pearson)

2000-03-10  John Harper  <john@dcs.warwick.ac.uk>

	* stacking.jl: avoid calling restack-by-depth since it's often
	flickery, instead raise-window, lower-window and
	stacking-after-map do all their own work, only ever using
	x-raise-window or x-lower-window

	* sawmill-gaol.jl (sawmill-safe-functions): added input-focus

	* transient.jl (transient-unmap-window): don't try to focus
	parent windows not on the current viewport

	* iconify.jl (display-window): Unconditionally uniconify the
	window, and do it _before_ doing anything else

	* sawmill.jl (fontset-languages-re): new variable. Used to test
	if current language needs to use FontSets (i.e. multibyte
	encoding)

2000-03-08  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-update-edges): new function,
	updates the list of window edges for snapping
	(move-resize-window): arrange for move-resize-update-edges to
	be called after switching workspace or viewport

	* keymaps.jl (custom-get-keymap, custom-set-keymap): filter out
	and then restore bindings to non-symbol commands (avoids trying
	to parse commands with unreadable printed representations)

	* configure.jl (configure-request-handler): use fixed-position
	property to decide whether or not to clamp window within the
	workspace boundaries

	* workspace.jl (ws-move-window, ws-copy-window): ignore cases
	where (= DEST SRC), handle other cases properly

	* workspace.jl (send-to-previous-workspace,
	send-to-next-workspace, copy-to-previous-workspace,
	copy-to-next-workspace, append-workspace-and-send,
	prepend-workspace-and-send): new optional arg SELECT, whether
	the destination space is selected. t when called interactively

2000-03-07  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-set-workspace): never place windows on
	workspaces that don't exist (from the pager's POV). (from Rob
	Hodges)

	* workspace.jl (ws-move-window): don't remove the window if
	source and destination are the same (from Rob Hodges)

	* smart-placement.jl (sp-prune-points): fixed this function
	(patch from Dan Winship <danw@helixcode.com>)

2000-03-06  John Harper  <john@dcs.warwick.ac.uk>

	* viewport.jl (move-viewport-to-window): only flip viewports if
	the window is not actually on the current viewport (from merlin)

	* version 0.25.1

	* configure.jl (configure-request-handler): only force the
	window onto the workspace if it didn't explicitly set its
	position

	* sawmill-gaol.jl (sawmill-safe-features): remembered to
	replace / with `quotient'. Real / is available as `divide'

2000-03-05  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.25

	* transient.jl (transient-unmap-window): don't try to focus
	parent windows if they're not mapped and visible

2000-03-04  John Harper  <john@dcs.warwick.ac.uk>

	* customize.jl (customize-ui-spec): don't put single widgets
	into vboxes (they don't expand properly)

	* x-cycle.jl (cycle-windows): if the window that the original
	keyboard grab was made on is unmapped, grab on the root window

2000-03-02  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (warp-cursor-to-window): clamp the warp
	coordinates to be within the screen boundaries (from Merlin)

	* prompt.jl (prompt-display-fun): function to somehow format
	the prompt contents before displaying it
	(prompt): use call-with-keyboard-grabbed

	* prompt-extras.jl (pwd-prompt): new function

	* functions.jl (call-with-keyboard-grabbed): new function,
	allows nested keyboard grabbing to work correctly (only
	ungrabbing when the outermost exits)

	* keymap.jl (read-event): use call-with-keyboard-grabbed

2000-02-29  John Harper  <john@dcs.warwick.ac.uk>

	* keymaps.jl (global-keymap): bind A-x to cc-with-output-to-screen

	* with-output.jl (call-with-output-to-screen,
	call-command-with-output-to-screen): new functions

	* prompt.jl: Method of requesting user input, with completion,
	validation, etc. From Topi Paavola <tjp@cc.jyu.fi> with a bunch
	of my dirty hacks to make it act moslty like Jade's `prompt'

	* prompt-extras.jl: Some functions ported from Jade to do more
	esoteric prompting (files, directories, from a list, etc..)

2000-02-28  John Harper  <john@dcs.warwick.ac.uk>

	* shade-hover.jl (shade-hover-enter): allow shade-hover to be
	enabled by window shade-hover property
	* match-window.jl (match-window-properties): added shade-hover

	* gnome-menu.jl: on startup, arrange to read the menus off disk
	when the wm gets its first idle cycles -- this reduces latency
	when first displaying the root-menu

2000-02-27  John Harper  <john@dcs.warwick.ac.uk>

	* edges.jl (edges-within-epsilon,
	snap-window-position-to-edges): removed the need for separate
	`hysteresis' state, much simpler now (from merlin@merlin.org)

	* iconify.jl (uniconify-window): if the window is already in
	the current workspace never remove it

	* edges.jl (snap-window-position-to-edges): replaced the
	HYSTERESIS parameter by STATE. This cons cells records previous
	delta values and any currently snapped edges
	(edges-within-epsilon): new parameter OLD-EDGE, any previously
	snapped edge. Use this in resistance mode when the direction
	changes, but the pointer is still past the edge
	(adapted from merlin@merlin.org)

	* move-resize.jl (move-resize-snap-state): replaces the
	hysteresis variable

2000-02-26  John Harper  <john@dcs.warwick.ac.uk>

	* customize.jl (customize-ui-spec): when returning a sub-group
	get all its children as well
	* custom.jl: the iconify and maximize groups are now sub groups
	of the new group min-max
	(custom-menu-includes-all-settings): new variable
	* gnome-int.jl: use the capplet for configuring again

	* workspace.jl, viewport.jl, move-resize.jl, maximize.jl,
	grow-pack.jl: change min/max :group keys

2000-02-25  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: define `quotient' as `/' unless already bound
	(backwards compatibility)

	* viewport.jl, viewport-linear.jl, tooltips.jl, size-window.jl,
	shade-hover.jl, place-window.jl, move-resize.jl, functions.jl,
	edge-flip.jl, configure.jl, auto-raise.jl: use `quotient'
	instead of `/' where appropriate

2000-02-24  John Harper  <john@dcs.warwick.ac.uk>

	* grow-pack.jl: update from Kai

	* x-cycle.jl (cycle-class): new command (from Kai Groﬂjohann)

2000-02-22  John Harper  <john@dcs.warwick.ac.uk>

	* configure.jl (configure-choose-gravity): new method of
	choosing gravity from window geometry
	(configure-request-handler): deleted the equal-ratio thing,
	it's too complex, too many grey areas and special cases

	* grow-pack.jl: new file implements ctwm-like pack and grow
	functions, from Kai Grossjohann

2000-02-21  John Harper  <john@dcs.warwick.ac.uk>

	* edges.jl (get-visible-window-edges): don't include edges from
	unmapped windows, or windows on other viewports (bug pointed
	out by Tigert)

	* edges.jl (edges-within-epsilon): only snap open edges into
	closed edges and vice versa (and only when moving towards the
	edge)

	* configure.jl (configure-request-handler): handle all sorts of
	weird cases for the `equal-ratio' hack (from John N S Gill
	<jng@renre.com>, with extra cases added by me)

	* edges.jl (snap-window-position-to-edges): new arg HYSTERESIS,
	a cons cell to buffer deltas in (adapted from merlin@merlin.org)
	* move-resize.jl (move-resize-hysteresis): new variable

2000-02-20  John Harper  <john@dcs.warwick.ac.uk>

	* keymap.jl (quote-event): new command
	* keymaps.jl (window-keymap): bind `C-M-q' to quote-event

	* configure.jl (configure-request-handler): avoid
	divide-by-zero errors

	* edges.jl (edges-within-epsilon): support three modes of
	snapping now: `magnetism' (snap in and out), `resistance' (snap
	inwards), and `attraction' (snap outwards)
	(snap-window-position-to-edges): two extra parameters, the
	snapping mode, and the move deltas since the last call

	* move-resize.jl (move-snap-mode): new option
	(move-resize-motion): handle the new snapping methods,
	including saving the previous pointer position
	(move-resize-pos): removed this function

	* sawmill.jl: changed the load order (again). Load all
	libraries _before_ loading autoloads now

2000-02-19  John Harper  <john@dcs.warwick.ac.uk>

	* place-window.jl (define-placement-mode): new function, used
	for defining placement modes
	* smart-placement.jl: use define-placement-mode

	* focus.jl: reorganized, focus modes are now implemented
	modularly, each mode as a single function. Also enable focus
	modes to be defined on a per-window basis
	(define-focus-mode): new function

	* match-window.jl (match-window-properties): allow focus-mode
	to be settable

	* size-window.jl (size-window-vertically-plus,
	size-window-vertically-minus, size-window-horizontally-plus,
	size-window-horizontally-minus): new commands, to resizing as
	slide-window is to moving

2000-02-18  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-prune-points): use a better medthod of
	pruning
	(sp-make-grid): ensure the screen edges aren't pruned

	* match-window.jl (match-window-properties): added
	`auto-gravity' option

	* configure.jl: don't infer gravity from position, it doesn't
	work too well. Instead keep position of window relative to each
	screen edge constant (unless gravity is specified)

2000-02-17  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl (match-window-properties): new boolean
	property `unique-name'

	* functions.jl (uniquify-name): new function
	(uniquify-window-name): new command

	* move-resize.jl (resize-edge-mode): new option `border-grab'

2000-02-16  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (cycle-windows): handle multiply-modified events
	by decoding the event fully (adapted from Timo Korvola
	<tkorvola@e.math.helsinki.fi>)

	* decode-events.jl (string->keysym, modifier->keysyms): new
	functions

	* edge-flip.jl (edge-flip-only-when-moving): new option (from
	Yaron M. Minsky <yminsky@cs.cornell.edu>)

2000-02-15  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (cycle-prefix): new command, look for a
	colon-delimited prefix in the name of the current window, then
	cycle around windows matching that prefix

2000-02-14  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.24

	* workspace.jl: add calls to add-to-workspace-hook and
	remove-from-workspace-hook (they must have got deleted)

2000-02-11  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-defaults.jl: remove the custom-add-required thing,
	and don't require tooltips (custom-defaults will do this)

	* sawmill.jl: do the custom-add-required thing

	* sawmill.jl: require 'configure

	* configure.jl (choose-window-gravity-by-position): sets window
	gravity by the sector of the screen that the centre of the
	window is in
	(configure-auto-gravity): customize option controlling if the
	above function is called automatically

	* configure.jl (configure-request-handler): ConfigureRequest
	events are now handled in software. This handler also groks
	window gravity (default gravity may now be overridden by the
	`gravity' window property)

	* place-window.jl (adjust-window-for-gravity): look for gravity
	first in `gravity' window property

	* place-window.jl (place-window-centered-on-parent): new window
	placement mode, option `centered-on-parent'

	* move-resize.jl (resize-edge-mode): replaces options
	resize-by-frame-class and resize-add-edges. Also allows
	twm-style resizing (adapted from Mark Probst
	<schani@mips.complang.tuwien.ac.at>)

	* decode-events.jl (decode-event, encode-events): new
	functions, map from opaque events to symbolic forms, and back

	* workspace.jl (ws-insert-workspace): fix off-by-one error if
	no BEFORE given (from Kirk Saranathan <ksaranat@yahoo.com>)

	* custom.jl (custom-add-to-group): don't add options more than once

2000-02-10  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (window-menu): don't separate extra windows from
	normal windows if no normal windows (adapted from James Antill)

2000-02-09  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl (match-window-properties): use
	placement-modes to get the list of placement options

	* place-window.jl (place-window-under-pointer): new placement
	mode `under-pointer'
	(place-window-modes): new variable, the list of all placement modes

2000-02-08  John Harper  <john@dcs.warwick.ac.uk>

	* customize.jl (customize-spec): translate group names

	* sm-init.jl (sm-init): remove -clientId as well as
	--sm-client-id options from saved-command-line-args

	* tooltips.jl (tooltips-unmapped): remove tooltips when their
	window is unmapped

2000-02-06  John Harper  <john@dcs.warwick.ac.uk>

	* maximize.jl: fixed single direction maximization toggle
	commands

	* tooltips.jl: option to display actual command documentation
	in tooltips. Use a monospaced font by default, and align the
	columns correctly

2000-02-04  John Harper  <john@dcs.warwick.ac.uk>

	* transient.jl (transient-map-window): look for
	focus-when-mapped window property
	* match-window.jl (match-window-properties): added
	focus-when-mapped

2000-02-03  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl, menus.jl: fixed for variables becoming
	functions

	* custom.jl (custom-default-file): new variable
	(custom-load-user-file): if no custom-user-file, then load
	custom-default-file (if it's non-nil)
	* custom-defaults.jl: new file

	* match-window.jl (match-window-features): new variable, map
	properties to features to load when they're set

2000-02-01  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-defaults.jl: don't (setq tooltips-enabled t)

	* move-resize.jl (move-resize-inhibit-configure): new option

2000-01-31  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl: moved customization group to the focus tree

2000-01-30  John Harper  <john@dcs.warwick.ac.uk>

	* shade-hover.jl (shade-hover-before): only look for a binding
	of the current-event if the current-event actually exists

	* version 0.23

	* gnome-menu.jl: avoid generating empty submenus

	* workspace.jl (delete-empty-workspaces): avoid infinite loop
	when empty workspaces at ends of interesting subsequence

2000-01-29  John Harper  <john@dcs.warwick.ac.uk>

	* shade-hover.jl (shade-hover-raise): new option, raise windows
	as they're unshaded

	* custom.jl (custom-menu): generate a tree of menu items, not
	just a list of the top-level groups

	* shade-hover.jl: defcustom-ized (in group Focus/Shade Hover)
	* sawmill-defaults.jl: add shade-hover to the list of features
	required by customize

	* shade-hover.jl: use window enter/notify hooks instead of
	frame parts. This means that the window stays unshaded until
	the pointer leaves the _entire window_

2000-01-28  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (root-menu): removed the `About' menu, it didn't
	work anymore anyway..

	* iconify.jl (display-window): call uniconify-window whenever
	the window is iconified, not only if it's also sticky or the
	uniconify-to-current-workspace option is set

	* shade-hover.jl: new file, temporarily unshades windows while
	the pointer is over their frame

2000-01-27  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-normal-windows-weight): new variable

	* custom.jl (custom-declare-group): don't set custom-group-doc
	of group, it's not used anywhere and is redundant

	* functions.jl (warp-to-window-x-offset,
	warp-to-window-y-offset): customization options for
	warp-cursor-to-window (patch from Kai Groﬂjohann
	<Kai.Grossjohann@CS.Uni-Dortmund.DE>)

	* viewport.jl (window-absolute-position): if the window is in
	the current viewport, return the _actual_ position, in case its
	top or left edges are off the screen

	* workspace.jl (ws-move-workspace): fixed this function
	(realized that there are four cases to the id transforms)

	* gnome-int.jl: don't use the gnome cc to invoke the
	configurator for now, they're are some issues to be resolved

	* customize.jl, custom.jl: custom groups are now organized as a
	tree. Specify the list of nodes to identify a subtree.
	Top-level groups are still addressable as single symbols. So,
	e.g., there's now a group `(appearance advanced)'

	* keymaps.jl (custom-keymap-group-widget): fixed for tree
	organization

	* workspace.jl, move-resize.jl, functions.jl, focus.jl: moved
	some customizations to `advanced' subgroups

	* sawmill-defaults.jl: add a default set of features to
	custom-required, if the user wants anymore, or has a
	.sawmillrc, they'll need to do it themselves
	* tooltips.jl, match-window.jl, edge-flip.jl, auto-raise.jl:
	don't add their features to custom-required anymore

2000-01-26  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (delete-window-safely): new command, if the
	window doesn't support the WM_DELETE_WINDOW protocol, just beep

	* viewport-linear.jl (define-linear-viewport-commands): made
	into a user-visible function

2000-01-25  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (get-window-wm-protocols): new function, returns
	a list of atoms
	(delete-window): now defined in lisp

	* slide-window.jl: provide 'slide-window

	* move-cursor.jl: new file, commands to move the cursor
	* move-resize.jl (move-resize-map): added bindings to cursor
	movement commands

2000-01-24  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (x-cycle-next): ignore windows with never-focus
	set, for obvious reasons

	* raise-commands.jl (raise-or-pass-through-click): new function

	* workspace.jl (window-menu): fix bug when calling make-label
	for sticky windows

2000-01-23  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl: removed `order' from the swapped properties,
	doesn't work very intuitively

	* gnome-menu.jl: support for the `TryExec' field (from
	Ian <ijc25@cam.ac.uk>)

	* raise-commands.jl: new file, moves the
	raise-window-and-pass-through-click from stacking.jl, and
	adds raise-and-pass-through-click-if-focused

2000-01-22  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl, move-resize.jl: require at compile time those
	modules whose variables we bind to

	* maximize.jl (maximize-window, unmaximized-window): use
	move-resize-window-to instead of separate calls

2000-01-21  John Harper  <john@dcs.warwick.ac.uk>

	* window-order.jl (window-order-focus-most-recent): ignore
	windows with their `never-focus' property set

	* ignore-window.jl (toggle-window-never-focus): new command
	* menus.jl (window-ops-toggle-menu): added `Focusable' item

	* edge-flip.jl (edge-flip-while-moving): only move non-sticky
	windows to the new workspace when flipping

	* move-resize.jl, menus.jl, frames.jl: removed all uses of
	`beep' to signal user errors, either ignore the error, or
	signal a real error

2000-01-20  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (window-menu): include iconified windows, even
	when they're ignored; shorten sticky entries as usual (patch
	from James Antill)

	* move-resize.jl (move-resize-window): set
	synthetic-configure-mutex to t while moving

	* move-resize.jl (move-resize-finished, move-resize-apply): use
	move-resize-window-to to do simultaneous move&resize --
	elminates flicker

	* match-window.jl: in workspace setter function, convert the id
	from logical to physical where needed. Also, commented out the
	call to select the workspace

	* workspace.jl (workspace-id-to-logical,
	workspace-id-from-logical): functions for converting between
	workspace ids and offsets

	* gnome-match.jl: fix the property names I'd forgotten to change

	* maximize.jl (maximize-truncate-dims): fixed the truncation
	method

2000-01-19  John Harper  <john@dcs.warwick.ac.uk>

	* error-handler.jl: new file, displays rep errors in a message
	window

	* version 0.22

	* sawmill-gaol.jl: added most new frame-part functions

	* match-window.jl: adds its hook at the _end_ of
	before-add-window-hook
	* gnome.jl: adds its hook at the _start_ of
	before-add-window-hook

2000-01-18  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-match.jl: new file, adds skip-winlist and skip-tasklist
	properties to window matching (from Ben Liblit
	<liblit@cs.berkeley.edu>)
	* gnome.jl: if match-window has already been loaded, load
	gnome-match, otherwise arrange for gnome-match to be loaded
	immediately after match-window

2000-01-15  John Harper  <john@dcs.warwick.ac.uk>

	* iconify.jl (uniconify-window): when removing a window to put
	it onto the current workspace, ensure it's not hidden
	temporarily

2000-01-14  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-client-message-handler): change how
	WIN_STICKY and WIN_SHADED states are handled, don't bother with
	the cumbersome toggle method, just set the states directly

	* functions.jl (call-after-property-changed): can now be given
	a _list_ of X properties to monitor
	(call-after-state-changed): new function, monitors a list of
	window states (i.e. things like iconified, shaded, ...) and
	calls a function when any of them change. The
	window-state-change-hook now has a second argument (apart from
	the window), the list of symbolic states that changed
	* iconify.jl, ignore-window.jl, maximize.jl, shading.jl,
	stacking.jl: call window-state-change-hook with the list of
	changed states
	* iconify.jl, gnome.jl: use call-after-state-changed to prevent
	updating X properties that don't need changing
	* sticky.jl (make-window-sticky, make-window-unsticky): merge
	sticky and sticky-viewport properties more correctly
	* sawmill-gaol.jl: add call-after-state-changed to the list of
	safe functions
	[ these are mostly by James Antill <james@and.org> ]

	* sawmill.jl: load gettext _before_ loading standard libraries,
	otherwise many strings aren't translated up correctly

2000-01-12  John Harper  <john@dcs.warwick.ac.uk>

	* tooltips.jl, move-resize.jl, menus.jl: updated for changes to
	frame-part functions

2000-01-11  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-defaults.jl: removed default-font setting

	* frames.jl (mark-frame-style-editable, frame-style-editable-p,
	edit-frame-style): new functions (keeps track of which themes
	are defined using make-theme, and hence are editable)
	(sawmill-themer-program): variable naming program to launch to
	edit a theme

	* custom.jl (custom-menu): if the current theme is editable,
	add an entry for the edit-frame-style command

	* sawmill-gaol.jl (sawmill-safe-functions): added
	mark-frame-style-editable

2000-01-10  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl (gnome-menu-read-order): ensure that blank
	lines in .order files are ignored

	* keymaps.jl (window-keymap): bind move-window-interactively to
	M-Button1-Move not M-Button1-Click1. Pointed out by Matt Krai
	<krai@ghs.com>

	* gnome-menu.jl (gnome-menu-read-desktop-entry): handle null
	names when building menu items

2000-01-09  John Harper  <john@dcs.warwick.ac.uk>

        * iconify.jl (toggle-single-window-mode): set
        raise-windows-on-uniconify to nil while executing this command

	* version 0.21

	* iconify.jl (toggle-single-window-mode): new function

	* group-funs.jl (map-other-window-groups): new function

	* gnome.jl (gnome-event-proxyer): only proxy root button clicks
	if we don't want to keep the grab so as to receive future
	events

2000-01-08  John Harper  <john@dcs.warwick.ac.uk>

	* make-theme.jl (make-theme): memoize images as they're loaded
	so each one is only loaded once (no built-in image caching
	anymore)

	* frames.jl (reload-themes-when-changed): new defcustom
	(theme-update-interval): new variable, defaults to 60 seconds

	* frames.jl (reload-frame-style): new function, reload the
	named style, then reframe any windows using it

2000-01-07  John Harper  <john@dcs.warwick.ac.uk>

	* make-theme.jl (make-theme): handle the new pattern output
	from the themer (alist of states)

	* frames.jl (highlight-when-unfocused): deleted the defcustom,
	the variable has been removed

	* workspace.jl (workspace-swap-in): swap in the saved
	properties before the geometry, so that state is set by the
	time the window-moved and window-resized hooks are run

2000-01-04  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-int.jl: new file, sets some things, deletes some menu
	items; tries to integrate further with GNOME

	* sawmill-defaults.jl: if it looks like we're running under
	GNOME, require gnome-int

2000-01-03  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl (sawmill-safe-functions): added the
	maximization predicates

	* maximize.jl (unmaximize-window): ensure that the window isn't
	maximized-p when it's moved and resized

	* make-theme-preview.jl (make-theme-preview): new optional arg TYPE

	* workspace.jl (ws-add-window-to-workspace): ensure that
	iconified windows are hidden
	(ws-add-window): fix adding of iconified sticky	windows

	* iconify.jl (uniconify-window): fix the ``uniconify to current
	workspace'' option by reordering conditions

2000-01-02  John Harper  <john@dcs.warwick.ac.uk>

	* make-theme.jl: image decls now have attributes

1999-12-31  John Harper  <john@dcs.warwick.ac.uk>

	* make-theme.jl, make-theme-preview.jl: initial support for GUI
	theme builder
	* sawmill-gaol.jl: make-theme is safe to call

1999-12-24  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-set-workspace): set _WIN_AREA properties on
	client windows; by my reading of the spec this isn't correct,
	but the GNOME tasklist applet seems to require it

1999-12-21  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-map): Any-RET now completes the
	move or resize

	* tooltips.jl (tooltips-timeout-enabled): support for removing
	tooltips after a period of time (from Morgan Schweers
	<mrs@BEST.COM>)

	* edge-flip.jl (edge-flip-while-moving): fixed for new
	ws-move-window function; also, let edge-flip-delay be zero, to
	avoid nasty delayed effects

1999-12-20  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl (match-window-grab-x-property): if a string,
	quote regexp meta-characters

1999-12-19  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.20

	* match-window.jl (match-window): fix bug when matching against
	zero-element vectors

	* match-window.jl: added new pseudo property `ungrouped'
	meaning to put windows in their own anonymous group

	* menus.jl (window-ops-menu): removed/shortened a few items

1999-12-18  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl: define copy-to-workspace:N commands.
	Fixed some problems with the merge-when-empty feature

1999-12-17  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (delete-window-instance): new command

	* viewport-linear.jl: new file, based on code posted by Eric
	Kidd <eric.kidd@pobox.com> to the mailing list

	* sawmill.jl: require iconify, set define-value if unbound

	* menus.jl (menu-preprocessor): removed the deprecated
	variable-expansion thing

	* iconify.jl: new file, extracted from workspace.jl

	* frames.jl, custom.jl, workspace.jl: use closures to create
	dynamic commands

1999-12-16  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-pos): move the position
	calculation to a separate function, fixes the problem of
	showing incorrect details while snapping (from merlin@merlin.org)

	* move-resize.jl (move-resize-apply): check that the window
	isn't being placed totally off-screen in either dimension

1999-12-15  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (workspace-swap-in): handle frame-style
	specially (use knowledge that if frame-style property isn't
	set, then we should use the default-frame-style)
	(add-swapped-properties): new function
	* sawmill.jl: require 'workspace earlier

	* window-order.jl, stacking.jl, shading.jl, maximize.jl,
	frames.jl: use add-swapped-properties

	* gnome.jl (gnome-set-workspace): show windows on the workspace
	theyre currently swapped into, not the closest to the current one

	* sm-init.jl (sm-add-saved-properties): only add properties once

1999-12-14  John Harper  <john@dcs.warwick.ac.uk>

	* tooltips.jl (tooltips-delay): reduced to 500ms

	* gnome.jl (gnome-set-workspace): don't set _WIN_WORKSPACE
	property of sticky windows

	* workspace.jl: rewritten to use a cleaner set of abstractions,
	but more importantly to allow windows to appear on multiple
	workspaces (and to have different properties on each)

	* x-cycle.jl, window-order.jl, smart-placement.jl, menus.jl,
	match-window.jl, gnome.jl: updated to use the new workspace
	interface

	* viewport.jl (window-absolute-position): new function

	* functions.jl (map-windows): new macro, map a function over
	all windows

1999-12-13  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl (gnome-menu-read-desktop-entry): recurse into
	directories if the desktop file is called ".directory", not if
	it has Type=directory (these may actually be files)

	* tooltips.jl: ignore null keymaps; yellow background color

	* sawmill-defaults.jl: turn on tooltips by default

	* tooltips.jl: massively simplified how we know when to remove
	the tooltip window--just hook into pre-command-hook and
	frame-part-leave-hook

	* stacking.jl (raise-window-and-pass-through-click): only call
	forget-button-press if a frame part isn't clicked

	* gnome-commands.jl (gnome-logout): should be --kill not --quit
	(from Jens Finke <pearl@darkride.net>)

1999-12-12  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.19

	* x-cycle.jl: disable tooltips while cycling

	* tooltips.jl: new file, implements tooltips for frame parts
	with keymaps

	* window-order.jl: hack around the annoying behaviour when
	switching workspace with sticky windows existing

	* move-resize.jl (move-resize-window): if
	move-resize-raise-window is set, and mode is not opaque, then
	raise the window _after_ the move/resize

1999-12-10  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (window-in-workspace-p,
	windows-share-workspace-p): new functions, first attempt at
	abstracting workspace interface; only gnome.jl groks the
	`workspace' property now (though others use it as a black box)

	* x-cycle.jl, window-order.jl, stacking.jl, smart-placement.jl:
	use window-in-workspace-p and windows-share-workspace-p

	* select-window.jl, move-resize.jl: the foo-cursor-shape
	variables may now contain actual cursor objects

	* custom.jl (custom-menu): gettextized a string

1999-12-09  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl (gnome-menu-read-directory): sort entries whose
	order wasn't specified by a `.order' file

	* keymaps.jl (custom-set-keymap): ensure that we ungrab the
	keymap _before_ destructively modifying the original value, not
	afterwards

	* workspace.jl (ws-set-client-state): WM_STATE property should
	have two values, not only one

	* customize.jl (default-bevel-percent): defcustom for this new
	built-in variable

1999-12-08  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: recognize -clientId as a synonym for
	--sm-client-id; always look for --disable-nls option

	* menus.jl (window-ops-toggle-menu): into a separate variable

	* match-window.jl: added `never-focus'; added `size' pseudo
	property; negative `position' components count in from the
	right/bottom

	* gnome.jl (gnome-honour-client-state): recognize panel and gmc
	icons by WM_CLASS. Set `never-focus' property of icons

	* gnome-commands.jl (gnome-logout): new command

	* functions.jl (window-really-wants-input-p): look for a
	property `never-focus'
	(resize-window-with-hints): resize window by increments

	* focus.jl: add `never-focus' to the properties saved with the
	session

	* stacking.jl (raise-window-and-pass-through-click): call
	forget-button-press so that double-clicks pass through okay

1999-12-07  John Harper  <john@dcs.warwick.ac.uk>

	* auto-raise.jl (raise-windows-on-focus): this may no longer be
	a regexp, instead there's a window property `raise-on-focus'
	allowing per-window settings
	* move-window.jl, x-cycle.jl (move-resize-window,
	cycle-windows): disable auto-raising when appropriate
	* match-window.jl: added new property `raise-on-focus'

	* frames.jl (define-frame-class): if creating a keymap, make
	its variable special

	* match-window.jl (match-window-grab-x-property): new function,
	used by the ui to grab properties

	* custom.jl (custom-declare-variable): fix conversion of old
	`set' types to the new method

1999-12-06  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (define-frame-class): if creating a keymap, add it
	to the gaolled environment

	* menus.jl (popup-apps-menu): fixed (from GÈrard Milmeister
	<gemi@bluewin.ch>)

1999-12-05  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.18

	* x-cycle.jl, move-resize.jl, keymap.jl: replaced show-message
	by display-message

	* menus.jl (window-ops-menu, root-menu): just use function
	names of dynamic sub-menus, don't create closures

1999-12-04  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (rebuild-frames-with-style,
	reframe-windows-with-style): new functions

	* maximize.jl (maximize-window): respect the window's size
	hints, both to see if the window is maximizable, and to
	truncate the maximized dimensions to an integral size

1999-12-03  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (select-workspace): only hide/show windows whose
	`placed' property is set

	* x-cycle.jl (x-cycle-modifier-alist): support the Hyper
	modifier

	* workspace.jl (ws-after-removing-window): fix the logic
	deciding when it's necessary to switch workspaces after merging

	* x-cycle.jl (cycle-windows): grab the keyboard to the
	currently focused window, prevents the ``lose focus with a
	single bug''

	* move-resize.jl (resize-add-edges): new option, controls
	whether single direction resizes can be upgraded to two
	directions

	* smart-placement.jl (sp-max-queued-events): increased from 20
	to 256, seems to still have the desired effect (passes the
	`gimp /usr/share/pixmaps/*.png &' test)

1999-12-02  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl: added pseudo-properties: position and
	viewport

	* workspace.jl, viewport.jl, gnome.jl, focus.jl: changed
	property names: fixed-position => sticky-viewport, and
	focus-proxy-click => focus-click-through

	* menus.jl (menu-preprocessor): deprecated the ``expand
	variables when first in list'' behaviour, it's too crufty to
	live. Now we have lisp-1 behaviour it's possible to expand
	variables when the list is dotted to them, as was previously
	done only for functions
	* gnome-menu.jl: changed how apps-menu is hijacked

	* workspace.jl, transient.jl, stacking.jl, group-funs.jl,
	functions.jl, frames.jl: removed all the auto-foo-alist and
	bar-windows-re variables -- match-window can do all this stuff
	in one place

	* frames.jl (site-theme-directory): new variable, put in the
	theme-load-path, set to ${prefix}/share/sawmill/themes by default

1999-12-01  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl: added customize support

	* custom.jl: deprecated the `(set SYMBOLS..)' type, replaced by
	`symbol' with an extra tag `:options (SYMBOLS...)'
	(custom-get-options, custom-add-option): new macros for
	extending symbol-type defcustom's

	* workspace.jl, stacking.jl, place-window.jl, move-resize.jl,
	focus.jl, edge-flip.jl, customize.jl: work with the new
	`symbol' custom type

1999-11-30  John Harper  <john@dcs.warwick.ac.uk>

	* match-window.jl: new file, a method of matching windows (by
	their X properties) to sawmill window properties without the
	need for custom hook functions. Will get a GUI at some point

1999-11-29  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (warp-cursor-to-window): rewritten in lisp; also
	when given no position it focuses on the inside top-left corner
	of the frame, should overlay more frame styles

	* maximize.jl (maximize-expand-edges): fix typos from updates
	for single namespace (GÈrard Milmeister <gemi@bluewin.ch>)

	* workspace.jl: reworked the map-notify and unmap-notify hook
	functions; they work again now

	* compat.jl (show-message): implemented in terms of the new
	display-message function

1999-11-28  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.17

	* menus.jl (window-ops-menu): added some more `Toggle' items

	* ignore-window.jl: new file, mostly by Julian Missig
	<julian@linuxpower.org> (X-ViRGE) controls the `ignored'
	property of windows on-the-fly

	* gnome.jl: call gnome-set-client-list from the
	workspace-state-change-hook

	* gnome-commands.jl: new file, a few commands to toggle the
	skip-tasklist and skip-winlist hints

1999-11-26  John Harper  <john@dcs.warwick.ac.uk>

	* keymaps.jl (custom-set-keymap): catch and ignore errors when
	parsing event descriptions

	* place-window.jl (place-window): adjust position for window
	gravity (mostly from merlin <merlin@merlin.org>)

	* slide-window.jl: new file, commands to move windows/groups
	incrementally

1999-11-25  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl, workspace.jl, window-order.jl, viewport.jl,
	transient.jl, stacking.jl, smart-placement.jl, sm-save.jl,
	sm-load.jl, sm-init.jl, shading.jl, server.jl, sawmill.jl,
	sawmill-gaol.jl, rects.jl, place-window.jl, open-look.jl,
	mwm.jl, move-resize.jl, menus.jl, maximize.jl, keymaps.jl,
	keymap.jl, gtkrc.jl, groups.jl, group-funs.jl, gnome.jl,
	gnome-menu.jl, functions.jl, frames.jl, focus.jl, edges.jl,
	edge-flip.jl, customize.jl, custom.jl, auto-raise.jl: updated
	for single namespace and scheme-like function semantics

1999-11-20  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl, workspace.jl, move-resize.jl, maximize.jl,
	group-funs.jl, frames.jl, edge-flip.jl, customize.jl: rewrote
	documentation for some options

1999-11-19  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: check LC_ALL and LC_MESSAGES before LANG

	* gnome-menu.jl (gnome-menu-lang): look in LC_ALL before LANG
	(gnome-menu-read-desktop-entry): accept wider language types

	* sm-init.jl (sm-init): use process-id instead of getpid

	* viewport.jl, custom.jl: remerged viewport and workspace
	custom groups

	* viewport.jl (window-outside-workspace-p): fixed for off left
	or top of workspace

	* sawmill.jl: load i18n support when $LANG is defined and != `C'

1999-11-18  John Harper  <john@dcs.warwick.ac.uk>

	* transient.jl, auto-raise.jl: change some custom docs

	* workspace.jl, menus.jl, keymap.jl, group-funs.jl,
	gnome-menu.jl, frames.jl, customize.jl: mark strings for i18n

	* frames.jl (find-all-frame-styles): sort case-insensitively

1999-11-17  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-gaol.jl (sawmill-safe-functions): removed window-put

	* stacking.jl (raise-window-and-pass-through-click): new
	command

1999-11-15  John Harper  <john@dcs.warwick.ac.uk>

	* gtkrc.jl: call gaol-rebuild-environment after being loaded

	* sawmill-gaol.jl: added the gradient functions to the list
	(since the gaol now handles non-fboundp functions)

1999-11-11  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (themes-are-gaolled): new variable, set it to nil
	to remove the gaol around loaded themes

	* sawmill-gaol.jl: new file, customize rep's gaol for sawmill
	* sawmill.jl: require sawmill-gaol

	* functions.jl (call-after-property-changed): new function, a
	safe alternative to property-notify-hook (only accepts closures)

	* gtkrc.jl: add safe functions and variables to the gaol
	(gtkrc-call-after-changed): safe alternative to gtkrc-changed-hook

1999-11-10  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl, menus.jl, group-funs.jl, gnome-menu.jl,
	frames.jl, custom.jl: updated for lexically scoped rep

1999-11-09  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-window-mapped): call ws-add-window to move
	the window to the correct workspace

	* place-window.jl: fix interactive placement

	* gnome-menu.jl (gnome-share-directory): fix PATH searching

1999-11-07  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.16

	* gtkrc.jl: moved some code back to the gtk theme, since it's
	pretty non-reusable; don't load bg pixmaps unless asked to by
	the theme; new variable gtkrc-base

1999-11-06  John Harper  <john@dcs.warwick.ac.uk>

	* group-funs.jl: added a third type of group id: symbols for
	user defined named groups, only these are session-managed
	(auto-group-alist, persistent-group-ids): new variables

	* functions.jl (get-window-by-id): deleted, now a subr

	* group-funs.jl: moved all window groups functions froms
	functions.jl to this new file. Added support for user-defined
	groups--the `group' property may define the group-id of a
	window (so far always an integer, but eq is okay)
	* sawmill.jl: require 'group-funs

	* menus.jl (window-ops-menu): slightly reorganised, added a
	submenu for the window's group

1999-11-05  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (cycle-group): new command, cycle through all
	windows in the group of the current window

	* x-cycle.jl (x-cycle-next): abort immediately if there's no
	windows to cycle through

	* place-window.jl: placement modes are now defined by symbols
	having the `placement-mode' property--a function to call

	* smart-placement.jl (place-window-first-fit-or-interactive):
	new placement mode, fall back to interactive placement if
	there's not enough space for the window

	* move-resize.jl (move-cursor-shape, resize-cursor-shape): new
	variables
	* select-window.jl (select-window-cursor-shape): new variable

1999-11-04  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (iconify-whole-group, uniconify-whole-group):
	new options
	(make-window-sticky, make-window-unsticky): new commands
	(uniconify-to-current-workspace, raise-windows-on-uniconify,
	focus-windows-on-uniconify): moved to iconify group

	* groups.jl: new file, provides window-group variants of many
	window commands

	* functions.jl (transients-are-group-members): new option, put
	transient windows in the same group as their parent window

	* custom.jl: added `iconify' group
	* viewport.jl (uniconify-to-current-viewport): moved to iconify
	group

	* menus.jl (popup-menu): when specifying a position, ensure
	that it's not less than zero

	* functions.jl (windows-in-group, map-window-group): new
	functions

	* menus.jl (popup-menu): ungrab the keyboard as well as the
	pointer

1999-11-03  John Harper  <john@dcs.warwick.ac.uk>

	* gtkrc.jl (gtkrc-background-colors): new variable, always set
	to the list of background colors

	* frames.jl (theme-suffix-regexps): fixed for `.tar' suffix

1999-11-02  John Harper  <john@dcs.warwick.ac.uk>

	* edge-flip.jl: reinstated the separate edge-flip custom group

	* gnome-menu.jl: scan $PATH for gnome-share-directory, added
	/etc/X11/applnk to list of directories, added code to merge
	duplicated sub-menus

	* move-resize.jl (move-resize-window): don't abort if it's not
	possible to grab the keyboard, only the ESC binding depends on it

	* edge-flip.jl (edge-flip-type): new option, allows the user to
	choose to flip workspaces, not viewports

1999-11-01  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl: catch and ignore errors when opening files

	* maximize.jl (maximize-fill-window): use dont-avoid-ignored
	variable instead of non-existent avoid-ignored

	* functions.jl (dont-avoid-ignored): set to t by default

	* frames.jl (find-all-frame-styles): ignore duplicates

1999-10-31  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.15

	* move-resize.jl (move-resize-motion): use call-window-hook to
	invoke the while-moving-hook and while-resizing-hook

	* sawmill.jl (fallback-frame-style): now set to microGUI

	* keymaps.jl (custom-set-keymap): preserve eq-ness of old and
	new keymap when overwriting an existing keymap definition

1999-10-30  John Harper  <john@dcs.warwick.ac.uk>

	* custom.jl: added a viewport customization group
	* viewport.jl, edge-flip.jl: options now in viewport group

	* edge-flip.jl: only require things when they're actually
	needed

	* menus.jl: removed the unneeded custom-require autoload

	* edge-flip.jl: let this be enabled/disabled via customization

	* frames.jl (frame-style-directory): themes in tar files are
	now expected to have a top-level directory with the same name
	as the theme

1999-10-29  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-motion): when only one edge is
	being resized, and the pointer moves past the end of that edge,
	start resizing that edge as well

	* workspace.jl (delete-empty-workspaces): new command

	* focus.jl (focus-push-map, focus-pop-map): functions for
	installing and remove the click-to-focus map, they preserve the
	original keymap

1999-10-28  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-make-grid): sort the grid (so
	first-fit always works from top-left)

	* viewport.jl (window-outside-viewport-p): don't include
	windows at the left border of the next viewport (from Andreas
	Degert <ad@papyrus-gmbh.de>)

	* custom.jl: removed support for old-style ~/.sawmill-custom
	files

	* focus.jl (click-to-focus-keymap): only bind the first three
	mouse buttons (the others are often apparently used for the
	wheel thing)

1999-10-27  John Harper  <john@dcs.warwick.ac.uk>

	* rects.jl (rectangles-from-windows): replace the weight-alist
	parameter by weight-fun, an optional function to return the
	window's weight

	* functions.jl (avoided-windows-re, window-avoided-p,
	avoided-windows): moved from maximize.jl and generalized,
	property to set is now `avoid' instead of `maximize-avoid'
	* maximize.jl: use the common avoided windows mechanism
	* gnome.jl: set `avoid' property not `maximize-avoid'

	* smart-placement.jl (sp-important-windows,
	sp-auto-weight-alist): deleted these variables, any windows
	that aren't avoided-p get given weight sp-avoided-windows-weight;
	other windows can have their `placement-weight' property set

	* stacking.jl (transients-above): changed default value to none

	* move-resize.jl: use query-button-press-pointer instead of
	query-last-pointer

	* maximize.jl (maximize-avoided-windows): don't include
	unmapped windows

	* maximize.jl (maximize-expand-edges): rewrote the (not
	maximize-always-expands) case, so that it works (find the
	largest gap)

1999-10-26  John Harper  <john@dcs.warwick.ac.uk>

	* sm-load.jl (sm-match-window-to-alist): match isn't successful
	_unless_ either SM_CLIENT_ID or WM_COMMAND matches

	* move-resize.jl (move-resize-motion): call while-moving-hook
	or while-resizing-hook in between erasing the old outline and
	drawing the new one

	* edge-flip.jl (edge-flip-while-moving): make edge flipping
	work while dragging windows

	* maximize.jl (maximize-expand-edges): fix problem with
	immediately adjacent edges being ignored

	* functions.jl (uniquify-list): new function
	* edges.jl, rects.jl (grid-from-edges, grid-from-rectangles):
	uniquify the grid

1999-10-25  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.14.2

	* maximize.jl (maximize-do-both): sort grid before passing it
	to rectangles-from-grid, this stops things going _really_
	ballistic

	* edge-flip.jl: new file, viewport flipping by pushing the
	pointer against the screen edges

	* viewport.jl (set-screen-viewport, move-viewport): document
	that these now return t if they actually move the viewport

	* version 0.14.1

	* maximize.jl (maximize-do-both): only choose rectangles that
	are fully on the screen

	* rects.jl (rect-wholly-visible-p): new function

	* rects.jl (rectangles-from-grid): fixed this function (only
	traversing the list of y points once)

	* smart-placement.jl (sp-do-placement): fix for when
	sp-important-windows is nil

	* maximize.jl (maximize-do-both): deleted unused `center'
	variable
	(maximize-window): delete the window itself from the list of
	avoided windows
	(both from Rob Hodges <s323140@student.uq.edu.au>)

1999-10-24  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.14

	* workspace.jl (static-workspace-menus): expanded some items
	* menus.jl (root-menu): swapped position of Workspace and
	Window menus

	* place-window.jl (place-window-interactively): swallow any
	pending X events before doing the interactive placement

	* frames.jl: reframe the window when it's shape changes (in
	case it changed from unshaped to shaped, or vice versa)

	* move-resize.jl (resize-by-frame-class): new option, link
	edges moved when resizing to the clicked frame part, not to the
	mouse position (so the behaviour matches the cursor shape)

1999-10-23  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (window-ops-menu): cleaned up a bit; added some more
	items

	* stacking.jl (transients-above): replaces the
	transients-above-parents option

	* viewport.jl (uniconify-to-current-viewport): new option

	* stacking.jl (raise-window-depth): add restack-by-depth to the
	after-initialization-hook

1999-10-22  John Harper  <john@dcs.warwick.ac.uk>

	* maximize.jl (maximize-avoided-windows): look for a
	maximize-avoid property

	* gnome.jl (gnome-honour-client-state): for panel windows, set
	the focus-proxy-click and maximize-avoid properties

	* menus.jl: set frame-draw-mutex while menus are popped up

	* keymaps.jl (menu-button-keymap): bind popup-window-menu to
	`Button1-Click1' instead of `Button1-Off'

	* sawmill.jl: if the root window has any property whose name
	starts with `GNOME_', then require 'gnome

	* menus.jl (popup-menu): if the menu is popped from a frame
	part whose class ends in `-button', align the menu to the
	bottom-left corner of the button

1999-10-21  John Harper  <john@dcs.warwick.ac.uk>

	* maximize.jl (maximize-ignore-when-filling): new option, other
	cleanups

	* custom.jl: added `maximize' group
	* move-resize.jl (move-lock-when-maximized): now in maximize
	group

	* maximize.jl: handle 2D maximization separately, look for the
	largest rectangle that doesn't contain any reserved windows

	* rects.jl: new file, operations on rectangles, some functions
	copied from smart-placement.jl and renamed, some new functions
	* smart-placement.jl: use rects.jl

	* edges.jl (grid-from-edges): new function

1999-10-20  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (def-frame-class): new macro

	* keymaps.jl (window-keymap): bind popup-window-menu to
	button-press not button-release event

	* move-resize.jl (move-lock-when-maximized): new option, lock
	geometry on x/y/both axes depending how the window is maximized
	* menus.jl (popup-menu): pass the server timestamp argument
	across

	* maximize.jl: discard/update maximized window state when
	window is moved or resized

	* move-resize.jl: call hooks before-move-hook, after-move-hook,
	before-resize-hook, and after-resize-hook

	* maximize.jl (maximize-avoided-windows-re): new option,
	controls which windows shouldn't be obscured when maximizing.
	Also added `maximize-fill' commands, these maximize a window
	without obscuring any other windows. 2D maximization is treated
	as two 1D maximizations, this is sub-optimal..
	* menus.jl (window-ops-menu): added maximize-fill menus

	* edges.jl (get-visible-window-edges): new arg :windows,
	supplies the list of windows to include. The edge structure is
	now (X Y1 Y2 OPEN-P) or equiv. where OPEN-P defines if the edge
	opens or closes a window

1999-10-19  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-roundup): take an optional MAX
	argument, from the window's size hints

	* place-window.j: added `centered' placement style

	* menus.jl (popup-menu): if the spec is a function, call it

1999-10-18  John Harper  <john@dcs.warwick.ac.uk>

	* viewport.jl: added window-order-focus-most-recent to the
	viewport-moved-hook

	* gtkrc.jl (gtkrc-apply-style): fall back to default-font if
	the gtk style font isn't available

1999-10-17  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.13

	* stacking.jl, transient.jl: moved the code to handle raising
	transient windows on mapping to stacking.jl, renamed
	transient-layer-delta as transient-depth, this is now the
	_minimum_ depth

	* frames.jl: support for loading themes stored in tar files

	* gnome.jl (gnome-honour-client-state): disable use of the
	_WIN_MAXIMIZED_ hints, since it doesn't work properly, and it
	breaks other stuff

1999-10-15  John Harper  <john@dcs.warwick.ac.uk>

	* transient.jl (transient-layer-delta): new variable
	(transient-map-window): don't only raise windows with parents

	* Makefile.in: use old method of compiling lisp files, just
	call compile-lib-batch

	* compat.jl: new file, provide some compatibility for obsolete
	functions
	* sawmill.jl: require 'compat

	* workspace.jl: renamed ws-workspace-limits as workspace-limits
	and ws-workspace-empty-p as workspace-empty-p

1999-10-14  John Harper  <john@dcs.warwick.ac.uk>

	* smart-placement.jl (sp-max-queued-events): new variable, acts
	as a throttle, revert to random placement when more than this
	many X events are pending

	* transient.jl (transient-unmap-window): added to
	iconify-window-hook

	* frames.jl (set-frame-part-value): new function

1999-10-13  John Harper  <john@dcs.warwick.ac.uk>

	* sm-init.jl (sm-after-restore-hook): new hook

	* window-order.jl: after loading session compress the stack
	(window-order-compress): remove `order' properties of windows
	not in the order stack

	* move-resize.jl: typing `ESC' during move/resize cancels the
	operation, restoring the original geometry

	* workspace.jl (select-workspace): only call
	window-order-focus-most-recent if not in enter-exit focus mode

	* transient.jl (transient-unmap-window): unless enter-exit
	focus mode, refocus the most recently focused window

	* smart-placement.jl (sp-prune-points): try to prune the grid
	of tested positions (otherwise the algorithm becomes
	intractable for large numbers of windows)

	* gnome.jl: don't use WIN_AREA to preserve window->viewport
	mapping during restart

	* viewport.jl: don't move all windows to single viewport on
	exit
	(move-window-to-current-viewport): only move if the window is
	really outside the viewport

	* stacking.jl: hook into map-notify-hook instead of
	reparent-notify-hook (which isn't called any longer)

	* gnome.jl (gnome-set-client-list): include ignored clients
	(gnome-ignored-windows-in-client-list): new variable, defaults
	to t

1999-10-12  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (highlight-when-unfocused): declare this option

	* viewport.jl (window-outside-workspace-p): fix bug

	* workspace.jl (ws-move-window): only move a window if it's not
	already on the destination workspace

	* viewport.jl (window-viewport): new function

	* gnome.jl: use _WIN_AREA properties on windows to preserve
	window->viewport mapping during restart

	* viewport.jl (viewport-before-exiting): add this to the
	before-exit-hook instead of an anonymous function

1999-10-10  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.12

	* workspace.jl (ws-add-window): if window is iconified hide it
	(ws-remove-workspace): twiddle first-interesting-workspace if
	necessary

	* workspace.jl (ws-saved-state): fixed

	* customize.jl (default-font): add after-setting-frame-option
	as :after-set function 

1999-10-08  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (select-workspace): grab the server while
	hiding/showing windows, should decrease the actual number of
	grabs required

	* functions.jl (ignore-window-input-hint): t by default (law of
	least-surprises..)

1999-10-07  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (window-type): handle the decorate-transients
	property here now, instead of in set-window-frame-style

	* place-window.jl (place-window): ignore-program-position may
	now be set for each window
	(place-window-randomly): handle dimensions >= the screen
	* smart-placement.jl (sp-do-placement): handle window
	dimensions near or greater the screen size better

	* workspace.jl (lock-first-workspace): enabled by default (too
	many people think the other behaviour is a bug)

	* viewport.jl (window-outside-viewport-p): new function

	* window-order.jl (window-order): new optional arg ALL-VIEWPORTS

	* x-cycle.jl (cycle-all-viewports): new option

	* workspace.jl (lock-first-workspace): this option now locks
	the last interesting workspace as well as the first
	(ws-normalize-indices): normalise the first- and
	last-interesting-workspace variables
	(ws-load-state): don't treat saved workspace indices as logical
	indices (this could merge workspaces)

	* frames.jl (frame-style-menu): affect the current-event-window
	instead of the input-focus

	* gnome.jl: map _WIN_HINTS_SKIP_FOCUS to our ignored property,
	remove hack of matching window names

1999-10-06  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (window-type-remove-title,
	window-type-remove-border): map shaped-transient to unframed

	* gnome-menu.jl (gnome-menu-read-desktop-entry): bug fix when
	type isn't specified

	* menus.jl (popup-apps-menu): new command

1999-10-05  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl: set the _WIN_UNIFIED_AREA root property; I'm using
	this to tell desk-guide to move the viewport on all desktops at
	once, this may have to change..

	* x-cycle.jl (cycle-disable-auto-raise): new option

	* x-cycle.jl: use the new window-order code for maintaining the
	stack

	* workspace.jl (ws-move-window): new optional arg, WAS-FOCUSED,
	when t the window is refocused when moved to the new space
	(select-workspace): new optional arg DONT-FOCUS, if nil the
	most recently used window on the new workspace is focused

	* workspace.jl: when moving windows, try to preserve focus
	where desirable

	* window-order.jl: new file, generalize interface to the stack
	of most recently used windows kept by the cycle-windows
	function

	* focus.jl (focus-in-fun): unless focus-dont-push is set, add
	the focused window to the top of the order stack

	* version 0.11

	* workspace.jl (lock-first-workspace): new option

	* transient.jl: put transient-add-window in the
	before-add-window-hook instead of the add-window-hook

1999-10-04  John Harper  <john@dcs.warwick.ac.uk>

	* functions.jl (window-really-wants-input-p): new function,
	calls window-wants-input-p unless the
	`ignore-window-input-hint' option, or window property, is t
	* x-cycle.jl, workspace.jl, transient.jl, focus.jl: use
	window-really-wants-input-p instead of window-wants-input-p

	* x-cycle.jl (cycle-warp-pointer, cycle-focus-windows): new
	options

	* version 0.10.1

	* smart-placement.jl (sp-do-placement): if no position with
	padding, try without padding

	* gnome.jl (gnome-set-workspace): delete the _WIN_WORKSPACE
	property of sticky windows

	* workspace.jl (ws-add-window): ensure that sticky windows are
	added to no workspaces and are visible

1999-10-03  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.10

	* workspace.jl (auto-workspace-alist): new variable, maps
	window names to the workspace they should start on

	* gnome.jl (gnome-honour-client-state): when _WIN_WORKSPACE is
	set, just set the window's `workspace' property

	* smart-placement.jl (sp-important-windows-weight): new
	variable, also, changed the weight from 1000 to 10
	(sp-auto-weight-alist): new variable, map window names to
	overlap weights
	(sp-do-placement): truncate the window's dimensions to those of
	the screen

	* menus.jl: instead of saving and restoring the _focused_
	window while the menu is popped, save the window that gave us
	the current event, then reinstate it when dispatching the
	selected command

	* workspace.jl: replace all %f interactive decls by %W

	* keymaps.jl: noted in doc strings that certain keymaps are
	only useful for mouse-bindings

	* viewport.jl (set-viewport): call viewport-moved-hook from
	here, instead of set-screen-viewport

1999-10-02  John Harper  <john@dcs.warwick.ac.uk>

	* gnome-menu.jl: new file, read the GNOME menu entries and
	replace the apps-menu

	* workspace.jl (ws-saved-state, ws-load-state): normalize
	workspace numbers to zero when saving/loading the session

	* viewport.jl (set-window-viewport, move-window-viewport): new
	functions
	(move-window-left, move-window-right, move-window-up,
	move-window-down): new commands

1999-10-01  John Harper  <john@dcs.warwick.ac.uk>

	* viewport.jl (move-viewport-to-window): new function
	* x-cycle.jl, workspace.jl: call move-viewport-to-window when
	necessary

	* frames.jl (set-window-frame-style): if decorate-transients is
	set and the window is a transient, only upgrade the type if it
	hasn't been set explicitly

	* keymap.jl (read-event): new function, grab the keyboard then
	return the next event

1999-09-30  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-exit): delete _WIN_AREA and _WIN_AREA_COUNT
	from the root window

	* keymaps.jl (global-keymap): removed the C-Up and C-Down
	bindings

	* viewport.jl: new file, support virtual workspaces
	* workspace.jl: deleted the workspace-columns hack, set
	fixed-position property of sticky windows
	* gnome.jl: handle _WIN_AREA properties
	* sawmill.jl: require viewport

	* transient.jl (transient-add-window): set fixed-position as
	well in sticky windows

	* sm-save.jl, sm-load.jl: don't save position of windows,
	handled by viewport module

	* workspace.jl (workspace-send-boundary-mode): new option
	(send-to-workspace:X): new commands, 0 < X < 10

1999-09-29  John Harper  <john@dcs.warwick.ac.uk>

	* server.jl (server-eval): function to evaluate a string to a
	result string
	(server-net-init, server-net-exit): functions to enable/disable
	the X property based server, disabled by default

	* auto-raise.jl: in the focus-out-hook as well now, disable any
	pending timer

	* workspace.jl (workspace-names): new variable, not yet
	customizable
	* gnome.jl (gnome-set-workspace): set _WIN_WORKSPACE_NAMES if
	necessary

1999-09-28  John Harper  <john@dcs.warwick.ac.uk>

	* customize.jl (customize-group-opt, customize-args): new
	variables, control how the cutomize-program is called

	* x-cycle.jl (cycle-windows): stop the cycling when the
	invoking modifier is released with _any_ other modifiers held

	* x-cycle.jl, workspace.jl, transient.jl, focus.jl: only give
	windows the focus if they've said they want it (through the
	input field of their WM_HINTS property)

	* sm-init.jl (sm-init): don't set the `Environment' property,
	I've had reports that it may prevent $SESSION_MANAGER being
	connected with on restart

	* move-resize.jl (move-resize-lost-window): hooked into the
	unmap and destroy notify hooks, if the window being
	moved/resized is gone, then quit

1999-09-27  John Harper  <john@dcs.warwick.ac.uk>

	* transient.jl (transients-above-parents): new option

1999-09-26  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.9

	* open-look.jl (ol-add-window): fix for single atom
	_OL_WIN_ATTR property (wordperfect)

	* sawmill.jl: set $DISPLAY to the display we opened (for our
	subprocesses)

1999-09-25  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl: remove the requirement that workspace indices
	are always >= 0. This makes moving beyond the first inhabited
	workspace a lot easier. Also removed the total-workspaces
	variable, there's now a ws-workspace-limits function that
	returns the first and last workspaces. Various other minor
	changes..

	* keymaps.jl, gnome.jl, cycle.jl: small changes for modified
	workspace.jl

	* customize.jl (customize-symbol-spec): file-name type now has
	its own widget

	* edges.jl (snap-window-position-to-edges): don't allow windows
	to be snapped off screen

	* move-resize.jl (move-snap-ignored-windows): new option

1999-09-24  John Harper  <john@dcs.warwick.ac.uk>

	* gtkrc.jl: abstracted the gtkrc code from the gtk theme

	* gnome.jl (gnome-set-workspace): only set _WIN_WORKSPACE and
	_WIN_WORKSPACE_COUNT on the root window when the values have
	actually changed

	* workspace.jl (jump-workspaces-forwards,
	jump-workspaces-backwards): new commands
	* keymaps.jl (global-keymap): bind c-down and c-up to the
	jump-workspaces- commands

1999-09-23  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (find-all-frame-styles): new optional arg: sorted,
	whether or not to sort the list

	* place-window.jl (place-window-mode): use best-fit placement
	by default

	* functions.jl (xterm): new command

	* sm-init.jl (sm-init): encapsulates the connection process
	* sawmill.jl: connect with the session manager last of all

1999-09-22  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (window-menu): only include non-ignored windows

	* smart-placement.jl (sp-cost): multiple x-edges by y-edges
	instead of adding when calculating space usefulness 

1999-09-21  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-add-window): if `workspace' property is
	already set, then add to that workspace

	* smart-placement.jl (sp-padding): new option--the number of
	pixels to try and leave between window edges

	* smart-placement.jl (sp-cost): now tries to maximize the
	number of grid lines crossed, and the length of the shared
	window edges

	* smart-placement.jl: improved first-fit fallback algorithm,
	looks for the position where the window has the smallest
	overlap with all other windows

1999-09-20  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: set autoload-verbose to nil

	* workspace.jl (preallocated-workspaces): fix bug in the
	after-set function (calling unquoted hook)

	* gnome.jl (gnome-client-message-handler): only handle
	WIN_STATE and WIN_LAYER if we actually have a window object to
	act on

	* smart-placement.jl (place-window-best-fit): first attempt at
	best-fit placement (cost function is still not right)
	* place-window.jl: added best-fit option

	* sawmill.jl: move setting a fallback frame style to outside
	the condition-case

	* x-cycle.jl: remove windows from stack when iconified

	* workspace.jl (focus-windows-on-uniconify): new defcustom

	* focus.jl (focus-click): since XAllowEvents () ignores passive
	grabs when it replays events, manually search for a binding of
	the focus-inducing click

1999-09-19  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.7

	* x-cycle.jl (x-cycle-next): if the next window was iconified,
	display its name surrounded by square brackets 

	* smart-placement.jl (place-window-first-fit): do first-fit
	window placement
	* place-window.jl: added first-fit option

1999-09-18  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl (x-cycle-modifier-alist): use alt-keysyms and
	meta-keysyms, instead of hard-coding the names (which may not
	work if, for example, `M' is generated by Alt_L and Alt_R)

	* workspace.jl (next-workspace, previous-workspace): support
	the cycling option again

1999-09-17  John Harper  <john@dcs.warwick.ac.uk>

	* x-cycle.jl: remove the possibility of the stack ids
	overflowing

	* keymap.jl (substitute-key-definition): renamed
	substitute-keymap-command
	(substitute-keymap-event): new function

	* stacking.jl (raise-window): handle case where there's only
	one window, the window being raised

1999-09-16  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (select-workspace): only select the workspace if
	it's not the current workspace

	* workspace.jl: removed cycling functions
	(ws-workspace-windows): renamed workspace-windows

	* cycle.jl: new file, old cycle functions plus `previous'
	variants

	* x-cycle.jl: new file, stack-based window cycling
	* keymaps.jl (global-keymap): bound M-TAB to cycle-windows

1999-09-15  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (override-frame-part-classes): new variable

	* workspace.jl (append-workspace-and-send,
	prepend-workspace-and-send): new commands

1999-09-14  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl, stacking.jl, shading.jl, move-resize.jl,
	maximize.jl, frames.jl, focus.jl: changed interactive `f', `w'
	and `W' codes to `%f', `%w' and `%W'

	* frames.jl (auto-window-type-alist): new variable

	* workspace.jl (unshade-selected-windows): new option

	* gnome.jl (gnome-set-workspace): updated for new workspace
	implementation

	* workspace.jl: major rewrite, removed workspace-list variable,
	workspaces are now just non-negative integers, no state stored
	except in each window's plist and the current and last
	workspace indices

	* mwm.jl (mwm-add-window): remove some buttons when asked

	* frames.jl (remove-frame-class, add-frame-class): only call
	rebuild-frame if there's a frame to rebuild

1999-09-13  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-add-window): set `ignored' property of gmc
	and panel windows

	* focus.jl (click-to-focus-keymap): now `Any-Click1'

	* move-resize.jl (move-resize-apply): don't snap when opaque
	resizing

1999-09-12  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.6

1999-09-11  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-honour-client-state): new function,
	iconifies windows whose WM_STATE is IconicState

	* frames.jl (frame-part-classes): appended `-button' to names
	of `menu', `iconify', `close' and `maximize' classes

	* workspace.jl (uniconify-window, display-window): handle
	windows that don't have a workspace (i.e. are sticky)
	(window-menu): add an extra menu for iconified windows that
	aren't listed in any of the other menus (since they're not in
	any workspace)

	* sawmill.jl: rearranged loading order again

	* sm-init.jl (sm-saved-window-properties): initialised to nil
	(sm-add-saved-properties): new function
	* frames.jl, maximize.jl, shading.jl, stacking.jl,
	workspace.jl: tell the session manager which window properties
	to save

	* shading.jl (shading-add-window): reset window type to saved
	type if possible

	* menus.jl (popup-menu): be more careful about assuming that a
	menu is already displayed

1999-09-10  John Harper  <john@dcs.warwick.ac.uk>

	* shading.jl: in add-window-hook, monitoring `shaded' property

	* sawmill.jl: reorder module loading; always load shading

	* frames.jl (frame-part-classes): alist associating frame part
	"classes" and an alist of the properties they inherit
	(remove-frame-class, add-frame-class): adding and removing
	parts of frames (but only if the style allows it)

	* gnome.jl (gnome-honour-client-state): don't try to act on the
	state changes, just set the necessary window properties

	* keymaps.jl (border-keymap): new keymap

1999-09-09  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (set-window-frame-style): don't set the window's
	`type' property if it's implicitly defined

	* shading.jl: new file, implements window shading (displaying
	only the title bar)
	* menus.jl (window-ops-menu): add a toggle-shaded item
	* keymaps.jl (title-keymap): bind button1-click2 to toggle
	shading
	* workspace.jl (display-window): unshade the window if necessary
	* gnome.jl: support WIN_STATE_SHADED

	* keymap.jl: new file, some keymap utility functions

	* select-window.jl, move-resize.jl, focus.jl: change
	make-sparse-keymap to make-keymap

	* custom.jl (defcustom): new option `:range (MIN . MAX)' for
	number type, either MIN or MAX may be nil, defaults to 0 and
	unlimited respectively
	* customize.jl (customize-symbol-spec): propagate :range option

	* workspace.jl, move-resize.jl: specify ranges in numeric
	options

1999-09-08  John Harper  <john@dcs.warwick.ac.uk>

	* server.jl (server-init): set the _SAWMILL_SERVER_WIN property
	on the window itself as well as on the root

1999-09-07  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (set-window-frame-style): don't bother wrapping in
	save-stacking-order since set-window-frame preserves it anyway

	* transient.jl (transient-unmap-window): if in click-to-focus
	mode, and there's no parent window to focus, focus the topmost
	window not the window under the pointer

	* customize.jl: removed all the subprocess code, now we just
	fork off the configurator using the system function and forget
	about it

	* server.jl (server-client-message-handler): for async
	requests, delete the property immediately after reading it, not
	after evaluating the form

1999-09-06  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-infer-anchor): if no edges have
	been selected for moving, move the bottom and right

	* stacking.jl (restack-by-depth): try to optimise the
	restacking done, by comparing the old order with the new order

	* move-resize.jl (move-resize-window): set frame-state-mutex to
	`clicked' while dragging the window

	* select-window.jl, move-resize.jl: call (allow-events
	'async-pointer) since active-grabs are now done with
	synchronous event handling

	* gnome.jl (gnome-add-window): new function, set
	focus-proxy-click to t in panel and gmc icons

	* focus.jl (focus-proxy-click): new option, the same symbol can
	also be set in a window's plist
	(focus-in-fun): when in click-to-focus mode, ensure that all
	non-focused windows have the click-to-focus keymap set

	* focus.jl: map focus-add-window over all existing windows at
	startup

	* workspace.jl (display-window): focus the window

1999-09-05  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.5

	* workspace.jl (ws-index): renamed as workspace-index
	(select-workspace): ignore negative indices

	* gnome.jl (gnome-init): set the _WIN_AREA and _WIN_AREA_COUNT
	properties (even though we only have one area), the gnome pager
	doesn't take any notice if we just delete them

	* frames.jl (frame-style-menu): added a `Default' option.
	(set-window-frame-style): move the save-stacking-order macro
	call to this function

	* sm-init.jl (sm-saved-window-properties): save the frame-style
	property

	* frames.jl (auto-frame-style-alist): new variable
	(check-frame-availability): new function
	(set-window-frame-style): give a window a specified frame
	(frame-style-menu): menu constructor for all frame styles

	* menus.jl (window-ops-menu): added a `Frame style' submenu,
	from the frame-style-menu constructor

1999-09-04  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (custom-make-frame-style-widget): use the new
	`frame-style' widget

	* frames.jl (after-setting-frame-option): call
	reframe-all-windows if always-update-frames is set

	* move-resize.jl (move-show-position, resize-show-dimensions):
	new options, when t the window attributes are displayed while
	moving or resizing the window

	* sm-init.jl (sm-init-properties): deleted this function, it's
	now inlined into the initialisation section (since it's only
	called once, why let it consume memory?)

	* frames.jl (set-frame-for-window): only use the
	decorate-transients option if the window actually _is_ a
	transient. Also, store the final window type (so it can be
	saved with the session)

	* workspace.jl (preallocated-workspaces): new defcustom
	(ws-add-window-to-space): abort if window is already in a
	space, remember to hide the window if it's not visible
	(ws-add-window): abort if window is in a space already
	(ws-add-window-to-space-by-index): new function
	(ws-remove-window): never delete the sole remaining workspace
	(ws-add-workspace): if no workspaces exists, make the new one
	current
	(ws-save-session, ws-restore-session): session management hooks
	to preserve the workspace that each window is on

	* sm-save.jl (sm-get-window-state): fixed how the
	sm-window-save-functions results are used

	* gnome.jl (gnome-honour-client-state): honour the
	_WIN_WORKSPACE property

	* mwm.jl, open-look.jl, gnome.jl: moved functions from
	add-window-hook to before-add-window-hook

	* functions.jl (make-directory-recursively): new function
	* customize.jl, custom.jl: when writing into `~/.sawmill', call
	make-directory-recursively first

1999-09-03  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (menu-program): this is now under the libexec dir

	* sm-save.jl, sm-load.jl, sm-init.jl, sm-common.jl: the Lisp
	portion of the session management code. Allows arbitrary Lisp
	modules to save and reload their state as well as the standard
	stuff
	* sawmill.jl: require 'sm-init

	* custom.jl: moved the custom file from ~/.sawmill-custom to
	~/.sawmill/custom. The old file will be renamed at startup if
	possible

1999-09-02  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (uniconify-to-current-workspace): improved the
	doc string

	* menus.jl, customize.jl, custom.jl: removed the `menus' and
	`custom' customization groups

	* stacking.jl (stacking-order-by-depth, stack-window-below,
	stack-window-above): new functions
	(raise-window): use x-raise-window where possible, this removes
	the ugly flicker (at least when raising into the top layer)

	* version 0.4

	* menus.jl (menu-stop-process): optional arg FORCE

	* menus.jl (menu-start-process): redirect stderr to nil

1999-08-31  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl, sawmill.jl, keymaps.jl: if batch-mode is
	non-nil, don't do anything that would access the display when
	initialising or shutting down

	* workspace.jl: added symbolic NormalState and IconicState
	constants

	* workspace.jl (ws-set-client-state): new function, in
	window-state-change-hook and add-window-hook

1999-08-30  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill.jl: load custom-set values before .sawmillrc (but
	after sawmill-defaults if no .sawmillrc)

1999-08-29  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (window-ops-menu): added some more sub-menus

	* frames.jl: create commands to set the frame of a window to
	each of the possible window types
	(set-frame-for-window): new optional arg TYPE
	

	* customize.jl (customize): require all the custom-require
	features

	* stacking.jl (window-on-top-p): new function

	* move-resize.jl: resizing now chooses the direction to resize
	in by the initial position of the pointer in relation to the
	window frame. The window is divided into a 3x3 grid, the
	pointer must be in one of the outer rectangles for the window
	to resize in that direction

	* server.jl, gnome.jl: only initialise these if not running in
	batch-mode

1999-08-28  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (user-theme-directory, system-theme-directory,
	theme-load-path): new variables
	(load-frame-style, find-all-frame-styles): new functions for
	loading the new-style "themes"

1999-08-27  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl: renamed ws-workspaces as workspace-list, and
	ws-current-workspace as current-workspace

1999-08-26  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl: set frame-draw-mutex to t whilst
	rubber-banding windows

	* themes/simple.jl, themes/brushed-metal.jl,
	themes/absolute-e.jl: reorder image definitions

	* workspace.jl: define commands `select-workspace:X' for 1 <= X
	<= 9

	* stacking.jl (auto-depth-alist): match window names to depths

	* focus.jl: add the click-to-focus keymap to new windows

	* menus.jl: record the input focus when starting a menu, then
	restore it afterwards

	* place-window.jl (place-transient-mode): new variable

	* customize.jl (customize-symbol-spec): propagate the :widget
	attribute to `set' elements

1999-08-25  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl (reframe-all-windows): preserve the original
	stacking order

	* functions.jl (save-stacking-order): new macro

	* stacking.jl: new file, implements `depth' of windows
	* gnome.jl: support the _WIN_LAYER hints

	* keymaps.jl (maximize-button-keymap): new keymap

	* select-window.jl (select-window): check that pointer-grab
	actually succeeds

	* workspace.jl (ws-remove-window): after deleting the last
	workspace, don't select the first workspace, select the last

1999-08-24  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.jl (gnome-init): use the new
	`workspace-state-change-hook' instead of all the individual
	hooks

	* workspace.jl (move-workspace-forwards,
	move-workspace-backwards): new commands, slide the current
	workspace along the list of all workspaces

	* customize.jl (customize): passing this function a group name
	makes it customize that group only
	* custom.jl (custom-menu): menu constructor including all
	customize groups
	(custom-declare-group): create an interactive function
	`customize:FOO' for each group FOO
	* menus.jl: use custom-menu for the customize menu

1999-08-23  John Harper  <john@dcs.warwick.ac.uk>

	* frames.jl: (window-type-remove-title, window-type-remove-border,
	window-type-add-title, window-type-add-border): for windows
	with no title and no border, use the new type `unframed', not
	`shaped-transient'
	* themes/simple.jl, themes/brushed-metal.jl,
	themes/absolute-e.jl: set `unframed' windows to the `nil-frame'

	* server.jl (server-init): new function

	* version 0.3a

	* move-resize.jl: query the _current_ mouse position, not the
	last seen in an event

	* menus.jl: menus now work asynchronously, some hackery to get
	the focus back before calling the selected command

	* maximize.jl (unmaximize-window): optional arg DIRECTION as
	with maximize-window, allows selective unmaximization

	* gnome.jl: support the MAXIMIZED window states

	* server.jl: for asynchronous requests delete the property
	after reading it (so the client knows when it can continue)

	* edges.jl (snap-window-position-to-edges): minor fix

1999-08-22  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.3

	* server.jl: new file, handle ClientMessages initiating
	sawmill-client requests
	* sawmill.jl: require server
	* sawmill-defaults.jl: don't call server-open anymore

	* maximize.jl: new file, window maximization
	* menus.jl (window-ops-menu): added maximize commands

	* customize.jl (customize-sentinel): write out the custom
	script when the process exits

	* auto-raise.jl (rw-on-focus): handle case where timeout is
	zero

	* move-resize.jl (move-resize-window): temporarily bind
	unbound-key-hook to nil, otherwise the gnome code may cause
	havoc

	* functions.jl (with-server-grabbed): new macro

	* move-resize.jl (move-resize-window): put the call to
	ungrab-server back into the tail of the unwind-protect where it
	should be; also be aware that move-resize-mode may have changed

	* place-window.jl (place-window): fix the `interactive'
	placement mode

	* open-look.jl, mwm.jl: new files, implement some of the Motif
	and OpenLook window hints 
	* sawmill.jl: require mwm and open-look

	* frames.jl (window-type): moved from transient.jl; if the
	window has a `type' property, this is assumed to be the window
	type
	(window-type-remove-title, window-type-remove-border,
	window-type-add-title, window-type-add-border): new functions

1999-08-21  John Harper  <john@dcs.warwick.ac.uk>

	* focus.jl (focus-mode): new variable, replaces sloppy-focus.
	Implemented click-to-focus mode

	* move-resize.jl (move-window-interactively,
	resize-window-interactively): use the `W' interactive decl

	* workspace.jl (ws-client-msg-handler): handle WM_CHANGE_STATE
	messages (i.e. iconification requests)

	* gnome.jl: new file, replaces the libgnome.so dl

1999-08-20  John Harper  <john@dcs.warwick.ac.uk>

	* move-resize.jl (move-resize-window): fix error when there's
	no current-event

	* workspace.jl (next-window): new command, cycles through all
	uniconified windows on all workspaces

1999-08-19  John Harper  <john@dcs.warwick.ac.uk>

	* edges.jl: new file, some utilities for dealing with window
	edges
	* move-resize.jl (move-snap-edges, move-snap-epsilon):
	variables controlling window edge snapping whilst moving

	* custom.jl (custom-add-to-group): ensure that only one
	instance of any symbol is added to the group

1999-08-16  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.2

	* transient.jl (transient-unmap-window): if the window being
	unmapped is focused, and there's no transient-parent to focus
	on, then focus on the window under the pointer (in case the
	pointer isn't in the unmapped window)

1999-08-15  John Harper  <john@dcs.warwick.ac.uk>

	* keymaps.jl: keymaps are now customizable

	* customize.jl (customize-ui-spec): call each group's :widget
	function if defined
	(about): a new group, just contains a label with some
	info/legalese

	* custom.jl (custom-declare-variable): new keyword :before-set,
	similar to :after-set
	(custom-declare-group): this now takes a list of keywords as
	with defcustom. The only keyword currently is :widget, a
	function to call to layout the page containing the user
	interface elements of the group

1999-08-14  John Harper  <john@dcs.warwick.ac.uk>

	* keymaps.jl: add a label to the `bindings' group noting that
	keybindings aren't implemented
	* custom.jl: added group `bindings'

	* transient.jl (focus-windows-when-mapped): new variable, any
	newly-mapped window is given the input focus

1999-08-13  John Harper  <john@dcs.warwick.ac.uk>

	* themes/simple.jl: defined the missing three frame types;
	border colors are now configurable

	* keymaps.jl (iconify-button-keymap): Button3 is now bound to
	`popup-window-menu'

	* customize.jl (customize-symbol-spec): use the `color' widget
	for colors

	* transient.jl (transients-get-focus): moved to custom group
	`focus'

	* custom.jl (custom-declare-variable): remember to check for
	:widget keyword

	* workspace.jl (ws-merge-workspaces): call the
	delete-workspace-hook after deleting the source workspace

1999-08-12  John Harper  <john@dcs.warwick.ac.uk>

	* place-window.jl (place-window): for random placement, use the
	dimensions of the window frame not the client window

	* transient.jl (transient-unmap-window): new function, used to
	return the focus from a transient to its parent when the
	transient window gets unmapped

	* move-resize.jl (move-resize-window): fix the bug whereby the
	first motion event was ignored (making the pointer and window
	get out of sync). If the command is called from a motion event,
	then look at the position of the _previous_ pointer event, and
	start moving from there

1999-08-11  John Harper  <john@dcs.warwick.ac.uk>

	* customize.jl (customize-stop-process): only kill the process
	when it's actually running

	* custom.jl (defcustom): new tag :after-set defines a function
	to call after setting the variable

	* frames.jl (decorate-transients): controls whether transient
	windows get reduced or normal frames

1999-08-09  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-defaults.jl: remove some settings that are normally
	set by customize
	* sawmill.jl: load absolute-e if no frame otherwise specified

	* simple.jl, brushed-metal.jl, absolute-e.jl: moved to the new
	`themes' subdirectory

	* frames.jl: new file, inherited the frame setting logic from
	transient.jl. Removed the frameset idea, now we have `frame
	styles' which are functions; they return the frame to use for a
	given window. Also support customization of the default	style
	* transient.jl: moved frame stuff to frames.jl

	* custom.jl, customize.jl: new custom properties `custom-set',
	`custom-get' and `custom-widget'; inherited from type if not
	set in each symbol. New types `font' and `color'. New group
	`appearance'

1999-08-07  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (raise-selected-windows,
	warp-to-selected-windows): new variables

	* custom.jl: new file, inspired by Emacs' customize system.
	This file allows Lisp libraries to declare their configurable
	settings (and their types)

	* customize.jl: new file, this uses the defcustom information
	to present the user a graphical configuration interface. These
	settings are stored in ~/.sawmill-custom and loaded on
	initialisation

	* workspace.jl, transient.jl, place-window.jl, move-resize.jl,
	menus.jl, focus.jl, auto-raise.jl: changed some defvar's to
	suitable defcustom's

	* sawmill.jl: load custom settings

1999-08-06  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (display-window): raise the chosen window

1999-08-03  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.1

1999-08-02  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-add-window-to-space): abort if the window is
	marked as being sticky

	* workspace.jl: call window-state-change-hook when the window's
	``state'' (i.e. sticky, iconified, ..) changes

	* workspace.jl (toggle-window-sticky): new command
	(ws-remove-window): new optional argument DONT-HIDE

	* keymaps.jl (window-keymap): bind "M-Button2" to
	popup-window-menu

	* workspace.jl: where appropriate use call-window-hook instead
	of call-hook

	* workspace.jl (transients-on-parents-workspace): new variable
	(merge-next-workspace, merge-previous-workspace,
	insert-workspace): new commands, in the workspace menu
	(popup-workspace-list, popup-window-list): new commands

	* transient.jl (transients-get-focus): new variable, when t
	mapping transient windows whose parent is focused passes the
	focus to the transient

	* place-window.jl (place-window): fix a missing
	close-parenthesis

1999-08-01  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (ws-remove-window): fix the bug whereby deleting
	the last workspace didn't nullify ws-current-workspace. Also
	ensure that both remove-from-workspace and
	delete-workspace-hook are only called _after_ the deletion has
	occurred. remove-from-workspace now gets two args: window and
	workspace

1999-07-31  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl: new hook `delete-workspace-hook'

	* transient.jl (ignored-window-names, sticky-window-names): new
	variables, lists of regexps

	* sawmill-defaults.jl: removed the user-add-window function,
	added some comments about getting GNOME support

	* place-window.jl (ignore-program-positions): program specified
	window positions are ignored if this is set. User specified
	positions are never ignored

	* keymaps.jl: bind the root menu to Button2 not Button1

1999-07-30  John Harper  <john@dcs.warwick.ac.uk>

	* menus.jl (menu-program-stays-running): if this variable is a
	number, it defines how long (in seconds) that a menu subprocess
	is allowed to stay running between menus being required.
	Default is one minute

1999-07-29  John Harper  <john@dcs.warwick.ac.uk>

	* simple.jl, brushed-metal.jl, absolute-e.jl: changes for
	framesets

	* transient.jl: introduce the frameset idea, an alist of frames

	* auto-raise.jl: new file, uses a timer to work correctly
	(raise-windows-on-focus): can now be a regexp matching window
	names to raise
	* focus.jl: removed the auto-raise stuff

1999-07-28  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (next-workspace-window): new command

	* focus.jl (focus-raise): synchronise the server before timing
	out

1999-07-28  Stewart Perry  <scp@dcs.warwick.ac.uk>

	* focus.jl (raise-windows-on-focus, raise-window-timeout): new
	variables, auto-raise functionality

1999-07-28  John Harper  <john@dcs.warwick.ac.uk>

	* sawmill-defaults.jl: set the frame to `nil-frame' to turn off
	the frame, not to nil

	* transient.jl (transient-add-window): only set the frame if
	it's currently nil, set it to default-frame if not transient or
	shaped

	* simple.jl, brushed-metal.jl, absolute-e.jl: frames are
	defined as lists now

	* absolute-e.jl: added shaped and shaped-transient frames

	* transient.jl: now looks for shaped windows as well as
	transients

1999-07-26  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (raise-window-on-uniconify): new variable

	* menus.jl (apps-menu): new variable, the "Applications" item
	of the root menu

1999-07-25  John Harper  <john@dcs.warwick.ac.uk>

	* workspace.jl (cycle-through-workspaces,
	delete-workspaces-when-empty, uniconify-to-current-workspace,
	static-workspace-menus): new variables
	(workspace-menu, window-menu): dynamic menu constructors
	(iconify-window, uniconify-window): new commands

	* sawmill.jl: load some more libraries

	* place-window.jl: this uses the new place-window-hook. But
	random placement is still the only working option

	* move-resize.jl: now obeys most of the window's size hints
	(all but the aspect ratios)

	* menus.jl: implement popup menus using the sawmill-ui script

	* functions.jl (get-window-by-name, get-window-by-id): new
	functions

	* keymaps.jl: some more bindings
	(root-window-keymap): new keymap

